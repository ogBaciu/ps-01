**********************
Windows PowerShell transcript start
Start time: 20200804104335
Username: NBK-DELL7\Administrator
RunAs User: NBK-DELL7\Administrator
Configuration Name: 
Machine: NBK-DELL7 (Microsoft Windows NT 10.0.18362.0)
Host Application: C:\Windows\system32\WindowsPowerShell\v1.0\PowerShell_ISE.exe
Process ID: 10832
PSVersion: 5.1.18362.752
PSEdition: Desktop
PSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.18362.752
BuildVersion: 10.0.18362.752
CLRVersion: 4.0.30319.42000
WSManStackVersion: 3.0
PSRemotingProtocolVersion: 2.3
SerializationVersion: 1.1.0.1
**********************
Transcript started, output file is ./transcript.txt

Status   Name               DisplayName
------   ----               -----------
Stopped  XblGameSave        Xbox Live Game Save
Stopped  XblGameSave        Xbox Live Game Save

Verb                : Get
Noun                : Service
HelpFile            : Microsoft.PowerShell.Commands.Management.dll-Help.xml
PSSnapIn            :
Version             : 3.1.0.0
ImplementingType    : Microsoft.PowerShell.Commands.GetServiceCommand
Definition          :
                      Get-Service [[-Name] <string[]>] [-ComputerName <string[]>] [-DependentServices] [-RequiredServices] [-Include <string[]>] [-Exclude <string[]>]
                      [<CommonParameters>]

                      Get-Service -DisplayName <string[]> [-ComputerName <string[]>] [-DependentServices] [-RequiredServices] [-Include <string[]>] [-Exclude
                      <string[]>] [<CommonParameters>]

                      Get-Service [-ComputerName <string[]>] [-DependentServices] [-RequiredServices] [-Include <string[]>] [-Exclude <string[]>] [-InputObject
                      <ServiceController[]>] [<CommonParameters>]

DefaultParameterSet : Default
OutputType          : {System.ServiceProcess.ServiceController}
Options             : ReadOnly
Name                : Get-Service
CommandType         : Cmdlet
Source              : Microsoft.PowerShell.Management
Visibility          : Public
ModuleName          : Microsoft.PowerShell.Management
Module              : Microsoft.PowerShell.Management
RemotingCapability  : SupportedByCommand
Parameters          : {[Name, System.Management.Automation.ParameterMetadata], [ComputerName, System.Management.Automation.ParameterMetadata], [DependentServices,
                      System.Management.Automation.ParameterMetadata], [RequiredServices, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[[-Name] <string[]>] [-ComputerName <string[]>] [-DependentServices] [-RequiredServices] [-Include <string[]>] [-Exclude <string[]>]
                      [<CommonParameters>], -DisplayName <string[]> [-ComputerName <string[]>] [-DependentServices] [-RequiredServices] [-Include <string[]>] [-Exclude
                      <string[]>] [<CommonParameters>], [-ComputerName <string[]>] [-DependentServices] [-RequiredServices] [-Include <string[]>] [-Exclude <string[]>]
                      [-InputObject <ServiceController[]>] [<CommonParameters>]}
HelpUri             : https://go.microsoft.com/fwlink/?LinkID=113332
DLL                 : C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.PowerShell.Commands.Management\v4.0_3.0.0.0__31bf3856ad364e35\Microsoft.PowerShell.Commands.Ma
                      nagement.dll


Verb                : New
Noun                : Service
HelpFile            : Microsoft.PowerShell.Commands.Management.dll-Help.xml
PSSnapIn            :
Version             : 3.1.0.0
ImplementingType    : Microsoft.PowerShell.Commands.NewServiceCommand
Definition          :
                      New-Service [-Name] <string> [-BinaryPathName] <string> [-DisplayName <string>] [-Description <string>] [-StartupType <ServiceStartMode>]
                      [-Credential <pscredential>] [-DependsOn <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

DefaultParameterSet :
OutputType          : {System.ServiceProcess.ServiceController}
Options             : ReadOnly
Name                : New-Service
CommandType         : Cmdlet
Source              : Microsoft.PowerShell.Management
Visibility          : Public
ModuleName          : Microsoft.PowerShell.Management
Module              : Microsoft.PowerShell.Management
RemotingCapability  : PowerShell
Parameters          : {[Name, System.Management.Automation.ParameterMetadata], [BinaryPathName, System.Management.Automation.ParameterMetadata], [DisplayName,
                      System.Management.Automation.ParameterMetadata], [Description, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[-Name] <string> [-BinaryPathName] <string> [-DisplayName <string>] [-Description <string>] [-StartupType <ServiceStartMode>] [-Credential
                      <pscredential>] [-DependsOn <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]}
HelpUri             : https://go.microsoft.com/fwlink/?LinkID=113359
DLL                 : C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.PowerShell.Commands.Management\v4.0_3.0.0.0__31bf3856ad364e35\Microsoft.PowerShell.Commands.Ma
                      nagement.dll


Verb                : Restart
Noun                : Service
HelpFile            : Microsoft.PowerShell.Commands.Management.dll-Help.xml
PSSnapIn            :
Version             : 3.1.0.0
ImplementingType    : Microsoft.PowerShell.Commands.RestartServiceCommand
Definition          :
                      Restart-Service [-InputObject] <ServiceController[]> [-Force] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm]
                      [<CommonParameters>]

                      Restart-Service [-Name] <string[]> [-Force] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

                      Restart-Service -DisplayName <string[]> [-Force] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

DefaultParameterSet : InputObject
OutputType          : {System.ServiceProcess.ServiceController}
Options             : ReadOnly
Name                : Restart-Service
CommandType         : Cmdlet
Source              : Microsoft.PowerShell.Management
Visibility          : Public
ModuleName          : Microsoft.PowerShell.Management
Module              : Microsoft.PowerShell.Management
RemotingCapability  : PowerShell
Parameters          : {[Force, System.Management.Automation.ParameterMetadata], [Name, System.Management.Automation.ParameterMetadata], [InputObject,
                      System.Management.Automation.ParameterMetadata], [PassThru, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[-InputObject] <ServiceController[]> [-Force] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>],
                      [-Name] <string[]> [-Force] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>], -DisplayName
                      <string[]> [-Force] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]}
HelpUri             : https://go.microsoft.com/fwlink/?LinkID=113385
DLL                 : C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.PowerShell.Commands.Management\v4.0_3.0.0.0__31bf3856ad364e35\Microsoft.PowerShell.Commands.Ma
                      nagement.dll


Verb                : Resume
Noun                : Service
HelpFile            : Microsoft.PowerShell.Commands.Management.dll-Help.xml
PSSnapIn            :
Version             : 3.1.0.0
ImplementingType    : Microsoft.PowerShell.Commands.ResumeServiceCommand
Definition          :
                      Resume-Service [-InputObject] <ServiceController[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm]
                      [<CommonParameters>]

                      Resume-Service [-Name] <string[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

                      Resume-Service -DisplayName <string[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

DefaultParameterSet : InputObject
OutputType          : {System.ServiceProcess.ServiceController}
Options             : ReadOnly
Name                : Resume-Service
CommandType         : Cmdlet
Source              : Microsoft.PowerShell.Management
Visibility          : Public
ModuleName          : Microsoft.PowerShell.Management
Module              : Microsoft.PowerShell.Management
RemotingCapability  : PowerShell
Parameters          : {[Name, System.Management.Automation.ParameterMetadata], [InputObject, System.Management.Automation.ParameterMetadata], [PassThru,
                      System.Management.Automation.ParameterMetadata], [DisplayName, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[-InputObject] <ServiceController[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>], [-Name]
                      <string[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>], -DisplayName <string[]> [-PassThru]
                      [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]}
HelpUri             : https://go.microsoft.com/fwlink/?LinkID=113386
DLL                 : C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.PowerShell.Commands.Management\v4.0_3.0.0.0__31bf3856ad364e35\Microsoft.PowerShell.Commands.Ma
                      nagement.dll


Verb                : Set
Noun                : Service
HelpFile            : Microsoft.PowerShell.Commands.Management.dll-Help.xml
PSSnapIn            :
Version             : 3.1.0.0
ImplementingType    : Microsoft.PowerShell.Commands.SetServiceCommand
Definition          :
                      Set-Service [-Name] <string> [-ComputerName <string[]>] [-DisplayName <string>] [-Description <string>] [-StartupType <ServiceStartMode>] [-Status
                      <string>] [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]

                      Set-Service [-ComputerName <string[]>] [-DisplayName <string>] [-Description <string>] [-StartupType <ServiceStartMode>] [-Status <string>]
                      [-InputObject <ServiceController>] [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]

DefaultParameterSet : Name
OutputType          : {System.ServiceProcess.ServiceController}
Options             : ReadOnly
Name                : Set-Service
CommandType         : Cmdlet
Source              : Microsoft.PowerShell.Management
Visibility          : Public
ModuleName          : Microsoft.PowerShell.Management
Module              : Microsoft.PowerShell.Management
RemotingCapability  : SupportedByCommand
Parameters          : {[ComputerName, System.Management.Automation.ParameterMetadata], [Name, System.Management.Automation.ParameterMetadata], [DisplayName,
                      System.Management.Automation.ParameterMetadata], [Description, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[-Name] <string> [-ComputerName <string[]>] [-DisplayName <string>] [-Description <string>] [-StartupType <ServiceStartMode>] [-Status <string>]
                      [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>], [-ComputerName <string[]>] [-DisplayName <string>] [-Description <string>] [-StartupType
                      <ServiceStartMode>] [-Status <string>] [-InputObject <ServiceController>] [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]}
HelpUri             : https://go.microsoft.com/fwlink/?LinkID=113399
DLL                 : C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.PowerShell.Commands.Management\v4.0_3.0.0.0__31bf3856ad364e35\Microsoft.PowerShell.Commands.Ma
                      nagement.dll


Verb                : Start
Noun                : Service
HelpFile            : Microsoft.PowerShell.Commands.Management.dll-Help.xml
PSSnapIn            :
Version             : 3.1.0.0
ImplementingType    : Microsoft.PowerShell.Commands.StartServiceCommand
Definition          :
                      Start-Service [-InputObject] <ServiceController[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm]
                      [<CommonParameters>]

                      Start-Service [-Name] <string[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

                      Start-Service -DisplayName <string[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

DefaultParameterSet : InputObject
OutputType          : {System.ServiceProcess.ServiceController}
Options             : ReadOnly
Name                : Start-Service
CommandType         : Cmdlet
Source              : Microsoft.PowerShell.Management
Visibility          : Public
ModuleName          : Microsoft.PowerShell.Management
Module              : Microsoft.PowerShell.Management
RemotingCapability  : PowerShell
Parameters          : {[Name, System.Management.Automation.ParameterMetadata], [InputObject, System.Management.Automation.ParameterMetadata], [PassThru,
                      System.Management.Automation.ParameterMetadata], [DisplayName, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[-InputObject] <ServiceController[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>], [-Name]
                      <string[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>], -DisplayName <string[]> [-PassThru]
                      [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]}
HelpUri             : https://go.microsoft.com/fwlink/?LinkID=113406
DLL                 : C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.PowerShell.Commands.Management\v4.0_3.0.0.0__31bf3856ad364e35\Microsoft.PowerShell.Commands.Ma
                      nagement.dll


Verb                : Stop
Noun                : Service
HelpFile            : Microsoft.PowerShell.Commands.Management.dll-Help.xml
PSSnapIn            :
Version             : 3.1.0.0
ImplementingType    : Microsoft.PowerShell.Commands.StopServiceCommand
Definition          :
                      Stop-Service [-InputObject] <ServiceController[]> [-Force] [-NoWait] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm]
                      [<CommonParameters>]

                      Stop-Service [-Name] <string[]> [-Force] [-NoWait] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm]
                      [<CommonParameters>]

                      Stop-Service -DisplayName <string[]> [-Force] [-NoWait] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm]
                      [<CommonParameters>]

DefaultParameterSet : InputObject
OutputType          : {System.ServiceProcess.ServiceController}
Options             : ReadOnly
Name                : Stop-Service
CommandType         : Cmdlet
Source              : Microsoft.PowerShell.Management
Visibility          : Public
ModuleName          : Microsoft.PowerShell.Management
Module              : Microsoft.PowerShell.Management
RemotingCapability  : PowerShell
Parameters          : {[Force, System.Management.Automation.ParameterMetadata], [NoWait, System.Management.Automation.ParameterMetadata], [Name,
                      System.Management.Automation.ParameterMetadata], [InputObject, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[-InputObject] <ServiceController[]> [-Force] [-NoWait] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm]
                      [<CommonParameters>], [-Name] <string[]> [-Force] [-NoWait] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm]
                      [<CommonParameters>], -DisplayName <string[]> [-Force] [-NoWait] [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm]
                      [<CommonParameters>]}
HelpUri             : https://go.microsoft.com/fwlink/?LinkID=113414
DLL                 : C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.PowerShell.Commands.Management\v4.0_3.0.0.0__31bf3856ad364e35\Microsoft.PowerShell.Commands.Ma
                      nagement.dll


Verb                : Suspend
Noun                : Service
HelpFile            : Microsoft.PowerShell.Commands.Management.dll-Help.xml
PSSnapIn            :
Version             : 3.1.0.0
ImplementingType    : Microsoft.PowerShell.Commands.SuspendServiceCommand
Definition          :
                      Suspend-Service [-InputObject] <ServiceController[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm]
                      [<CommonParameters>]

                      Suspend-Service [-Name] <string[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

                      Suspend-Service -DisplayName <string[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

DefaultParameterSet : InputObject
OutputType          : {System.ServiceProcess.ServiceController}
Options             : ReadOnly
Name                : Suspend-Service
CommandType         : Cmdlet
Source              : Microsoft.PowerShell.Management
Visibility          : Public
ModuleName          : Microsoft.PowerShell.Management
Module              : Microsoft.PowerShell.Management
RemotingCapability  : PowerShell
Parameters          : {[Name, System.Management.Automation.ParameterMetadata], [InputObject, System.Management.Automation.ParameterMetadata], [PassThru,
                      System.Management.Automation.ParameterMetadata], [DisplayName, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[-InputObject] <ServiceController[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>], [-Name]
                      <string[]> [-PassThru] [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>], -DisplayName <string[]> [-PassThru]
                      [-Include <string[]>] [-Exclude <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]}
HelpUri             : https://go.microsoft.com/fwlink/?LinkID=113416
DLL                 : C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.PowerShell.Commands.Management\v4.0_3.0.0.0__31bf3856ad364e35\Microsoft.PowerShell.Commands.Ma
                      nagement.dll


Verb                : Debug
Noun                : Process
HelpFile            : Microsoft.PowerShell.Commands.Management.dll-Help.xml
PSSnapIn            :
Version             : 3.1.0.0
ImplementingType    : Microsoft.PowerShell.Commands.DebugProcessCommand
Definition          :
                      Debug-Process [-Name] <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]

                      Debug-Process [-Id] <int[]> [-WhatIf] [-Confirm] [<CommonParameters>]

                      Debug-Process -InputObject <Process[]> [-WhatIf] [-Confirm] [<CommonParameters>]

DefaultParameterSet : Name
OutputType          : {}
Options             : ReadOnly
Name                : Debug-Process
CommandType         : Cmdlet
Source              : Microsoft.PowerShell.Management
Visibility          : Public
ModuleName          : Microsoft.PowerShell.Management
Module              : Microsoft.PowerShell.Management
RemotingCapability  : PowerShell
Parameters          : {[Id, System.Management.Automation.ParameterMetadata], [Name, System.Management.Automation.ParameterMetadata], [InputObject,
                      System.Management.Automation.ParameterMetadata], [Verbose, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[-Name] <string[]> [-WhatIf] [-Confirm] [<CommonParameters>], [-Id] <int[]> [-WhatIf] [-Confirm] [<CommonParameters>], -InputObject <Process[]>
                      [-WhatIf] [-Confirm] [<CommonParameters>]}
HelpUri             : https://go.microsoft.com/fwlink/?LinkID=135206
DLL                 : C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.PowerShell.Commands.Management\v4.0_3.0.0.0__31bf3856ad364e35\Microsoft.PowerShell.Commands.Ma
                      nagement.dll


Verb                : Get
Noun                : Process
HelpFile            : Microsoft.PowerShell.Commands.Management.dll-Help.xml
PSSnapIn            :
Version             : 3.1.0.0
ImplementingType    : Microsoft.PowerShell.Commands.GetProcessCommand
Definition          :
                      Get-Process [[-Name] <string[]>] [-ComputerName <string[]>] [-Module] [-FileVersionInfo] [<CommonParameters>]

                      Get-Process [[-Name] <string[]>] -IncludeUserName [<CommonParameters>]

                      Get-Process -Id <int[]> [-ComputerName <string[]>] [-Module] [-FileVersionInfo] [<CommonParameters>]

                      Get-Process -Id <int[]> -IncludeUserName [<CommonParameters>]

                      Get-Process -InputObject <Process[]> [-ComputerName <string[]>] [-Module] [-FileVersionInfo] [<CommonParameters>]

                      Get-Process -InputObject <Process[]> -IncludeUserName [<CommonParameters>]

DefaultParameterSet : Name
OutputType          : {System.Diagnostics.ProcessModule, System.Diagnostics.FileVersionInfo, System.Diagnostics.Process}
Options             : ReadOnly
Name                : Get-Process
CommandType         : Cmdlet
Source              : Microsoft.PowerShell.Management
Visibility          : Public
ModuleName          : Microsoft.PowerShell.Management
Module              : Microsoft.PowerShell.Management
RemotingCapability  : SupportedByCommand
Parameters          : {[Name, System.Management.Automation.ParameterMetadata], [Id, System.Management.Automation.ParameterMetadata], [InputObject,
                      System.Management.Automation.ParameterMetadata], [IncludeUserName, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[[-Name] <string[]>] [-ComputerName <string[]>] [-Module] [-FileVersionInfo] [<CommonParameters>], [[-Name] <string[]>] -IncludeUserName
                      [<CommonParameters>], -Id <int[]> [-ComputerName <string[]>] [-Module] [-FileVersionInfo] [<CommonParameters>], -Id <int[]> -IncludeUserName
                      [<CommonParameters>]...}
HelpUri             : https://go.microsoft.com/fwlink/?LinkID=113324
DLL                 : C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.PowerShell.Commands.Management\v4.0_3.0.0.0__31bf3856ad364e35\Microsoft.PowerShell.Commands.Ma
                      nagement.dll


Verb                : Start
Noun                : Process
HelpFile            : Microsoft.PowerShell.Commands.Management.dll-Help.xml
PSSnapIn            :
Version             : 3.1.0.0
ImplementingType    : Microsoft.PowerShell.Commands.StartProcessCommand
Definition          :
                      Start-Process [-FilePath] <string> [[-ArgumentList] <string[]>] [-Credential <pscredential>] [-WorkingDirectory <string>] [-LoadUserProfile]
                      [-NoNewWindow] [-PassThru] [-RedirectStandardError <string>] [-RedirectStandardInput <string>] [-RedirectStandardOutput <string>] [-WindowStyle
                      <ProcessWindowStyle>] [-Wait] [-UseNewEnvironment] [<CommonParameters>]

                      Start-Process [-FilePath] <string> [[-ArgumentList] <string[]>] [-WorkingDirectory <string>] [-PassThru] [-Verb <string>] [-WindowStyle
                      <ProcessWindowStyle>] [-Wait] [<CommonParameters>]

DefaultParameterSet : Default
OutputType          : {System.Diagnostics.Process}
Options             : ReadOnly
Name                : Start-Process
CommandType         : Cmdlet
Source              : Microsoft.PowerShell.Management
Visibility          : Public
ModuleName          : Microsoft.PowerShell.Management
Module              : Microsoft.PowerShell.Management
RemotingCapability  : PowerShell
Parameters          : {[FilePath, System.Management.Automation.ParameterMetadata], [ArgumentList, System.Management.Automation.ParameterMetadata], [Credential,
                      System.Management.Automation.ParameterMetadata], [WorkingDirectory, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[-FilePath] <string> [[-ArgumentList] <string[]>] [-Credential <pscredential>] [-WorkingDirectory <string>] [-LoadUserProfile] [-NoNewWindow]
                      [-PassThru] [-RedirectStandardError <string>] [-RedirectStandardInput <string>] [-RedirectStandardOutput <string>] [-WindowStyle
                      <ProcessWindowStyle>] [-Wait] [-UseNewEnvironment] [<CommonParameters>], [-FilePath] <string> [[-ArgumentList] <string[]>] [-WorkingDirectory
                      <string>] [-PassThru] [-Verb <string>] [-WindowStyle <ProcessWindowStyle>] [-Wait] [<CommonParameters>]}
HelpUri             : https://go.microsoft.com/fwlink/?LinkID=135261
DLL                 : C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.PowerShell.Commands.Management\v4.0_3.0.0.0__31bf3856ad364e35\Microsoft.PowerShell.Commands.Ma
                      nagement.dll


Verb                : Stop
Noun                : Process
HelpFile            : Microsoft.PowerShell.Commands.Management.dll-Help.xml
PSSnapIn            :
Version             : 3.1.0.0
ImplementingType    : Microsoft.PowerShell.Commands.StopProcessCommand
Definition          :
                      Stop-Process [-Id] <int[]> [-PassThru] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

                      Stop-Process -Name <string[]> [-PassThru] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

                      Stop-Process [-InputObject] <Process[]> [-PassThru] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

DefaultParameterSet : Id
OutputType          : {System.Diagnostics.Process}
Options             : ReadOnly
Name                : Stop-Process
CommandType         : Cmdlet
Source              : Microsoft.PowerShell.Management
Visibility          : Public
ModuleName          : Microsoft.PowerShell.Management
Module              : Microsoft.PowerShell.Management
RemotingCapability  : PowerShell
Parameters          : {[Name, System.Management.Automation.ParameterMetadata], [Id, System.Management.Automation.ParameterMetadata], [InputObject,
                      System.Management.Automation.ParameterMetadata], [PassThru, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[-Id] <int[]> [-PassThru] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>], -Name <string[]> [-PassThru] [-Force] [-WhatIf] [-Confirm]
                      [<CommonParameters>], [-InputObject] <Process[]> [-PassThru] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]}
HelpUri             : https://go.microsoft.com/fwlink/?LinkID=113412
DLL                 : C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.PowerShell.Commands.Management\v4.0_3.0.0.0__31bf3856ad364e35\Microsoft.PowerShell.Commands.Ma
                      nagement.dll


Verb                : Wait
Noun                : Process
HelpFile            : Microsoft.PowerShell.Commands.Management.dll-Help.xml
PSSnapIn            :
Version             : 3.1.0.0
ImplementingType    : Microsoft.PowerShell.Commands.WaitProcessCommand
Definition          :
                      Wait-Process [-Name] <string[]> [[-Timeout] <int>] [<CommonParameters>]

                      Wait-Process [-Id] <int[]> [[-Timeout] <int>] [<CommonParameters>]

                      Wait-Process [[-Timeout] <int>] -InputObject <Process[]> [<CommonParameters>]

DefaultParameterSet : Name
OutputType          : {}
Options             : ReadOnly
Name                : Wait-Process
CommandType         : Cmdlet
Source              : Microsoft.PowerShell.Management
Visibility          : Public
ModuleName          : Microsoft.PowerShell.Management
Module              : Microsoft.PowerShell.Management
RemotingCapability  : PowerShell
Parameters          : {[Id, System.Management.Automation.ParameterMetadata], [Name, System.Management.Automation.ParameterMetadata], [Timeout,
                      System.Management.Automation.ParameterMetadata], [InputObject, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[-Name] <string[]> [[-Timeout] <int>] [<CommonParameters>], [-Id] <int[]> [[-Timeout] <int>] [<CommonParameters>], [[-Timeout] <int>]
                      -InputObject <Process[]> [<CommonParameters>]}
HelpUri             : https://go.microsoft.com/fwlink/?LinkID=135277
DLL                 : C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.PowerShell.Commands.Management\v4.0_3.0.0.0__31bf3856ad364e35\Microsoft.PowerShell.Commands.Ma
                      nagement.dll


Id      : 4028
Handles : 153
CPU     : 0.515625
SI      : 0
Name    : AdminService


Id      : 10772
Handles : 153
CPU     : 0.171875
SI      : 1
Name    : SecurityHealthSystray


Id      : 3940
Handles : 321
CPU     : 1.109375
SI      : 0
Name    : AnyDesk


Id      : 16456
Handles : 275
CPU     : 0.6875
SI      : 1
Name    : AnyDesk


Id      : 13628
Handles : 397
CPU     : 1.765625
SI      : 1
Name    : ApplicationFrameHost


Id      : 8516
Handles : 161
CPU     : 0.015625
SI      : 1
Name    : AppVShNotify


Id      : 11740
Handles : 157
CPU     : 0.03125
SI      : 0
Name    : AppVShNotify


Id      : 6708
Handles : 334
CPU     : 80.421875
SI      : 1
Name    : atieclxx


Id      : 1464
Handles : 182
CPU     : 0.015625
SI      : 0
Name    : atiesrxx


Id      : 10656
Handles : 203
CPU     : 0.25
SI      : 1
Name    : atiw


Id      : 9344
Handles : 613
CPU     : 6409.515625
SI      : 0
Name    : audiodg


Id      : 4596
Handles : 238
CPU     : 0.609375
SI      : 1
Name    : chrome


Id      : 4744
Handles : 317
CPU     : 4.859375
SI      : 1
Name    : chrome


Id      : 10292
Handles : 731
CPU     : 59.5625
SI      : 1
Name    : chrome


Id      : 11112
Handles : 289
CPU     : 0.75
SI      : 1
Name    : chrome


Id      : 14872
Handles : 175
CPU     : 0.109375
SI      : 1
Name    : chrome


Id      : 15412
Handles : 440
CPU     : 10.5
SI      : 1
Name    : chrome


Id      : 16884
Handles : 1679
CPU     : 90.234375
SI      : 1
Name    : chrome


Id      : 18308
Handles : 312
CPU     : 16.28125
SI      : 1
Name    : chrome


Id      : 20012
Handles : 297
CPU     : 0.828125
SI      : 1
Name    : chrome


Id      : 20976
Handles : 233
CPU     : 0.140625
SI      : 1
Name    : chrome


Id      : 944
Handles : 679
CPU     : 40.328125
SI      : 1
Name    : Code


Id      : 4412
Handles : 595
CPU     : 112.6875
SI      : 1
Name    : Code


Id      : 5112
Handles : 344
CPU     : 0.578125
SI      : 1
Name    : Code


Id      : 6720
Handles : 981
CPU     : 34.046875
SI      : 1
Name    : Code


Id      : 8572
Handles : 227
CPU     : 0.03125
SI      : 1
Name    : Code


Id      : 12644
Handles : 226
CPU     : 0.34375
SI      : 1
Name    : Code


Id      : 17284
Handles : 376
CPU     : 13.828125
SI      : 1
Name    : Code


Id      : 18156
Handles : 404
CPU     : 4.640625
SI      : 1
Name    : Code


Id      : 13156
Handles : 493
CPU     : 0.375
SI      : 1
Name    : CodeHelper


Id      : 21392
Handles : 258
CPU     : 0.078125
SI      : 1
Name    : conhost


Id      : 3948
Handles : 400
CPU     : 26.78125
SI      : 0
Name    : Connect.Service.ContentService


Id      : 636
Handles : 854
CPU     : 5.28125
SI      : 0
Name    : csrss


Id      : 760
Handles : 940
CPU     : 181.078125
SI      : 1
Name    : csrss


Id      : 11084
Handles : 525
CPU     : 31.3125
SI      : 1
Name    : ctfmon


Id      : 10644
Handles : 186
CPU     : 0.125
SI      : 0
Name    : dasHost


Id      : 6768
Handles : 156
CPU     : 0.03125
SI      : 0
Name    : DDVCollectorSvcApi


Id      : 6668
Handles : 377
CPU     : 5.328125
SI      : 0
Name    : DDVDataCollector


Id      : 16452
Handles : 287
CPU     : 0.90625
SI      : 0
Name    : DDVRulesProcessor


Id      : 1700
Handles : 894
CPU     : 13.296875
SI      : 0
Name    : Dell.D3.WinSvc


Id      : 2672
Handles : 911
CPU     : 33.265625
SI      : 0
Name    : DellSupportAssistRemedationService


Id      : 3400
Handles : 199
CPU     : 0.03125
SI      : 0
Name    : dllhost


Id      : 10048
Handles : 279
CPU     : 1.046875
SI      : 1
Name    : dllhost


Id      : 9128
Handles : 711
CPU     : 40.71875
SI      : 0
Name    : DSAPI


Id      : 1300
Handles : 1453
CPU     : 1816.609375
SI      : 1
Name    : dwm


Id      : 17524
Handles : 2297
CPU     : 46.171875
SI      : 1
Name    : EXCEL


Id      : 11760
Handles : 4946
CPU     : 262.265625
SI      : 1
Name    : explorer


Id      : 6860
Handles : 194
CPU     : 0.046875
SI      : 1
Name    : FileCoAuth


Id      : 15156
Handles : 1775
CPU     : 13813.03125
SI      : 1
Name    : g2mcomm


Id      : 15336
Handles : 812
CPU     : 6.125
SI      : 1
Name    : g2mlauncher


Id      : 15104
Handles : 407
CPU     : 0.4375
SI      : 1
Name    : g2mstart


Id      : 6024
Handles : 1755
CPU     : 83.875
SI      : 1
Name    : g2mui


Id      : 18260
Handles : 704
CPU     : 3.1875
SI      : 1
Name    : g2mvideoconference


Id      : 908
Handles : 181
CPU     : 0.09375
SI      : 0
Name    : GoogleCrashHandler


Id      : 1232
Handles : 160
CPU     : 0.03125
SI      : 0
Name    : GoogleCrashHandler64


Id      : 7420
Handles : 429
CPU     : 3.78125
SI      : 0
Name    : IAStorDataMgrSvc


Id      : 14652
Handles : 295
CPU     : 0.46875
SI      : 1
Name    : IAStorIcon


Id      : 1956
Handles : 170
CPU     : 0.0625
SI      : 0
Name    : igfxCUIService


Id      : 12048
Handles : 883
CPU     : 2.671875
SI      : 1
Name    : igfxEM


Id      : 7992
Handles : 376
CPU     : 0.421875
SI      : 0
Name    : IntelAudioService


Id      : 4012
Handles : 166
CPU     : 0
SI      : 0
Name    : IntelCpHDCPSvc


Id      : 960
Handles : 284
CPU     : 0.34375
SI      : 0
Name    : LMS


Id      : 844
Handles : 2006
CPU     : 35.8125
SI      : 0
Name    : lsass


Id      : 17664
Handles : 866
CPU     : 3.109375
SI      : 1
Name    : Microsoft.Photos


Id      : 7836
Handles : 211
CPU     : 0
SI      : 0
Name    : msdtc


Id      : 496
Handles : 444
CPU     : 108.890625
SI      : 1
Name    : msedge


Id      : 1100
Handles : 378
CPU     : 68.296875
SI      : 1
Name    : msedge


Id      : 3384
Handles : 253
CPU     : 0.59375
SI      : 1
Name    : msedge


Id      : 6632
Handles : 383
CPU     : 17.5625
SI      : 1
Name    : msedge


Id      : 6644
Handles : 330
CPU     : 0.171875
SI      : 1
Name    : msedge


Id      : 7436
Handles : 352
CPU     : 9.390625
SI      : 1
Name    : msedge


Id      : 8628
Handles : 469
CPU     : 185.90625
SI      : 1
Name    : msedge


Id      : 9028
Handles : 250
CPU     : 0.125
SI      : 1
Name    : msedge


Id      : 9300
Handles : 267
CPU     : 0.609375
SI      : 1
Name    : msedge


Id      : 9988
Handles : 264
CPU     : 0.484375
SI      : 1
Name    : msedge


Id      : 10132
Handles : 257
CPU     : 0.25
SI      : 1
Name    : msedge


Id      : 10716
Handles : 459
CPU     : 52.453125
SI      : 1
Name    : msedge


Id      : 10820
Handles : 250
CPU     : 0.265625
SI      : 1
Name    : msedge


Id      : 11336
Handles : 253
CPU     : 0.5
SI      : 1
Name    : msedge


Id      : 11632
Handles : 253
CPU     : 0.359375
SI      : 1
Name    : msedge


Id      : 12696
Handles : 3022
CPU     : 220.5625
SI      : 1
Name    : msedge


Id      : 12804
Handles : 305
CPU     : 0.265625
SI      : 1
Name    : msedge


Id      : 13136
Handles : 374
CPU     : 13.359375
SI      : 1
Name    : msedge


Id      : 14128
Handles : 1779
CPU     : 266.203125
SI      : 1
Name    : msedge


Id      : 15392
Handles : 539
CPU     : 47.625
SI      : 1
Name    : msedge


Id      : 15736
Handles : 255
CPU     : 0.375
SI      : 1
Name    : msedge


Id      : 16696
Handles : 283
CPU     : 1.578125
SI      : 1
Name    : msedge


Id      : 17184
Handles : 253
CPU     : 0.28125
SI      : 1
Name    : msedge


Id      : 17252
Handles : 233
CPU     : 0.0625
SI      : 1
Name    : msedge


Id      : 17804
Handles : 368
CPU     : 16.921875
SI      : 1
Name    : msedge


Id      : 17960
Handles : 333
CPU     : 5.484375
SI      : 1
Name    : msedge


Id      : 18356
Handles : 343
CPU     : 6.625
SI      : 1
Name    : msedge


Id      : 18536
Handles : 284
CPU     : 0.5625
SI      : 1
Name    : msedge


Id      : 18964
Handles : 292
CPU     : 8.984375
SI      : 1
Name    : msedge


Id      : 19596
Handles : 253
CPU     : 0.484375
SI      : 1
Name    : msedge


Id      : 19964
Handles : 254
CPU     : 0.484375
SI      : 1
Name    : msedge


Id      : 20380
Handles : 250
CPU     : 0.3125
SI      : 1
Name    : msedge


Id      : 20692
Handles : 355
CPU     : 13.734375
SI      : 1
Name    : msedge


Id      : 1892
Handles : 891
CPU     : 1016.578125
SI      : 0
Name    : MsMpEng


Id      : 7044
Handles : 196
CPU     : 4.140625
SI      : 0
Name    : NisSrv


Id      : 2976
Handles : 727
CPU     : 5.03125
SI      : 1
Name    : notepad


Id      : 13996
Handles : 774
CPU     : 30.609375
SI      : 0
Name    : OfficeClickToRun


Id      : 16448
Handles : 833
CPU     : 9.125
SI      : 1
Name    : OneDrive


Id      : 9036
Handles : 3263
CPU     : 87.21875
SI      : 1
Name    : POWERPNT


Id      : 8800
Handles : 466
CPU     : 7.34375
SI      : 1
Name    : powershell


Id      : 16496
Handles : 1210
CPU     : 19.984375
SI      : 1
Name    : powershell


Id      : 10832
Handles : 3646
CPU     : 552.265625
SI      : 1
Name    : powershell_ise


Id      : 9516
Handles : 233
CPU     : 0.125
SI      : 0
Name    : PresentationFontCache


Id      : 3404
Handles : 166
CPU     : 0.03125
SI      : 0
Name    : RstMwService


Id      : 3912
Handles : 311
CPU     : 24.359375
SI      : 0
Name    : RtkAudUService64


Id      : 7252
Handles : 231
CPU     : 0.015625
SI      : 1
Name    : RtkAudUService64


Id      : 14568
Handles : 311
CPU     : 0.3125
SI      : 1
Name    : RtkAudUService64


Id      : 4216
Handles : 232
CPU     : 0.078125
SI      : 1
Name    : RuntimeBroker


Id      : 4360
Handles : 375
CPU     : 9.84375
SI      : 1
Name    : RuntimeBroker


Id      : 11332
Handles : 220
CPU     : 0.171875
SI      : 1
Name    : RuntimeBroker


Id      : 12712
Handles : 990
CPU     : 22
SI      : 1
Name    : RuntimeBroker


Id      : 13888
Handles : 350
CPU     : 13.953125
SI      : 1
Name    : RuntimeBroker


Id      : 15468
Handles : 214
CPU     : 0.171875
SI      : 1
Name    : RuntimeBroker


Id      : 16236
Handles : 436
CPU     : 3.125
SI      : 1
Name    : RuntimeBroker


Id      : 20376
Handles : 229
CPU     : 3294.953125
SI      : 1
Name    : scrutil


Id      : 3852
Handles : 883
CPU     : 67.46875
SI      : 0
Name    : SearchIndexer


Id      : 12308
Handles : 1542
CPU     : 88.265625
SI      : 1
Name    : SearchUI


Id      : 4680
Handles : 388
CPU     : 0.546875
SI      : 0
Name    : SecurityHealthService


Id      : 824
Handles : 865
CPU     : 870.4375
SI      : 0
Name    : services


Id      : 412
Handles : 1118
CPU     : 12.65625
SI      : 0
Name    : ServiceShell


Id      : 13568
Handles : 611
CPU     : 8.75
SI      : 1
Name    : SettingSyncHost


Id      : 13776
Handles : 737
CPU     : 2.21875
SI      : 1
Name    : ShellExperienceHost


Id      : 10896
Handles : 568
CPU     : 16.140625
SI      : 1
Name    : sihost


Id      : 6832
Handles : 449
CPU     : 6.328125
SI      : 1
Name    : Skype


Id      : 15400
Handles : 806
CPU     : 31.46875
SI      : 1
Name    : Skype


Id      : 16144
Handles : 250
CPU     : 0.125
SI      : 1
Name    : Skype


Id      : 16268
Handles : 536
CPU     : 0.84375
SI      : 1
Name    : Skype


Id      : 16288
Handles : 374
CPU     : 0.609375
SI      : 1
Name    : Skype


Id      : 3700
Handles : 180
CPU     : 0.15625
SI      : 1
Name    : splwow64


Id      : 3288
Handles : 482
CPU     : 0.984375
SI      : 0
Name    : spoolsv


Id      : 5140
Handles : 536
CPU     : 1.9375
SI      : 0
Name    : sqlceip


Id      : 5148
Handles : 908
CPU     : 3945.734375
SI      : 0
Name    : sqlservr


Id      : 9528
Handles : 757
CPU     : 11.90625
SI      : 1
Name    : StartMenuExperienceHost


Id      : 9728
Handles : 1012
CPU     : 32.84375
SI      : 0
Name    : SupportAssistAgent


Id      : 100
Handles : 283
CPU     : 3.234375
SI      : 0
Name    : svchost


Id      : 540
Handles : 1669
CPU     : 60.65625
SI      : 0
Name    : svchost


Id      : 640
Handles : 322
CPU     : 2.921875
SI      : 0
Name    : svchost


Id      : 992
Handles : 1268
CPU     : 42.109375
SI      : 0
Name    : svchost


Id      : 1336
Handles : 185
CPU     : 0.53125
SI      : 0
Name    : svchost


Id      : 1356
Handles : 178
CPU     : 0.078125
SI      : 0
Name    : svchost


Id      : 1368
Handles : 269
CPU     : 0.265625
SI      : 0
Name    : svchost


Id      : 1404
Handles : 192
CPU     : 0.09375
SI      : 0
Name    : svchost


Id      : 1408
Handles : 155
CPU     : 0.015625
SI      : 0
Name    : svchost


Id      : 1496
Handles : 255
CPU     : 0.484375
SI      : 0
Name    : svchost


Id      : 1504
Handles : 158
CPU     : 0.515625
SI      : 0
Name    : svchost


Id      : 1600
Handles : 323
CPU     : 0.09375
SI      : 0
Name    : svchost


Id      : 1624
Handles : 191
CPU     : 0.359375
SI      : 0
Name    : svchost


Id      : 1848
Handles : 180
CPU     : 0.09375
SI      : 0
Name    : svchost


Id      : 1904
Handles : 668
CPU     : 177.78125
SI      : 0
Name    : svchost


Id      : 2016
Handles : 161
CPU     : 0.921875
SI      : 0
Name    : svchost


Id      : 2040
Handles : 227
CPU     : 5.890625
SI      : 0
Name    : svchost


Id      : 2132
Handles : 393
CPU     : 1.1875
SI      : 0
Name    : svchost


Id      : 2188
Handles : 405
CPU     : 3.328125
SI      : 0
Name    : svchost


Id      : 2308
Handles : 228
CPU     : 2.03125
SI      : 0
Name    : svchost


Id      : 2316
Handles : 267
CPU     : 0.609375
SI      : 0
Name    : svchost


Id      : 2328
Handles : 234
CPU     : 104.453125
SI      : 0
Name    : svchost


Id      : 2336
Handles : 155
CPU     : 0.03125
SI      : 0
Name    : svchost


Id      : 2380
Handles : 227
CPU     : 0.265625
SI      : 0
Name    : svchost


Id      : 2420
Handles : 296
CPU     : 21.0625
SI      : 0
Name    : svchost


Id      : 2488
Handles : 195
CPU     : 1.25
SI      : 0
Name    : svchost


Id      : 2496
Handles : 182
CPU     : 1.265625
SI      : 0
Name    : svchost


Id      : 2536
Handles : 201
CPU     : 47.78125
SI      : 0
Name    : svchost


Id      : 2560
Handles : 185
CPU     : 3.359375
SI      : 0
Name    : svchost


Id      : 2652
Handles : 816
CPU     : 5.03125
SI      : 0
Name    : svchost


Id      : 2736
Handles : 171
CPU     : 0.03125
SI      : 0
Name    : svchost


Id      : 2772
Handles : 398
CPU     : 5.40625
SI      : 0
Name    : svchost


Id      : 2812
Handles : 444
CPU     : 84.1875
SI      : 0
Name    : svchost


Id      : 2868
Handles : 171
CPU     : 0.0625
SI      : 0
Name    : svchost


Id      : 2940
Handles : 381
CPU     : 4.546875
SI      : 0
Name    : svchost


Id      : 3104
Handles : 508
CPU     : 14.765625
SI      : 0
Name    : svchost


Id      : 3180
Handles : 250
CPU     : 0.515625
SI      : 0
Name    : svchost


Id      : 3324
Handles : 420
CPU     : 3.203125
SI      : 0
Name    : svchost


Id      : 3352
Handles : 183
CPU     : 0.734375
SI      : 0
Name    : svchost


Id      : 3760
Handles : 473
CPU     : 60.640625
SI      : 0
Name    : svchost


Id      : 3768
Handles : 534
CPU     : 11.484375
SI      : 0
Name    : svchost


Id      : 3784
Handles : 182
CPU     : 0.6875
SI      : 0
Name    : svchost


Id      : 3792
Handles : 395
CPU     : 29.71875
SI      : 0
Name    : svchost


Id      : 3812
Handles : 351
CPU     : 7.78125
SI      : 0
Name    : svchost


Id      : 3824
Handles : 394
CPU     : 0.5
SI      : 0
Name    : svchost


Id      : 4036
Handles : 212
CPU     : 0.46875
SI      : 0
Name    : svchost


Id      : 4268
Handles : 206
CPU     : 0.859375
SI      : 0
Name    : svchost


Id      : 4400
Handles : 483
CPU     : 0.3125
SI      : 0
Name    : svchost


Id      : 4852
Handles : 423
CPU     : 0.359375
SI      : 0
Name    : svchost


Id      : 6268
Handles : 579
CPU     : 4.78125
SI      : 0
Name    : svchost


Id      : 6312
Handles : 219
CPU     : 1.515625
SI      : 0
Name    : svchost


Id      : 6464
Handles : 455
CPU     : 0.765625
SI      : 0
Name    : svchost


Id      : 6648
Handles : 309
CPU     : 0.3125
SI      : 0
Name    : svchost


Id      : 6696
Handles : 274
CPU     : 2.109375
SI      : 0
Name    : svchost


Id      : 6712
Handles : 253
CPU     : 3.78125
SI      : 0
Name    : svchost


Id      : 6824
Handles : 207
CPU     : 0.078125
SI      : 0
Name    : svchost


Id      : 7396
Handles : 829
CPU     : 102.4375
SI      : 0
Name    : svchost


Id      : 7452
Handles : 215
CPU     : 0.296875
SI      : 0
Name    : svchost


Id      : 7656
Handles : 258
CPU     : 0.140625
SI      : 0
Name    : svchost


Id      : 8012
Handles : 466
CPU     : 34.5
SI      : 0
Name    : svchost


Id      : 8028
Handles : 296
CPU     : 1.609375
SI      : 0
Name    : svchost


Id      : 8072
Handles : 239
CPU     : 13.21875
SI      : 0
Name    : svchost


Id      : 8396
Handles : 696
CPU     : 8.046875
SI      : 1
Name    : svchost


Id      : 8440
Handles : 312
CPU     : 2.171875
SI      : 0
Name    : svchost


Id      : 9400
Handles : 245
CPU     : 2.78125
SI      : 0
Name    : svchost


Id      : 10576
Handles : 271
CPU     : 0.140625
SI      : 0
Name    : svchost


Id      : 10844
Handles : 166
CPU     : 0.1875
SI      : 1
Name    : svchost


Id      : 10856
Handles : 491
CPU     : 12.765625
SI      : 1
Name    : svchost


Id      : 11108
Handles : 299
CPU     : 23.25
SI      : 0
Name    : svchost


Id      : 11856
Handles : 325
CPU     : 3.171875
SI      : 1
Name    : svchost


Id      : 13036
Handles : 278
CPU     : 1.203125
SI      : 0
Name    : svchost


Id      : 13228
Handles : 203
CPU     : 0.046875
SI      : 0
Name    : svchost


Id      : 13808
Handles : 168
CPU     : 0.03125
SI      : 1
Name    : svchost


Id      : 16008
Handles : 523
CPU     : 1.09375
SI      : 1
Name    : svchost


Id      : 4
Handles : 4994
CPU     : 7332.234375
SI      : 0
Name    : System


Id      : 5492
Handles : 419
CPU     : 0.734375
SI      : 1
Name    : taskhostw


Id      : 9444
Handles : 323
CPU     : 3.5625
SI      : 1
Name    : taskhostw


Id      : 1780
Handles : 411
CPU     : 51.578125
SI      : 1
Name    : Teams


Id      : 2808
Handles : 299
CPU     : 4.671875
SI      : 1
Name    : Teams


Id      : 10328
Handles : 1197
CPU     : 30.546875
SI      : 1
Name    : Teams


Id      : 14400
Handles : 1590
CPU     : 146.484375
SI      : 1
Name    : Teams


Id      : 15528
Handles : 579
CPU     : 2.4375
SI      : 1
Name    : Teams


Id      : 15888
Handles : 317
CPU     : 0.390625
SI      : 1
Name    : Teams


Id      : 20792
Handles : 302
CPU     : 0.046875
SI      : 1
Name    : Teams


Id      : 18324
Handles : 177
CPU     : 24.03125
SI      : 0
Name    : TiWorker


Id      : 3932
Handles : 469
CPU     : 0.828125
SI      : 0
Name    : UltraViewer_Service


Id      : 14688
Handles : 649
CPU     : 4.40625
SI      : 1
Name    : WavesSvc64


Id      : 4104
Handles : 432
CPU     : 4.3125
SI      : 0
Name    : WavesSysSvc64


Id      : 5800
Handles : 507
CPU     : 5.390625
SI      : 1
Name    : WindowsInternal.ComposableShell.Experiences.TextInput.InputApp


Id      : 752
Handles : 156
CPU     : 0.015625
SI      : 0
Name    : wininit


Id      : 1160
Handles : 266
CPU     : 0.34375
SI      : 1
Name    : winlogon


Id      : 12624
Handles : 1090
CPU     : 1.203125
SI      : 1
Name    : WinStore.App


Id      : 6100
Handles : 456
CPU     : 97.484375
SI      : 0
Name    : WmiPrvSE


Id      : 6680
Handles : 508
CPU     : 227.234375
SI      : 0
Name    : WmiPrvSE


Id      : 1016
Handles : 328
CPU     : 0.875
SI      : 0
Name    : WUDFHost


Id      : 1536
Handles : 211
CPU     : 0
SI      : 0
Name    : WUDFHost


Id      : 7960
Handles : 224
CPU     : 0.125
SI      : 0
Name    : WUDFHost


Id      : 14040
Handles : 707
CPU     : 0.375
SI      : 1
Name    : YourPhone


Name   : SgrmBroker
Status : Running


Name   : IntelAudioService
Status : Running


Name   : StorSvc
Status : Running


Name   : InstallService
Status : Running


Name   : StateRepository
Status : Running


Name   : igfxCUIService2.0.0.0
Status : Running


Name   : Power
Status : Running


Name   : IAStorDataMgrSvc
Status : Running


Name   : SstpSvc
Status : Running


Name   : PrintWorkflowUserSvc_b7a682
Status : Running


Name   : hidserv
Status : Running


Name   : ProfSvc
Status : Running


Name   : QcomWlanSrv
Status : Running


Name   : SSDPSRV
Status : Running


Name   : SQLWriter
Status : Running


Name   : RasMan
Status : Running


Name   : SQLTELEMETRY$SQLEXPRESS
Status : Running


Name   : FontCache3.0.0.0
Status : Running


Name   : DsSvc
Status : Running


Name   : TabletInputService
Status : Running


Name   : WdNisSvc
Status : Running


Name   : WdiSystemHost
Status : Running


Name   : WdiServiceHost
Status : Running


Name   : Wcmsvc
Status : Running


Name   : iphlpsvc
Status : Running


Name   : WbioSrvc
Status : Running


Name   : EventLog
Status : Running


Name   : EventSystem
Status : Running


Name   : fdPHost
Status : Running


Name   : FDResPub
Status : Running


Name   : WavesSysSvc
Status : Running


Name   : FontCache
Status : Running


Name   : esifsvc
Status : Running


Name   : VaultSvc
Status : Running


Name   : jhi_service
Status : Running


Name   : KeyIso
Status : Running


Name   : MSSQL$SQLEXPRESS
Status : Running


Name   : TrustedInstaller
Status : Running


Name   : NcbService
Status : Running


Name   : TrkWks
Status : Running


Name   : TokenBroker
Status : Running


Name   : netprofm
Status : Running


Name   : PhoneSvc
Status : Running


Name   : TimeBrokerSvc
Status : Running


Name   : Themes
Status : Running


Name   : PcaSvc
Status : Running


Name   : NlaSvc
Status : Running


Name   : nsi
Status : Running


Name   : OneSyncSvc_b7a682
Status : Running


Name   : TapiSrv
Status : Running


Name   : SysMain
Status : Running


Name   : WebClient
Status : Running


Name   : UltraViewService
Status : Running


Name   : mpssvc
Status : Running


Name   : PlugPlay
Status : Running


Name   : LanmanServer
Status : Running


Name   : LanmanWorkstation
Status : Running


Name   : lfsvc
Status : Running


Name   : LicenseManager
Status : Running


Name   : UsoSvc
Status : Running


Name   : MSDTC
Status : Running


Name   : lmhosts
Status : Running


Name   : LSM
Status : Running


Name   : UserManager
Status : Running


Name   : UserDataSvc_b7a682
Status : Running


Name   : SupportAssistAgent
Status : Running


Name   : UnistoreSvc_b7a682
Status : Running


Name   : PimIndexMaintenanceSvc_b7a682
Status : Running


Name   : LMS
Status : Running


Name   : DPS
Status : Running


Name   : DusmSvc
Status : Running


Name   : DoSvc
Status : Running


Name   : BluetoothUserService_b7a682
Status : Running


Name   : BrokerInfrastructure
Status : Running


Name   : BTAGService
Status : Running


Name   : BthAvctpSvc
Status : Running


Name   : bthserv
Status : Running


Name   : camsvc
Status : Running


Name   : BITS
Status : Running


Name   : SecurityHealthService
Status : Running


Name   : CDPSvc
Status : Running


Name   : CDPUserSvc_b7a682
Status : Running


Name   : CertPropSvc
Status : Running


Name   : ClickToRunSvc
Status : Running


Name   : seclogon
Status : Running


Name   : RpcEptMapper
Status : Running


Name   : cbdhsvc_b7a682
Status : Running


Name   : CoreMessagingRegistrar
Status : Running


Name   : BFE
Status : Running


Name   : SENS
Status : Running


Name   : XblAuthManager
Status : Running


Name   : AMD External Events Utility
Status : Running


Name   : AnyDesk
Status : Running


Name   : ShellHWDetection
Status : Running


Name   : Appinfo
Status : Running


Name   : wuauserv
Status : Running


Name   : BDESVC
Status : Running


Name   : WSearch
Status : Running


Name   : WpnUserService_b7a682
Status : Running


Name   : WpnService
Status : Running


Name   : AtherosSvc
Status : Running


Name   : AudioEndpointBuilder
Status : Running


Name   : Audiosrv
Status : Running


Name   : Autodesk Content Service
Status : Running


Name   : wscsvc
Status : Running


Name   : cphs
Status : Running


Name   : SystemEventsBroker
Status : Running


Name   : cplspcon
Status : Running


Name   : RstMwService
Status : Running


Name   : SamSs
Status : Running


Name   : DevicesFlowUserSvc_b7a682
Status : Running


Name   : DiagTrack
Status : Running


Name   : DevicePickerUserSvc_b7a682
Status : Running


Name   : DispBrokerDesktopSvc
Status : Running


Name   : WinDefend
Status : Running


Name   : DisplayEnhancementService
Status : Running


Name   : DeviceAssociationService
Status : Running


Name   : RpcSs
Status : Running


Name   : WinHttpAutoProxySvc
Status : Running


Name   : DellClientManagementService
Status : Running


Name   : Dhcp
Status : Running


Name   : Winmgmt
Status : Running


Name   : Dell Hardware Support
Status : Running


Name   : Dell Digital Delivery Services
Status : Running


Name   : SCardSvr
Status : Running


Name   : Spooler
Status : Running


Name   : DDVRulesProcessor
Status : Running


Name   : DDVDataCollector
Status : Running


Name   : DDVCollectorSvcApi
Status : Running


Name   : Dnscache
Status : Running


Name   : DcomLaunch
Status : Running


Name   : WlanSvc
Status : Running


Name   : CryptSvc
Status : Running


Name   : Schedule
Status : Running


Name   : Dell SupportAssist Remediation
Status : Running


Name   : RtkAudioUniversalService
Status : Running


Name   : sppsvc
Status : Stopped


Name   : SharedRealitySvc
Status : Stopped


Name   : smphost
Status : Stopped


Name   : svsvc
Status : Stopped


Name   : SQLAgent$SQLEXPRESS
Status : Stopped


Name   : shpamsvc
Status : Stopped


Name   : stisvc
Status : Stopped


Name   : SQLBrowser
Status : Stopped


Name   : ssh-agent
Status : Stopped


Name   : spectrum
Status : Stopped


Name   : SmsRouter
Status : Stopped


Name   : swprv
Status : Stopped


Name   : SNMPTRAP
Status : Stopped


Name   : vmicvmsession
Status : Stopped


Name   : TieringEngineService
Status : Stopped


Name   : Wecsvc
Status : Stopped


Name   : WEPHOSTSVC
Status : Stopped


Name   : wercplsupport
Status : Stopped


Name   : WerSvc
Status : Stopped


Name   : WFDSConMgrSvc
Status : Stopped


Name   : WiaRpc
Status : Stopped


Name   : WinRM
Status : Stopped


Name   : wisvc
Status : Stopped


Name   : wcncsvc
Status : Stopped


Name   : wlidsvc
Status : Stopped


Name   : WManSvc
Status : Stopped


Name   : wmiApSrv
Status : Stopped


Name   : WMPNetworkSvc
Status : Stopped


Name   : workfolderssvc
Status : Stopped


Name   : WpcMonSvc
Status : Stopped


Name   : WPDBusEnum
Status : Stopped


Name   : WwanSvc
Status : Stopped


Name   : XblGameSave
Status : Stopped


Name   : wlpasvc
Status : Stopped


Name   : TermService
Status : Stopped


Name   : wbengine
Status : Stopped


Name   : WalletService
Status : Stopped


Name   : TroubleshootingSvc
Status : Stopped


Name   : tzautoupdate
Status : Stopped


Name   : UevAgentService
Status : Stopped


Name   : UmRdpService
Status : Stopped


Name   : upnphost
Status : Stopped


Name   : VacSvc
Status : Stopped


Name   : vds
Status : Stopped


Name   : vmicguestinterface
Status : Stopped


Name   : WarpJITSvc
Status : Stopped


Name   : vmicheartbeat
Status : Stopped


Name   : vmicrdv
Status : Stopped


Name   : vmicshutdown
Status : Stopped


Name   : vmictimesync
Status : Stopped


Name   : SharedAccess
Status : Stopped


Name   : vmicvss
Status : Stopped


Name   : VSS
Status : Stopped


Name   : W32Time
Status : Stopped


Name   : WaaSMedicSvc
Status : Stopped


Name   : vmickvpexchange
Status : Stopped


Name   : AarSvc_b7a682
Status : Stopped


Name   : ose64
Status : Stopped


Name   : SensrSvc
Status : Stopped


Name   : DmEnrollmentSvc
Status : Stopped


Name   : dmwappushservice
Status : Stopped


Name   : dot3svc
Status : Stopped


Name   : DsmSvc
Status : Stopped


Name   : Eaphost
Status : Stopped


Name   : edgeupdate
Status : Stopped


Name   : edgeupdatem
Status : Stopped


Name   : EFS
Status : Stopped


Name   : embeddedmode
Status : Stopped


Name   : EntAppSvc
Status : Stopped


Name   : Fax
Status : Stopped


Name   : fhsvc
Status : Stopped


Name   : FLEXnet Licensing Service 64
Status : Stopped


Name   : FrameServer
Status : Stopped


Name   : GoogleChromeElevationService
Status : Stopped


Name   : gpsvc
Status : Stopped


Name   : GraphicsPerfSvc
Status : Stopped


Name   : gupdate
Status : Stopped


Name   : gupdatem
Status : Stopped


Name   : HfcDisableService
Status : Stopped


Name   : HvHost
Status : Stopped


Name   : diagsvc
Status : Stopped


Name   : iaStorAfsService
Status : Stopped


Name   : diagnosticshub.standardcollector.service
Status : Stopped


Name   : DeviceInstall
Status : Stopped


Name   : AJRouter
Status : Stopped


Name   : ALG
Status : Stopped


Name   : AppIDSvc
Status : Stopped


Name   : AppMgmt
Status : Stopped


Name   : AppReadiness
Status : Stopped


Name   : AppVClient
Status : Stopped


Name   : AppXSvc
Status : Stopped


Name   : AssignedAccessManagerSvc
Status : Stopped


Name   : autotimesvc
Status : Stopped


Name   : AxInstSV
Status : Stopped


Name   : BcastDVRUserService_b7a682
Status : Stopped


Name   : CaptureService_b7a682
Status : Stopped


Name   : ClipSVC
Status : Stopped


Name   : COMSysApp
Status : Stopped


Name   : ConsentUxUserSvc_b7a682
Status : Stopped


Name   : CredentialEnrollmentManagerUserSvc_b7a682
Status : Stopped


Name   : CscService
Status : Stopped


Name   : dcpm-notify
Status : Stopped


Name   : defragsvc
Status : Stopped


Name   : Dell.CommandPowerManager.Service
Status : Stopped


Name   : DeviceAssociationBrokerSvc_b7a682
Status : Stopped


Name   : DevQueryBroker
Status : Stopped


Name   : SessionEnv
Status : Stopped


Name   : icssvc
Status : Stopped


Name   : Intel(R) Capability Licensing Service TCP IP Interface
Status : Stopped


Name   : PerfHost
Status : Stopped


Name   : pla
Status : Stopped


Name   : PNRPAutoReg
Status : Stopped


Name   : PNRPsvc
Status : Stopped


Name   : PolicyAgent
Status : Stopped


Name   : PrintNotify
Status : Stopped


Name   : PushToInstall
Status : Stopped


Name   : QWAVE
Status : Stopped


Name   : RasAuto
Status : Stopped


Name   : RemoteAccess
Status : Stopped


Name   : RemoteRegistry
Status : Stopped


Name   : RetailDemo
Status : Stopped


Name   : RmSvc
Status : Stopped


Name   : RpcLocator
Status : Stopped


Name   : ScDeviceEnum
Status : Stopped


Name   : SCPolicySvc
Status : Stopped


Name   : SDRSVC
Status : Stopped


Name   : SEMgrSvc
Status : Stopped


Name   : Sense
Status : Stopped


Name   : SensorDataService
Status : Stopped


Name   : SensorService
Status : Stopped


Name   : perceptionsimulation
Status : Stopped


Name   : IKEEXT
Status : Stopped


Name   : PeerDistSvc
Status : Stopped


Name   : p2pimsvc
Status : Stopped


Name   : Intel(R) TPM Provisioning Service
Status : Stopped


Name   : IpxlatCfgSvc
Status : Stopped


Name   : KtmRm
Status : Stopped


Name   : lltdsvc
Status : Stopped


Name   : LxpSvc
Status : Stopped


Name   : MapsBroker
Status : Stopped


Name   : MessagingService_b7a682
Status : Stopped


Name   : MicrosoftEdgeElevationService
Status : Stopped


Name   : MixedRealityOpenXRSvc
Status : Stopped


Name   : MSiSCSI
Status : Stopped


Name   : msiserver
Status : Stopped


Name   : NaturalAuthentication
Status : Stopped


Name   : NcaSvc
Status : Stopped


Name   : NcdAutoSetup
Status : Stopped


Name   : Netlogon
Status : Stopped


Name   : Netman
Status : Stopped


Name   : NetSetupSvc
Status : Stopped


Name   : NetTcpPortSharing
Status : Stopped


Name   : NgcCtnrSvc
Status : Stopped


Name   : NgcSvc
Status : Stopped


Name   : XboxGipSvc
Status : Stopped


Name   : p2psvc
Status : Stopped


Name   : XboxNetApiSvc
Status : Stopped

gicuta
gita
PS>ParameterBinding(Out-File): name="InputObject"; value="AarSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="AJRouter"
>> ParameterBinding(Out-File): name="InputObject"; value="ALG"
>> ParameterBinding(Out-File): name="InputObject"; value="AMD External Events Utility"
>> ParameterBinding(Out-File): name="InputObject"; value="AnyDesk"
>> ParameterBinding(Out-File): name="InputObject"; value="AppIDSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="Appinfo"
>> ParameterBinding(Out-File): name="InputObject"; value="AppMgmt"
>> ParameterBinding(Out-File): name="InputObject"; value="AppReadiness"
>> ParameterBinding(Out-File): name="InputObject"; value="AppVClient"
>> ParameterBinding(Out-File): name="InputObject"; value="AppXSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="AssignedAccessManagerSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="AtherosSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="AudioEndpointBuilder"
>> ParameterBinding(Out-File): name="InputObject"; value="Audiosrv"
>> ParameterBinding(Out-File): name="InputObject"; value="Autodesk Content Service"
>> ParameterBinding(Out-File): name="InputObject"; value="autotimesvc"
>> ParameterBinding(Out-File): name="InputObject"; value="AxInstSV"
>> ParameterBinding(Out-File): name="InputObject"; value="BcastDVRUserService_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="BDESVC"
>> ParameterBinding(Out-File): name="InputObject"; value="BFE"
>> ParameterBinding(Out-File): name="InputObject"; value="BITS"
>> ParameterBinding(Out-File): name="InputObject"; value="BluetoothUserService_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="BrokerInfrastructure"
>> ParameterBinding(Out-File): name="InputObject"; value="BTAGService"
>> ParameterBinding(Out-File): name="InputObject"; value="BthAvctpSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="bthserv"
>> ParameterBinding(Out-File): name="InputObject"; value="camsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="CaptureService_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="cbdhsvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="CDPSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="CDPUserSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="CertPropSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="ClickToRunSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="ClipSVC"
>> ParameterBinding(Out-File): name="InputObject"; value="COMSysApp"
>> ParameterBinding(Out-File): name="InputObject"; value="ConsentUxUserSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="CoreMessagingRegistrar"
>> ParameterBinding(Out-File): name="InputObject"; value="cphs"
>> ParameterBinding(Out-File): name="InputObject"; value="cplspcon"
>> ParameterBinding(Out-File): name="InputObject"; value="CredentialEnrollmentManagerUserSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="CryptSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="CscService"
>> ParameterBinding(Out-File): name="InputObject"; value="DcomLaunch"
>> ParameterBinding(Out-File): name="InputObject"; value="dcpm-notify"
>> ParameterBinding(Out-File): name="InputObject"; value="DDVCollectorSvcApi"
>> ParameterBinding(Out-File): name="InputObject"; value="DDVDataCollector"
>> ParameterBinding(Out-File): name="InputObject"; value="DDVRulesProcessor"
>> ParameterBinding(Out-File): name="InputObject"; value="defragsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="Dell Digital Delivery Services"
>> ParameterBinding(Out-File): name="InputObject"; value="Dell Hardware Support"
>> ParameterBinding(Out-File): name="InputObject"; value="Dell SupportAssist Remediation"
>> ParameterBinding(Out-File): name="InputObject"; value="Dell.CommandPowerManager.Service"
>> ParameterBinding(Out-File): name="InputObject"; value="DellClientManagementService"
>> ParameterBinding(Out-File): name="InputObject"; value="DeviceAssociationBrokerSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="DeviceAssociationService"
>> ParameterBinding(Out-File): name="InputObject"; value="DeviceInstall"
>> ParameterBinding(Out-File): name="InputObject"; value="DevicePickerUserSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="DevicesFlowUserSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="DevQueryBroker"
>> ParameterBinding(Out-File): name="InputObject"; value="Dhcp"
>> ParameterBinding(Out-File): name="InputObject"; value="diagnosticshub.standardcollector.service"
>> ParameterBinding(Out-File): name="InputObject"; value="diagsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="DiagTrack"
>> ParameterBinding(Out-File): name="InputObject"; value="DispBrokerDesktopSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="DisplayEnhancementService"
>> ParameterBinding(Out-File): name="InputObject"; value="DmEnrollmentSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="dmwappushservice"
>> ParameterBinding(Out-File): name="InputObject"; value="Dnscache"
>> ParameterBinding(Out-File): name="InputObject"; value="DoSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="dot3svc"
>> ParameterBinding(Out-File): name="InputObject"; value="DPS"
>> ParameterBinding(Out-File): name="InputObject"; value="DsmSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="DsSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="DusmSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="Eaphost"
>> ParameterBinding(Out-File): name="InputObject"; value="edgeupdate"
>> ParameterBinding(Out-File): name="InputObject"; value="edgeupdatem"
>> ParameterBinding(Out-File): name="InputObject"; value="EFS"
>> ParameterBinding(Out-File): name="InputObject"; value="embeddedmode"
>> ParameterBinding(Out-File): name="InputObject"; value="EntAppSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="esifsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="EventLog"
>> ParameterBinding(Out-File): name="InputObject"; value="EventSystem"
>> ParameterBinding(Out-File): name="InputObject"; value="Fax"
>> ParameterBinding(Out-File): name="InputObject"; value="fdPHost"
>> ParameterBinding(Out-File): name="InputObject"; value="FDResPub"
>> ParameterBinding(Out-File): name="InputObject"; value="fhsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="FLEXnet Licensing Service 64"
>> ParameterBinding(Out-File): name="InputObject"; value="FontCache"
>> ParameterBinding(Out-File): name="InputObject"; value="FontCache3.0.0.0"
>> ParameterBinding(Out-File): name="InputObject"; value="FrameServer"
>> ParameterBinding(Out-File): name="InputObject"; value="GoogleChromeElevationService"
>> ParameterBinding(Out-File): name="InputObject"; value="gpsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="GraphicsPerfSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="gupdate"
>> ParameterBinding(Out-File): name="InputObject"; value="gupdatem"
>> ParameterBinding(Out-File): name="InputObject"; value="HfcDisableService"
>> ParameterBinding(Out-File): name="InputObject"; value="hidserv"
>> ParameterBinding(Out-File): name="InputObject"; value="HvHost"
>> ParameterBinding(Out-File): name="InputObject"; value="iaStorAfsService"
>> ParameterBinding(Out-File): name="InputObject"; value="IAStorDataMgrSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="icssvc"
>> ParameterBinding(Out-File): name="InputObject"; value="igfxCUIService2.0.0.0"
>> ParameterBinding(Out-File): name="InputObject"; value="IKEEXT"
>> ParameterBinding(Out-File): name="InputObject"; value="InstallService"
>> ParameterBinding(Out-File): name="InputObject"; value="Intel(R) Capability Licensing Service TCP IP Interface"
>> ParameterBinding(Out-File): name="InputObject"; value="Intel(R) TPM Provisioning Service"
>> ParameterBinding(Out-File): name="InputObject"; value="IntelAudioService"
>> ParameterBinding(Out-File): name="InputObject"; value="iphlpsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="IpxlatCfgSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="jhi_service"
>> ParameterBinding(Out-File): name="InputObject"; value="KeyIso"
>> ParameterBinding(Out-File): name="InputObject"; value="KtmRm"
>> ParameterBinding(Out-File): name="InputObject"; value="LanmanServer"
>> ParameterBinding(Out-File): name="InputObject"; value="LanmanWorkstation"
>> ParameterBinding(Out-File): name="InputObject"; value="lfsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="LicenseManager"
>> ParameterBinding(Out-File): name="InputObject"; value="lltdsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="lmhosts"
>> ParameterBinding(Out-File): name="InputObject"; value="LMS"
>> ParameterBinding(Out-File): name="InputObject"; value="LSM"
>> ParameterBinding(Out-File): name="InputObject"; value="LxpSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="MapsBroker"
>> ParameterBinding(Out-File): name="InputObject"; value="MessagingService_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="MicrosoftEdgeElevationService"
>> ParameterBinding(Out-File): name="InputObject"; value="MixedRealityOpenXRSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="mpssvc"
>> ParameterBinding(Out-File): name="InputObject"; value="MSDTC"
>> ParameterBinding(Out-File): name="InputObject"; value="MSiSCSI"
>> ParameterBinding(Out-File): name="InputObject"; value="msiserver"
>> ParameterBinding(Out-File): name="InputObject"; value="MSSQL$SQLEXPRESS"
>> ParameterBinding(Out-File): name="InputObject"; value="NaturalAuthentication"
>> ParameterBinding(Out-File): name="InputObject"; value="NcaSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="NcbService"
>> ParameterBinding(Out-File): name="InputObject"; value="NcdAutoSetup"
>> ParameterBinding(Out-File): name="InputObject"; value="Netlogon"
>> ParameterBinding(Out-File): name="InputObject"; value="Netman"
>> ParameterBinding(Out-File): name="InputObject"; value="netprofm"
>> ParameterBinding(Out-File): name="InputObject"; value="NetSetupSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="NetTcpPortSharing"
>> ParameterBinding(Out-File): name="InputObject"; value="NgcCtnrSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="NgcSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="NlaSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="nsi"
>> ParameterBinding(Out-File): name="InputObject"; value="OneSyncSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="ose64"
>> ParameterBinding(Out-File): name="InputObject"; value="p2pimsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="p2psvc"
>> ParameterBinding(Out-File): name="InputObject"; value="PcaSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="PeerDistSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="perceptionsimulation"
>> ParameterBinding(Out-File): name="InputObject"; value="PerfHost"
>> ParameterBinding(Out-File): name="InputObject"; value="PhoneSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="PimIndexMaintenanceSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="pla"
>> ParameterBinding(Out-File): name="InputObject"; value="PlugPlay"
>> ParameterBinding(Out-File): name="InputObject"; value="PNRPAutoReg"
>> ParameterBinding(Out-File): name="InputObject"; value="PNRPsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="PolicyAgent"
>> ParameterBinding(Out-File): name="InputObject"; value="Power"
>> ParameterBinding(Out-File): name="InputObject"; value="PrintNotify"
>> ParameterBinding(Out-File): name="InputObject"; value="PrintWorkflowUserSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="ProfSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="PushToInstall"
>> ParameterBinding(Out-File): name="InputObject"; value="QcomWlanSrv"
>> ParameterBinding(Out-File): name="InputObject"; value="QWAVE"
>> ParameterBinding(Out-File): name="InputObject"; value="RasAuto"
>> ParameterBinding(Out-File): name="InputObject"; value="RasMan"
>> ParameterBinding(Out-File): name="InputObject"; value="RemoteAccess"
>> ParameterBinding(Out-File): name="InputObject"; value="RemoteRegistry"
>> ParameterBinding(Out-File): name="InputObject"; value="RetailDemo"
>> ParameterBinding(Out-File): name="InputObject"; value="RmSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="RpcEptMapper"
>> ParameterBinding(Out-File): name="InputObject"; value="RpcLocator"
>> ParameterBinding(Out-File): name="InputObject"; value="RpcSs"
>> ParameterBinding(Out-File): name="InputObject"; value="RstMwService"
>> ParameterBinding(Out-File): name="InputObject"; value="RtkAudioUniversalService"
>> ParameterBinding(Out-File): name="InputObject"; value="SamSs"
>> ParameterBinding(Out-File): name="InputObject"; value="SCardSvr"
>> ParameterBinding(Out-File): name="InputObject"; value="ScDeviceEnum"
>> ParameterBinding(Out-File): name="InputObject"; value="Schedule"
>> ParameterBinding(Out-File): name="InputObject"; value="SCPolicySvc"
>> ParameterBinding(Out-File): name="InputObject"; value="SDRSVC"
>> ParameterBinding(Out-File): name="InputObject"; value="seclogon"
>> ParameterBinding(Out-File): name="InputObject"; value="SecurityHealthService"
>> ParameterBinding(Out-File): name="InputObject"; value="SEMgrSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="SENS"
>> ParameterBinding(Out-File): name="InputObject"; value="Sense"
>> ParameterBinding(Out-File): name="InputObject"; value="SensorDataService"
>> ParameterBinding(Out-File): name="InputObject"; value="SensorService"
>> ParameterBinding(Out-File): name="InputObject"; value="SensrSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="SessionEnv"
>> ParameterBinding(Out-File): name="InputObject"; value="SgrmBroker"
>> ParameterBinding(Out-File): name="InputObject"; value="SharedAccess"
>> ParameterBinding(Out-File): name="InputObject"; value="SharedRealitySvc"
>> ParameterBinding(Out-File): name="InputObject"; value="ShellHWDetection"
>> ParameterBinding(Out-File): name="InputObject"; value="shpamsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="smphost"
>> ParameterBinding(Out-File): name="InputObject"; value="SmsRouter"
>> ParameterBinding(Out-File): name="InputObject"; value="SNMPTRAP"
>> ParameterBinding(Out-File): name="InputObject"; value="spectrum"
>> ParameterBinding(Out-File): name="InputObject"; value="Spooler"
>> ParameterBinding(Out-File): name="InputObject"; value="sppsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="SQLAgent$SQLEXPRESS"
>> ParameterBinding(Out-File): name="InputObject"; value="SQLBrowser"
>> ParameterBinding(Out-File): name="InputObject"; value="SQLTELEMETRY$SQLEXPRESS"
>> ParameterBinding(Out-File): name="InputObject"; value="SQLWriter"
>> ParameterBinding(Out-File): name="InputObject"; value="SSDPSRV"
>> ParameterBinding(Out-File): name="InputObject"; value="ssh-agent"
>> ParameterBinding(Out-File): name="InputObject"; value="SstpSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="StateRepository"
>> ParameterBinding(Out-File): name="InputObject"; value="stisvc"
>> ParameterBinding(Out-File): name="InputObject"; value="StorSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="SupportAssistAgent"
>> ParameterBinding(Out-File): name="InputObject"; value="svsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="swprv"
>> ParameterBinding(Out-File): name="InputObject"; value="SysMain"
>> ParameterBinding(Out-File): name="InputObject"; value="SystemEventsBroker"
>> ParameterBinding(Out-File): name="InputObject"; value="TabletInputService"
>> ParameterBinding(Out-File): name="InputObject"; value="TapiSrv"
>> ParameterBinding(Out-File): name="InputObject"; value="TermService"
>> ParameterBinding(Out-File): name="InputObject"; value="Themes"
>> ParameterBinding(Out-File): name="InputObject"; value="TieringEngineService"
>> ParameterBinding(Out-File): name="InputObject"; value="TimeBrokerSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="TokenBroker"
>> ParameterBinding(Out-File): name="InputObject"; value="TrkWks"
>> ParameterBinding(Out-File): name="InputObject"; value="TroubleshootingSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="TrustedInstaller"
>> ParameterBinding(Out-File): name="InputObject"; value="tzautoupdate"
>> ParameterBinding(Out-File): name="InputObject"; value="UevAgentService"
>> ParameterBinding(Out-File): name="InputObject"; value="UltraViewService"
>> ParameterBinding(Out-File): name="InputObject"; value="UmRdpService"
>> ParameterBinding(Out-File): name="InputObject"; value="UnistoreSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="upnphost"
>> ParameterBinding(Out-File): name="InputObject"; value="UserDataSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="UserManager"
>> ParameterBinding(Out-File): name="InputObject"; value="UsoSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="VacSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="VaultSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="vds"
>> ParameterBinding(Out-File): name="InputObject"; value="vmicguestinterface"
>> ParameterBinding(Out-File): name="InputObject"; value="vmicheartbeat"
>> ParameterBinding(Out-File): name="InputObject"; value="vmickvpexchange"
>> ParameterBinding(Out-File): name="InputObject"; value="vmicrdv"
>> ParameterBinding(Out-File): name="InputObject"; value="vmicshutdown"
>> ParameterBinding(Out-File): name="InputObject"; value="vmictimesync"
>> ParameterBinding(Out-File): name="InputObject"; value="vmicvmsession"
>> ParameterBinding(Out-File): name="InputObject"; value="vmicvss"
>> ParameterBinding(Out-File): name="InputObject"; value="VSS"
>> ParameterBinding(Out-File): name="InputObject"; value="W32Time"
>> ParameterBinding(Out-File): name="InputObject"; value="WaaSMedicSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WalletService"
>> ParameterBinding(Out-File): name="InputObject"; value="WarpJITSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WavesSysSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="wbengine"
>> ParameterBinding(Out-File): name="InputObject"; value="WbioSrvc"
>> ParameterBinding(Out-File): name="InputObject"; value="Wcmsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="wcncsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WdiServiceHost"
>> ParameterBinding(Out-File): name="InputObject"; value="WdiSystemHost"
>> ParameterBinding(Out-File): name="InputObject"; value="WdNisSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WebClient"
>> ParameterBinding(Out-File): name="InputObject"; value="Wecsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WEPHOSTSVC"
>> ParameterBinding(Out-File): name="InputObject"; value="wercplsupport"
>> ParameterBinding(Out-File): name="InputObject"; value="WerSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WFDSConMgrSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WiaRpc"
>> ParameterBinding(Out-File): name="InputObject"; value="WinDefend"
>> ParameterBinding(Out-File): name="InputObject"; value="WinHttpAutoProxySvc"
>> ParameterBinding(Out-File): name="InputObject"; value="Winmgmt"
>> ParameterBinding(Out-File): name="InputObject"; value="WinRM"
>> ParameterBinding(Out-File): name="InputObject"; value="wisvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WlanSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="wlidsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="wlpasvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WManSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="wmiApSrv"
>> ParameterBinding(Out-File): name="InputObject"; value="WMPNetworkSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="workfolderssvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WpcMonSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WPDBusEnum"
>> ParameterBinding(Out-File): name="InputObject"; value="WpnService"
>> ParameterBinding(Out-File): name="InputObject"; value="WpnUserService_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="wscsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WSearch"
>> ParameterBinding(Out-File): name="InputObject"; value="wuauserv"
>> ParameterBinding(Out-File): name="InputObject"; value="WwanSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="XblAuthManager"
>> ParameterBinding(Out-File): name="InputObject"; value="XblGameSave"
>> ParameterBinding(Out-File): name="InputObject"; value="XboxGipSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="XboxNetApiSvc"
PS>ParameterBinding(Out-File): name="InputObject"; value="AarSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="AJRouter"
>> ParameterBinding(Out-File): name="InputObject"; value="ALG"
>> ParameterBinding(Out-File): name="InputObject"; value="AMD External Events Utility"
>> ParameterBinding(Out-File): name="InputObject"; value="AnyDesk"
>> ParameterBinding(Out-File): name="InputObject"; value="AppIDSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="Appinfo"
>> ParameterBinding(Out-File): name="InputObject"; value="AppMgmt"
>> ParameterBinding(Out-File): name="InputObject"; value="AppReadiness"
>> ParameterBinding(Out-File): name="InputObject"; value="AppVClient"
>> ParameterBinding(Out-File): name="InputObject"; value="AppXSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="AssignedAccessManagerSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="AtherosSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="AudioEndpointBuilder"
>> ParameterBinding(Out-File): name="InputObject"; value="Audiosrv"
>> ParameterBinding(Out-File): name="InputObject"; value="Autodesk Content Service"
>> ParameterBinding(Out-File): name="InputObject"; value="autotimesvc"
>> ParameterBinding(Out-File): name="InputObject"; value="AxInstSV"
>> ParameterBinding(Out-File): name="InputObject"; value="BcastDVRUserService_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="BDESVC"
>> ParameterBinding(Out-File): name="InputObject"; value="BFE"
>> ParameterBinding(Out-File): name="InputObject"; value="BITS"
>> ParameterBinding(Out-File): name="InputObject"; value="BluetoothUserService_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="BrokerInfrastructure"
>> ParameterBinding(Out-File): name="InputObject"; value="BTAGService"
>> ParameterBinding(Out-File): name="InputObject"; value="BthAvctpSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="bthserv"
>> ParameterBinding(Out-File): name="InputObject"; value="camsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="CaptureService_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="cbdhsvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="CDPSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="CDPUserSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="CertPropSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="ClickToRunSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="ClipSVC"
>> ParameterBinding(Out-File): name="InputObject"; value="COMSysApp"
>> ParameterBinding(Out-File): name="InputObject"; value="ConsentUxUserSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="CoreMessagingRegistrar"
>> ParameterBinding(Out-File): name="InputObject"; value="cphs"
>> ParameterBinding(Out-File): name="InputObject"; value="cplspcon"
>> ParameterBinding(Out-File): name="InputObject"; value="CredentialEnrollmentManagerUserSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="CryptSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="CscService"
>> ParameterBinding(Out-File): name="InputObject"; value="DcomLaunch"
>> ParameterBinding(Out-File): name="InputObject"; value="dcpm-notify"
>> ParameterBinding(Out-File): name="InputObject"; value="DDVCollectorSvcApi"
>> ParameterBinding(Out-File): name="InputObject"; value="DDVDataCollector"
>> ParameterBinding(Out-File): name="InputObject"; value="DDVRulesProcessor"
>> ParameterBinding(Out-File): name="InputObject"; value="defragsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="Dell Digital Delivery Services"
>> ParameterBinding(Out-File): name="InputObject"; value="Dell Hardware Support"
>> ParameterBinding(Out-File): name="InputObject"; value="Dell SupportAssist Remediation"
>> ParameterBinding(Out-File): name="InputObject"; value="Dell.CommandPowerManager.Service"
>> ParameterBinding(Out-File): name="InputObject"; value="DellClientManagementService"
>> ParameterBinding(Out-File): name="InputObject"; value="DeviceAssociationBrokerSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="DeviceAssociationService"
>> ParameterBinding(Out-File): name="InputObject"; value="DeviceInstall"
>> ParameterBinding(Out-File): name="InputObject"; value="DevicePickerUserSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="DevicesFlowUserSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="DevQueryBroker"
>> ParameterBinding(Out-File): name="InputObject"; value="Dhcp"
>> ParameterBinding(Out-File): name="InputObject"; value="diagnosticshub.standardcollector.service"
>> ParameterBinding(Out-File): name="InputObject"; value="diagsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="DiagTrack"
>> ParameterBinding(Out-File): name="InputObject"; value="DispBrokerDesktopSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="DisplayEnhancementService"
>> ParameterBinding(Out-File): name="InputObject"; value="DmEnrollmentSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="dmwappushservice"
>> ParameterBinding(Out-File): name="InputObject"; value="Dnscache"
>> ParameterBinding(Out-File): name="InputObject"; value="DoSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="dot3svc"
>> ParameterBinding(Out-File): name="InputObject"; value="DPS"
>> ParameterBinding(Out-File): name="InputObject"; value="DsmSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="DsSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="DusmSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="Eaphost"
>> ParameterBinding(Out-File): name="InputObject"; value="edgeupdate"
>> ParameterBinding(Out-File): name="InputObject"; value="edgeupdatem"
>> ParameterBinding(Out-File): name="InputObject"; value="EFS"
>> ParameterBinding(Out-File): name="InputObject"; value="embeddedmode"
>> ParameterBinding(Out-File): name="InputObject"; value="EntAppSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="esifsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="EventLog"
>> ParameterBinding(Out-File): name="InputObject"; value="EventSystem"
>> ParameterBinding(Out-File): name="InputObject"; value="Fax"
>> ParameterBinding(Out-File): name="InputObject"; value="fdPHost"
>> ParameterBinding(Out-File): name="InputObject"; value="FDResPub"
>> ParameterBinding(Out-File): name="InputObject"; value="fhsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="FLEXnet Licensing Service 64"
>> ParameterBinding(Out-File): name="InputObject"; value="FontCache"
>> ParameterBinding(Out-File): name="InputObject"; value="FontCache3.0.0.0"
>> ParameterBinding(Out-File): name="InputObject"; value="FrameServer"
>> ParameterBinding(Out-File): name="InputObject"; value="GoogleChromeElevationService"
>> ParameterBinding(Out-File): name="InputObject"; value="gpsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="GraphicsPerfSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="gupdate"
>> ParameterBinding(Out-File): name="InputObject"; value="gupdatem"
>> ParameterBinding(Out-File): name="InputObject"; value="HfcDisableService"
>> ParameterBinding(Out-File): name="InputObject"; value="hidserv"
>> ParameterBinding(Out-File): name="InputObject"; value="HvHost"
>> ParameterBinding(Out-File): name="InputObject"; value="iaStorAfsService"
>> ParameterBinding(Out-File): name="InputObject"; value="IAStorDataMgrSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="icssvc"
>> ParameterBinding(Out-File): name="InputObject"; value="igfxCUIService2.0.0.0"
>> ParameterBinding(Out-File): name="InputObject"; value="IKEEXT"
>> ParameterBinding(Out-File): name="InputObject"; value="InstallService"
>> ParameterBinding(Out-File): name="InputObject"; value="Intel(R) Capability Licensing Service TCP IP Interface"
>> ParameterBinding(Out-File): name="InputObject"; value="Intel(R) TPM Provisioning Service"
>> ParameterBinding(Out-File): name="InputObject"; value="IntelAudioService"
>> ParameterBinding(Out-File): name="InputObject"; value="iphlpsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="IpxlatCfgSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="jhi_service"
>> ParameterBinding(Out-File): name="InputObject"; value="KeyIso"
>> ParameterBinding(Out-File): name="InputObject"; value="KtmRm"
>> ParameterBinding(Out-File): name="InputObject"; value="LanmanServer"
>> ParameterBinding(Out-File): name="InputObject"; value="LanmanWorkstation"
>> ParameterBinding(Out-File): name="InputObject"; value="lfsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="LicenseManager"
>> ParameterBinding(Out-File): name="InputObject"; value="lltdsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="lmhosts"
>> ParameterBinding(Out-File): name="InputObject"; value="LMS"
>> ParameterBinding(Out-File): name="InputObject"; value="LSM"
>> ParameterBinding(Out-File): name="InputObject"; value="LxpSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="MapsBroker"
>> ParameterBinding(Out-File): name="InputObject"; value="MessagingService_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="MicrosoftEdgeElevationService"
>> ParameterBinding(Out-File): name="InputObject"; value="MixedRealityOpenXRSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="mpssvc"
>> ParameterBinding(Out-File): name="InputObject"; value="MSDTC"
>> ParameterBinding(Out-File): name="InputObject"; value="MSiSCSI"
>> ParameterBinding(Out-File): name="InputObject"; value="msiserver"
>> ParameterBinding(Out-File): name="InputObject"; value="MSSQL$SQLEXPRESS"
>> ParameterBinding(Out-File): name="InputObject"; value="NaturalAuthentication"
>> ParameterBinding(Out-File): name="InputObject"; value="NcaSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="NcbService"
>> ParameterBinding(Out-File): name="InputObject"; value="NcdAutoSetup"
>> ParameterBinding(Out-File): name="InputObject"; value="Netlogon"
>> ParameterBinding(Out-File): name="InputObject"; value="Netman"
>> ParameterBinding(Out-File): name="InputObject"; value="netprofm"
>> ParameterBinding(Out-File): name="InputObject"; value="NetSetupSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="NetTcpPortSharing"
>> ParameterBinding(Out-File): name="InputObject"; value="NgcCtnrSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="NgcSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="NlaSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="nsi"
>> ParameterBinding(Out-File): name="InputObject"; value="OneSyncSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="ose64"
>> ParameterBinding(Out-File): name="InputObject"; value="p2pimsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="p2psvc"
>> ParameterBinding(Out-File): name="InputObject"; value="PcaSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="PeerDistSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="perceptionsimulation"
>> ParameterBinding(Out-File): name="InputObject"; value="PerfHost"
>> ParameterBinding(Out-File): name="InputObject"; value="PhoneSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="PimIndexMaintenanceSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="pla"
>> ParameterBinding(Out-File): name="InputObject"; value="PlugPlay"
>> ParameterBinding(Out-File): name="InputObject"; value="PNRPAutoReg"
>> ParameterBinding(Out-File): name="InputObject"; value="PNRPsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="PolicyAgent"
>> ParameterBinding(Out-File): name="InputObject"; value="Power"
>> ParameterBinding(Out-File): name="InputObject"; value="PrintNotify"
>> ParameterBinding(Out-File): name="InputObject"; value="PrintWorkflowUserSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="ProfSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="PushToInstall"
>> ParameterBinding(Out-File): name="InputObject"; value="QcomWlanSrv"
>> ParameterBinding(Out-File): name="InputObject"; value="QWAVE"
>> ParameterBinding(Out-File): name="InputObject"; value="RasAuto"
>> ParameterBinding(Out-File): name="InputObject"; value="RasMan"
>> ParameterBinding(Out-File): name="InputObject"; value="RemoteAccess"
>> ParameterBinding(Out-File): name="InputObject"; value="RemoteRegistry"
>> ParameterBinding(Out-File): name="InputObject"; value="RetailDemo"
>> ParameterBinding(Out-File): name="InputObject"; value="RmSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="RpcEptMapper"
>> ParameterBinding(Out-File): name="InputObject"; value="RpcLocator"
>> ParameterBinding(Out-File): name="InputObject"; value="RpcSs"
>> ParameterBinding(Out-File): name="InputObject"; value="RstMwService"
>> ParameterBinding(Out-File): name="InputObject"; value="RtkAudioUniversalService"
>> ParameterBinding(Out-File): name="InputObject"; value="SamSs"
>> ParameterBinding(Out-File): name="InputObject"; value="SCardSvr"
>> ParameterBinding(Out-File): name="InputObject"; value="ScDeviceEnum"
>> ParameterBinding(Out-File): name="InputObject"; value="Schedule"
>> ParameterBinding(Out-File): name="InputObject"; value="SCPolicySvc"
>> ParameterBinding(Out-File): name="InputObject"; value="SDRSVC"
>> ParameterBinding(Out-File): name="InputObject"; value="seclogon"
>> ParameterBinding(Out-File): name="InputObject"; value="SecurityHealthService"
>> ParameterBinding(Out-File): name="InputObject"; value="SEMgrSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="SENS"
>> ParameterBinding(Out-File): name="InputObject"; value="Sense"
>> ParameterBinding(Out-File): name="InputObject"; value="SensorDataService"
>> ParameterBinding(Out-File): name="InputObject"; value="SensorService"
>> ParameterBinding(Out-File): name="InputObject"; value="SensrSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="SessionEnv"
>> ParameterBinding(Out-File): name="InputObject"; value="SgrmBroker"
>> ParameterBinding(Out-File): name="InputObject"; value="SharedAccess"
>> ParameterBinding(Out-File): name="InputObject"; value="SharedRealitySvc"
>> ParameterBinding(Out-File): name="InputObject"; value="ShellHWDetection"
>> ParameterBinding(Out-File): name="InputObject"; value="shpamsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="smphost"
>> ParameterBinding(Out-File): name="InputObject"; value="SmsRouter"
>> ParameterBinding(Out-File): name="InputObject"; value="SNMPTRAP"
>> ParameterBinding(Out-File): name="InputObject"; value="spectrum"
>> ParameterBinding(Out-File): name="InputObject"; value="Spooler"
>> ParameterBinding(Out-File): name="InputObject"; value="sppsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="SQLAgent$SQLEXPRESS"
>> ParameterBinding(Out-File): name="InputObject"; value="SQLBrowser"
>> ParameterBinding(Out-File): name="InputObject"; value="SQLTELEMETRY$SQLEXPRESS"
>> ParameterBinding(Out-File): name="InputObject"; value="SQLWriter"
>> ParameterBinding(Out-File): name="InputObject"; value="SSDPSRV"
>> ParameterBinding(Out-File): name="InputObject"; value="ssh-agent"
>> ParameterBinding(Out-File): name="InputObject"; value="SstpSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="StateRepository"
>> ParameterBinding(Out-File): name="InputObject"; value="stisvc"
>> ParameterBinding(Out-File): name="InputObject"; value="StorSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="SupportAssistAgent"
>> ParameterBinding(Out-File): name="InputObject"; value="svsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="swprv"
>> ParameterBinding(Out-File): name="InputObject"; value="SysMain"
>> ParameterBinding(Out-File): name="InputObject"; value="SystemEventsBroker"
>> ParameterBinding(Out-File): name="InputObject"; value="TabletInputService"
>> ParameterBinding(Out-File): name="InputObject"; value="TapiSrv"
>> ParameterBinding(Out-File): name="InputObject"; value="TermService"
>> ParameterBinding(Out-File): name="InputObject"; value="Themes"
>> ParameterBinding(Out-File): name="InputObject"; value="TieringEngineService"
>> ParameterBinding(Out-File): name="InputObject"; value="TimeBrokerSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="TokenBroker"
>> ParameterBinding(Out-File): name="InputObject"; value="TrkWks"
>> ParameterBinding(Out-File): name="InputObject"; value="TroubleshootingSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="TrustedInstaller"
>> ParameterBinding(Out-File): name="InputObject"; value="tzautoupdate"
>> ParameterBinding(Out-File): name="InputObject"; value="UevAgentService"
>> ParameterBinding(Out-File): name="InputObject"; value="UltraViewService"
>> ParameterBinding(Out-File): name="InputObject"; value="UmRdpService"
>> ParameterBinding(Out-File): name="InputObject"; value="UnistoreSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="upnphost"
>> ParameterBinding(Out-File): name="InputObject"; value="UserDataSvc_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="UserManager"
>> ParameterBinding(Out-File): name="InputObject"; value="UsoSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="VacSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="VaultSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="vds"
>> ParameterBinding(Out-File): name="InputObject"; value="vmicguestinterface"
>> ParameterBinding(Out-File): name="InputObject"; value="vmicheartbeat"
>> ParameterBinding(Out-File): name="InputObject"; value="vmickvpexchange"
>> ParameterBinding(Out-File): name="InputObject"; value="vmicrdv"
>> ParameterBinding(Out-File): name="InputObject"; value="vmicshutdown"
>> ParameterBinding(Out-File): name="InputObject"; value="vmictimesync"
>> ParameterBinding(Out-File): name="InputObject"; value="vmicvmsession"
>> ParameterBinding(Out-File): name="InputObject"; value="vmicvss"
>> ParameterBinding(Out-File): name="InputObject"; value="VSS"
>> ParameterBinding(Out-File): name="InputObject"; value="W32Time"
>> ParameterBinding(Out-File): name="InputObject"; value="WaaSMedicSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WalletService"
>> ParameterBinding(Out-File): name="InputObject"; value="WarpJITSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WavesSysSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="wbengine"
>> ParameterBinding(Out-File): name="InputObject"; value="WbioSrvc"
>> ParameterBinding(Out-File): name="InputObject"; value="Wcmsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="wcncsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WdiServiceHost"
>> ParameterBinding(Out-File): name="InputObject"; value="WdiSystemHost"
>> ParameterBinding(Out-File): name="InputObject"; value="WdNisSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WebClient"
>> ParameterBinding(Out-File): name="InputObject"; value="Wecsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WEPHOSTSVC"
>> ParameterBinding(Out-File): name="InputObject"; value="wercplsupport"
>> ParameterBinding(Out-File): name="InputObject"; value="WerSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WFDSConMgrSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WiaRpc"
>> ParameterBinding(Out-File): name="InputObject"; value="WinDefend"
>> ParameterBinding(Out-File): name="InputObject"; value="WinHttpAutoProxySvc"
>> ParameterBinding(Out-File): name="InputObject"; value="Winmgmt"
>> ParameterBinding(Out-File): name="InputObject"; value="WinRM"
>> ParameterBinding(Out-File): name="InputObject"; value="wisvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WlanSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="wlidsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="wlpasvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WManSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="wmiApSrv"
>> ParameterBinding(Out-File): name="InputObject"; value="WMPNetworkSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="workfolderssvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WpcMonSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WPDBusEnum"
>> ParameterBinding(Out-File): name="InputObject"; value="WpnService"
>> ParameterBinding(Out-File): name="InputObject"; value="WpnUserService_b7a682"
>> ParameterBinding(Out-File): name="InputObject"; value="wscsvc"
>> ParameterBinding(Out-File): name="InputObject"; value="WSearch"
>> ParameterBinding(Out-File): name="InputObject"; value="wuauserv"
>> ParameterBinding(Out-File): name="InputObject"; value="WwanSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="XblAuthManager"
>> ParameterBinding(Out-File): name="InputObject"; value="XblGameSave"
>> ParameterBinding(Out-File): name="InputObject"; value="XboxGipSvc"
>> ParameterBinding(Out-File): name="InputObject"; value="XboxNetApiSvc"
Stopped  AppMgmt            Application Management
Stopped  AarSvc_b7a682      Agent Activation Runtime_b7a682
Stopped  AarSvc_b7a682      Agent Activation Runtime_b7a682
Stopped  AJRouter           AllJoyn Router Service
Stopped  ALG                Application Layer Gateway Service
Running  AMD External Ev... AMD External Events Utility
Running  AnyDesk            AnyDesk Service
Stopped  AppIDSvc           Application Identity
Running  Appinfo            Application Information
Stopped  AppMgmt            Application Management
Stopped  AppReadiness       App Readiness
Stopped  AppVClient         Microsoft App-V Client
Stopped  AppXSvc            AppX Deployment Service (AppXSVC)
Stopped  AssignedAccessM... AssignedAccessManager Service
Running  AtherosSvc         AtherosSvc
Running  AudioEndpointBu... Windows Audio Endpoint Builder
Running  Audiosrv           Windows Audio
Running  Autodesk Conten... Autodesk Content Service
Stopped  autotimesvc        Cellular Time
Stopped  AxInstSV           ActiveX Installer (AxInstSV)
Stopped  BcastDVRUserSer... GameDVR and Broadcast User Service_...
Running  BDESVC             BitLocker Drive Encryption Service
Running  BFE                Base Filtering Engine
Running  BITS               Background Intelligent Transfer Ser...
Running  BluetoothUserSe... Serviciul de asistență Bluetooth pe...
Running  BrokerInfrastru... Background Tasks Infrastructure Ser...
Running  BTAGService        Bluetooth Audio Gateway Service
Running  BthAvctpSvc        AVCTP service
Running  bthserv            Bluetooth Support Service
Running  camsvc             Capability Access Manager Service
Stopped  CaptureService_... CaptureService_b7a682
Running  cbdhsvc_b7a682     Serviciul utilizator clipboard_b7a682
Running  CDPSvc             Connected Devices Platform Service
Running  CDPUserSvc_b7a682  Connected Devices Platform User Ser...
Running  CertPropSvc        Certificate Propagation
Running  ClickToRunSvc      Microsoft Office Click-to-Run Service
Stopped  ClipSVC            Client License Service (ClipSVC)
Stopped  COMSysApp          COM+ System Application
Stopped  ConsentUxUserSv... ConsentUX_b7a682
Running  CoreMessagingRe... CoreMessaging
Running  cphs               Intel(R) Content Protection HECI Se...
Running  cplspcon           Intel(R) Content Protection HDCP Se...
Stopped  CredentialEnrol... CredentialEnrollmentManagerUserSvc_...
Running  CryptSvc           Cryptographic Services
Stopped  CscService         Offline Files
Running  DcomLaunch         DCOM Server Process Launcher
Stopped  dcpm-notify        Dell Command | Power Manager Notify
Running  DDVCollectorSvcApi Dell Data Vault Service API
Running  DDVDataCollector   Dell Data Vault Collector
Running  DDVRulesProcessor  Dell Data Vault Processor
Stopped  defragsvc          Optimize drives
Running  Dell Digital De... Dell Digital Delivery Services
Running  Dell Hardware S... Dell Hardware Support
Running  Dell SupportAss... Dell SupportAssist Remediation
Stopped  Dell.CommandPow... Dell.CommandPowerManager.Service
Running  DellClientManag... Dell Client Management Service
Stopped  DeviceAssociati... DeviceAssociationBroker_b7a682
Running  DeviceAssociati... Device Association Service
Stopped  DeviceInstall      Device Install Service
Running  DevicePickerUse... DevicePicker_b7a682
Running  DevicesFlowUser... DevicesFlow_b7a682
Stopped  DevQueryBroker     DevQuery Background Discovery Broker
Running  Dhcp               DHCP Client
Stopped  diagnosticshub.... Microsoft (R) Diagnostics Hub Stand...
Stopped  diagsvc            Diagnostic Execution Service
Running  DiagTrack          Connected User Experiences and Tele...
Running  DispBrokerDeskt... Display Policy Service
Running  DisplayEnhancem... Display Enhancement Service
Stopped  DmEnrollmentSvc    Device Management Enrollment Service
Stopped  dmwappushservice   Device Management Wireless Applicat...
Running  Dnscache           DNS Client
Running  DoSvc              Delivery Optimization
Stopped  dot3svc            Wired AutoConfig
Running  DPS                Diagnostic Policy Service
Stopped  DsmSvc             Device Setup Manager
Running  DsSvc              Data Sharing Service
Running  DusmSvc            Data Usage
Stopped  Eaphost            Extensible Authentication Protocol
Stopped  edgeupdate         Serviciul Actualizare Microsoft Edg...
Stopped  edgeupdatem        Serviciul Actualizare Microsoft Edg...
Stopped  EFS                Encrypting File System (EFS)
Stopped  embeddedmode       Embedded Mode
Stopped  EntAppSvc          Enterprise App Management Service
Running  esifsvc            Intel(R) Dynamic Platform and Therm...
Running  EventLog           Windows Event Log
Running  EventSystem        COM+ Event System
Stopped  Fax                Fax
Running  fdPHost            Function Discovery Provider Host
Running  FDResPub           Function Discovery Resource Publica...
Stopped  fhsvc              File History Service
Stopped  FLEXnet Licensi... FLEXnet Licensing Service 64
Running  FontCache          Windows Font Cache Service
Running  FontCache3.0.0.0   Windows Presentation Foundation Fon...
Stopped  FrameServer        Windows Camera Frame Server
Stopped  GoogleChromeEle... Google Chrome Elevation Service
Stopped  gpsvc              Group Policy Client
Stopped  GraphicsPerfSvc    GraphicsPerfSvc
Stopped  gupdate            Google Update Service (gupdate)
Stopped  gupdatem           Google Update Service (gupdatem)
Stopped  HfcDisableService  Intel(R) RST HFC Disable Service
Running  hidserv            Human Interface Device Service
Stopped  HvHost             HV Host Service
Stopped  iaStorAfsService   Intel(R) Optane(TM) Memory Service
Running  IAStorDataMgrSvc   Intel(R) Rapid Storage Technology
Stopped  icssvc             Windows Mobile Hotspot Service
Running  igfxCUIService2... Intel(R) HD Graphics Control Panel ...
Stopped  IKEEXT             IKE and AuthIP IPsec Keying Modules
Running  InstallService     Microsoft Store Install Service
Stopped  Intel(R) Capabi... Intel(R) Capability Licensing Servi...
Stopped  Intel(R) TPM Pr... Intel(R) TPM Provisioning Service
Running  IntelAudioService  Intel(R) Audio Service
Running  iphlpsvc           IP Helper
Stopped  IpxlatCfgSvc       IP Translation Configuration Service
Running  jhi_service        Intel(R) Dynamic Application Loader...
Running  KeyIso             CNG Key Isolation
Stopped  KtmRm              KtmRm for Distributed Transaction C...
Running  LanmanServer       Server
Running  LanmanWorkstation  Workstation
Running  lfsvc              Geolocation Service
Running  LicenseManager     Windows License Manager Service
Stopped  lltdsvc            Link-Layer Topology Discovery Mapper
Running  lmhosts            TCP/IP NetBIOS Helper
Running  LMS                Intel(R) Management and Security Ap...
Running  LSM                Local Session Manager
Stopped  LxpSvc             Language Experience Service
Stopped  MapsBroker         Downloaded Maps Manager
Stopped  MessagingServic... MessagingService_b7a682
Stopped  MicrosoftEdgeEl... Microsoft Edge Elevation Service
Stopped  MixedRealityOpe... Windows Mixed Reality OpenXR Service
Running  mpssvc             Windows Defender Firewall
Running  MSDTC              Distributed Transaction Coordinator
Stopped  MSiSCSI            Microsoft iSCSI Initiator Service
Stopped  msiserver          Windows Installer
Running  MSSQL$SQLEXPRESS   SQL Server (SQLEXPRESS)
Stopped  NaturalAuthenti... Natural Authentication
Stopped  NcaSvc             Network Connectivity Assistant
Running  NcbService         Network Connection Broker
Stopped  NcdAutoSetup       Network Connected Devices Auto-Setup
Stopped  Netlogon           Netlogon
Stopped  Netman             Network Connections
Running  netprofm           Network List Service
Stopped  NetSetupSvc        Network Setup Service
Stopped  NetTcpPortSharing  Net.Tcp Port Sharing Service
Stopped  NgcCtnrSvc         Microsoft Passport Container
Stopped  NgcSvc             Microsoft Passport
Running  NlaSvc             Network Location Awareness
Running  nsi                Network Store Interface Service
Running  OneSyncSvc_b7a682  Sync Host_b7a682
Stopped  ose64              Office 64 Source Engine
Stopped  p2pimsvc           Peer Networking Identity Manager
Stopped  p2psvc             Peer Networking Grouping
Running  PcaSvc             Program Compatibility Assistant Ser...
Stopped  PeerDistSvc        BranchCache
Stopped  perceptionsimul... Windows Perception Simulation Service
Stopped  PerfHost           Performance Counter DLL Host
Running  PhoneSvc           Phone Service
Running  PimIndexMainten... Date de contact_b7a682
Stopped  pla                Performance Logs & Alerts
Running  PlugPlay           Plug and Play
Stopped  PNRPAutoReg        PNRP Machine Name Publication Service
Stopped  PNRPsvc            Peer Name Resolution Protocol
Stopped  PolicyAgent        IPsec Policy Agent
Running  Power              Power
Stopped  PrintNotify        Printer Extensions and Notifications
Running  PrintWorkflowUs... PrintWorkflow_b7a682
Running  ProfSvc            User Profile Service
Stopped  PushToInstall      Windows PushToInstall Service
Running  QcomWlanSrv        Qualcomm Atheros WLAN Driver Service
Stopped  QWAVE              Quality Windows Audio Video Experience
Stopped  RasAuto            Remote Access Auto Connection Manager
Running  RasMan             Remote Access Connection Manager
Stopped  RemoteAccess       Routing and Remote Access
Stopped  RemoteRegistry     Remote Registry
Stopped  RetailDemo         Retail Demo Service
Stopped  RmSvc              Radio Management Service
Running  RpcEptMapper       RPC Endpoint Mapper
Stopped  RpcLocator         Remote Procedure Call (RPC) Locator
Running  RpcSs              Remote Procedure Call (RPC)
Running  RstMwService       Intel(R) Storage Middleware Service
Running  RtkAudioUnivers... Realtek Audio Universal Service
Running  SamSs              Security Accounts Manager
Running  SCardSvr           Smart Card
Stopped  ScDeviceEnum       Smart Card Device Enumeration Service
Running  Schedule           Task Scheduler
Stopped  SCPolicySvc        Smart Card Removal Policy
Stopped  SDRSVC             Windows Backup
Running  seclogon           Secondary Logon
Running  SecurityHealthS... Windows Security Service
Stopped  SEMgrSvc           Payments and NFC/SE Manager
Running  SENS               System Event Notification Service
Stopped  Sense              Windows Defender Advanced Threat Pr...
Stopped  SensorDataService  Sensor Data Service
Stopped  SensorService      Sensor Service
Stopped  SensrSvc           Sensor Monitoring Service
Stopped  SessionEnv         Remote Desktop Configuration
Running  SgrmBroker         System Guard Runtime Monitor Broker
Stopped  SharedAccess       Internet Connection Sharing (ICS)
Stopped  SharedRealitySvc   Spatial Data Service
Running  ShellHWDetection   Shell Hardware Detection
Stopped  shpamsvc           Shared PC Account Manager
Stopped  smphost            Microsoft Storage Spaces SMP
Stopped  SmsRouter          Microsoft Windows SMS Router Service.
Stopped  SNMPTRAP           SNMP Trap
Stopped  spectrum           Windows Perception Service
Running  Spooler            Print Spooler
Stopped  sppsvc             Software Protection
Stopped  SQLAgent$SQLEXP... SQL Server Agent (SQLEXPRESS)
Stopped  SQLBrowser         SQL Server Browser
Running  SQLTELEMETRY$SQ... SQL Server CEIP service (SQLEXPRESS)
Running  SQLWriter          SQL Server VSS Writer
Running  SSDPSRV            SSDP Discovery
Stopped  ssh-agent          OpenSSH Authentication Agent
Running  SstpSvc            Secure Socket Tunneling Protocol Se...
Running  StateRepository    State Repository Service
Stopped  stisvc             Windows Image Acquisition (WIA)
Running  StorSvc            Storage Service
Running  SupportAssistAgent Dell SupportAssist
Stopped  svsvc              Spot Verifier
Stopped  swprv              Microsoft Software Shadow Copy Prov...
Running  SysMain            SysMain
Running  SystemEventsBroker System Events Broker
Running  TabletInputService Touch Keyboard and Handwriting Pane...
Running  TapiSrv            Telephony
Stopped  TermService        Remote Desktop Services
Running  Themes             Themes
Stopped  TieringEngineSe... Storage Tiers Management
Running  TimeBrokerSvc      Time Broker
Running  TokenBroker        Web Account Manager
Running  TrkWks             Distributed Link Tracking Client
Stopped  TroubleshootingSvc Recommended Troubleshooting Service
Running  TrustedInstaller   Windows Modules Installer
Stopped  tzautoupdate       Auto Time Zone Updater
Stopped  UevAgentService    User Experience Virtualization Service
Running  UltraViewService   UltraViewer Service
Stopped  UmRdpService       Remote Desktop Services UserMode Po...
Running  UnistoreSvc_b7a682 Stocare date utilizator_b7a682
Stopped  upnphost           UPnP Device Host
Running  UserDataSvc_b7a682 Acces la datele de utilizator_b7a682
Running  UserManager        User Manager
Running  UsoSvc             Update Orchestrator Service
Stopped  VacSvc             Volumetric Audio Compositor Service
Running  VaultSvc           Credential Manager
Stopped  vds                Virtual Disk
Stopped  vmicguestinterface Hyper-V Guest Service Interface
Stopped  vmicheartbeat      Hyper-V Heartbeat Service
Stopped  vmickvpexchange    Hyper-V Data Exchange Service
Stopped  vmicrdv            Hyper-V Remote Desktop Virtualizati...
Stopped  vmicshutdown       Hyper-V Guest Shutdown Service
Stopped  vmictimesync       Hyper-V Time Synchronization Service
Stopped  vmicvmsession      Hyper-V PowerShell Direct Service
Stopped  vmicvss            Hyper-V Volume Shadow Copy Requestor
Stopped  VSS                Volume Shadow Copy
Stopped  W32Time            Windows Time
Stopped  WaaSMedicSvc       Windows Update Medic Service
Stopped  WalletService      WalletService
Stopped  WarpJITSvc         WarpJITSvc
Running  WavesSysSvc        Waves Audio Services
Stopped  wbengine           Block Level Backup Engine Service
Running  WbioSrvc           Windows Biometric Service
Running  Wcmsvc             Windows Connection Manager
Stopped  wcncsvc            Windows Connect Now - Config Registrar
Running  WdiServiceHost     Diagnostic Service Host
Running  WdiSystemHost      Diagnostic System Host
Running  WdNisSvc           Windows Defender Antivirus Network ...
Running  WebClient          WebClient
Stopped  Wecsvc             Windows Event Collector
Stopped  WEPHOSTSVC         Windows Encryption Provider Host Se...
Stopped  wercplsupport      Problem Reports and Solutions Contr...
Stopped  WerSvc             Windows Error Reporting Service
Stopped  WFDSConMgrSvc      Wi-Fi Direct Services Connection Ma...
Stopped  WiaRpc             Still Image Acquisition Events
Running  WinDefend          Windows Defender Antivirus Service
Running  WinHttpAutoProx... WinHTTP Web Proxy Auto-Discovery Se...
Running  Winmgmt            Windows Management Instrumentation
Stopped  WinRM              Windows Remote Management (WS-Manag...
Stopped  wisvc              Windows Insider Service
Running  WlanSvc            WLAN AutoConfig
Stopped  wlidsvc            Microsoft Account Sign-in Assistant
Stopped  wlpasvc            Local Profile Assistant Service
Stopped  WManSvc            Windows Management Service
Stopped  wmiApSrv           WMI Performance Adapter
Stopped  WMPNetworkSvc      Windows Media Player Network Sharin...
Stopped  workfolderssvc     Work Folders
Stopped  WpcMonSvc          Parental Controls
Stopped  WPDBusEnum         Portable Device Enumerator Service
Running  WpnService         Windows Push Notifications System S...
Running  WpnUserService_... Serviciul Windows de notificări pus...
Running  wscsvc             Security Center
Running  WSearch            Windows Search
Running  wuauserv           Windows Update
Stopped  WwanSvc            WWAN AutoConfig
Running  XblAuthManager     Xbox Live Auth Manager
Stopped  XblGameSave        Xbox Live Game Save
Stopped  XboxGipSvc         Xbox Accessory Management Service
Stopped  XboxNetApiSvc      Xbox Live Networking Service

Name                       : PSWriteWord
Version                    : 1.1.8
Type                       : Module
Description                : Simple project to create Microsoft Word in PowerShell without having Office installed.
Author                     : Przemyslaw Klys
CompanyName                : Przemyslaw.Klys
Copyright                  : (c) 2011 - 2020 Przemyslaw Klys @ Evotec. All rights reserved.
PublishedDate              : 6/3/2020 8:48:02 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 : https://github.com/EvotecIT/PSWriteWord/blob/master/License
ProjectUri                 : https://github.com/EvotecIT/PSWriteWord
IconUri                    : https://evotec.xyz/wp-content/uploads/2018/10/PSWriteWord.png
Tags                       : {word, docx, write, PSWord...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {System.Collections.Specialized.OrderedDictionary}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Simple project to create Microsoft Word in PowerShell without having Office installed.; versionDownloadCount=950;
                             ItemType=Module; copyright=(c) 2011 - 2020 Przemyslaw Klys @ Evotec. All rights reserved.; PackageManagementProvider=NuGet;
                             CompanyName=Evotec; SourceName=PSGallery; tags=word docx write PSWord office windows doc PSModule; title=PSWriteWord; created=6/3/2020
                             8:48:02 PM +03:00; description=Simple project to create Microsoft Word in PowerShell without having Office installed.; published=6/3/2020
                             8:48:02 PM +03:00; developmentDependency=False; NormalizedVersion=1.1.8; downloadCount=11783; GUID=6314c78a-d011-4489-b462-91b05ec6a5c4;
                             lastUpdated=8/3/2020 4:09:40 AM +03:00; Authors=Przemyslaw Klys; updated=2020-08-03T04:09:40Z; Functions=Get-WordBookmark Set-WordBookmark
                             New-WordBlock New-WordBlockList New-WordBlockPageBreak New-WordBlockParagraph New-WordBlockTable Add-WordBarChart Add-WordChartSeries
                             Add-WordLineChart Add-WordPieChart Documentimo DocChart DocList DocListItem DocNumbering DocPageBreak DocTable DocText DocToc
                             Add-WordFooter Add-WordHeader Get-WordFooter Get-WordHeader Add-WordHyperLink Add-WordList Add-WordListItem Convert-ListToHeadings
                             New-WordList New-WordListItem New-WordListItemInternal Set-WordList Get-WordDocument Merge-WordDocument New-WordDocument Save-WordDocument
                             Add-WordCustomProperty Add-WordEquation Add-WordLine Add-WordPageCount Add-WordProtection Add-WordSection Add-WordTabStopPosition
                             Get-WordCustomProperty Get-WordPageSettings Get-WordSection Set-WordMargins Set-WordOrientation Set-WordPageSettings Set-WordPageSize
                             Add-WordPageBreak Add-WordParagraph Add-WordText Get-WordListItemParagraph Get-WordParagraphs Get-WordParagraphForList Remove-WordParagraph
                             Remove-WordText Set-WordParagraph Set-WordText Set-WordTextAlignment Set-WordTextBold Set-WordTextCapsStyle Set-WordTextColor
                             Set-WordTextDirection Set-WordTextFontFamily Set-WordTextFontSize Set-WordTextHeadingType Set-WordTextHidden Set-WordTextHighlight
                             Set-WordTextIndentationFirstLine Set-WordTextIndentationHanging Set-WordTextItalic Set-WordTextKerning Set-WordTextLanguage
                             Set-WordTextMisc Set-WordTextPercentageScale Set-WordTextPosition Set-WordTextReplace Set-WordTextScript Set-WordTextShadingType
                             Set-WordTextSpacing Set-WordTextSpacingAfter Set-WordTextSpacingBefore Set-WordTextStrikeThrough Set-WordTextUnderlineColor
                             Set-WordTextUnderlineStyle Add-WordPicture Get-WordPicture Remove-WordPicture Set-WordPicture Add-WordTable Add-WordTableCellValue
                             Add-WordTableColumn Add-WordTableRow Add-WordTableTitle Copy-WordTableRow Get-WordTable Get-WordTableRow New-WordTable New-WordTableBorder
                             Remove-WordTable Remove-WordTableColumn Remove-WordTableRow Set-WordTable Set-WordTableAutoFit Set-WordTableBorder Set-WordTableCell
                             Set-WordTableCellFillColor Set-WordTableCellShadingColor Set-WordTableColumnWidth Set-WordTableColumnWidthByIndex Set-WordTableDesign
                             Set-WordTableDirection Set-WordTablePageBreak Set-WordTableRowMergeCells Add-WordTOC Add-WordTocItem; isLatestVersion=True;
                             PowerShellVersion=5.1; IsPrerelease=false; isAbsoluteLatestVersion=True; packageSize=147783; FileList=PSWriteWord.nuspec|PSWriteWord.psd1|PS
                             WriteWord.psm1|Lib\License.md|Lib\Default\Xceed.Document.NET.dll|Lib\Default\Xceed.Words.NET.dll; requireLicenseAcceptance=False}


Name                       : xWordPress
Version                    : 1.1.0.0
Type                       : Module
Description                : Module with DSC Resources for configuring WordPress
Author                     : Microsoft Corporation
CompanyName                : {PowerShellTeam, gaelcolas, dsccommunity}
Copyright                  : (c) 2014 Microsoft Corporation. All rights reserved.
PublishedDate              : 9/11/2015 11:28:45 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 : https://github.com/PowerShell/xWordPress/blob/master/LICENSE
ProjectUri                 : https://github.com/PowerShell/xWordPress
IconUri                    :
Tags                       : {DesiredStateConfiguration, DSC, DSCResourceKit, PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Module with DSC Resources for configuring WordPress; versionDownloadCount=105239; ItemType=Module; copyright=(c) 2014 Microsoft
                             Corporation. All rights reserved.; PackageManagementProvider=NuGet; SourceName=PSGallery; tags=DesiredStateConfiguration DSC DSCResourceKit
                             PSModule; title=xWordPress; created=9/11/2015 11:28:45 PM +03:00; description=Module with DSC Resources for configuring WordPress;
                             published=9/11/2015 11:28:45 PM +03:00; developmentDependency=False; NormalizedVersion=1.1.0; downloadCount=105726; lastUpdated=8/2/2020
                             4:09:04 AM +03:00; Authors=Microsoft Corporation; updated=2020-08-02T04:09:04Z; isLatestVersion=True; IsPrerelease=false;
                             isAbsoluteLatestVersion=True; packageSize=39835; DscResources=xWordPressSite; FileList=xWordPress.nuspec|appveyor.yml|LICENSE|README.md|xWor
                             dPress.psd1|DscResources\MSFT_xWordPressSite\MSFT_xWordPressSite.psm1|DscResources\MSFT_xWordPressSite\MSFT_xWordPressSite.schema.mof|DscRes
                             ources\MSFT_xWordPressSite\xWordPressSite.ps1|DscResources\xIisWordPressSite\xIisWordPressSite.psd1|DscResources\xIisWordPressSite\xIisWordP
                             ressSite.Schema.psm1|samples\InstallRequiredModules.ps1|samples\PhpConfigTemplate.txt|samples\SingleNodeEndToEndWordPress.ps1|samples\WordPr
                             essConfigurationTemplate.ps1; requireLicenseAcceptance=True}


Name                       : WordDoc
Version                    : 1.2.3
Type                       : Module
Description                : Generate Word Documents directly from PowerShell, visit project site https://shanehoey.github.io/worddoc/ for more details
Author                     : Shane Hoey
CompanyName                : shanehoey
Copyright                  : (c) 2016-2018 Shane Hoey. All rights reserved.
PublishedDate              : 5/1/2019 12:38:12 AM
InstalledDate              :
UpdatedDate                :
LicenseUri                 : https://shanehoey.github.io/worddoc/license/
ProjectUri                 : https://shanehoey.github.io/worddoc/
IconUri                    :
Tags                       : {MicrosoftOffice, MicrosoftWord, Word, Office...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               : https://shanehoey.github.io/worddoc/history/
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Generate Word Documents directly from PowerShell, visit project site https://shanehoey.github.io/worddoc/ for more details;
                             downloadCount=2071; created=5/1/2019 12:38:12 AM +03:00; description=Generate Word Documents directly from PowerShell, visit project site
                             https://shanehoey.github.io/worddoc/ for more details; copyright=(c) 2016-2018 Shane Hoey. All rights reserved.;
                             FileList=WordDoc.nuspec|LICENSE.txt|WordDoc.psd1|WordDoc.psm1; lastUpdated=8/2/2020 8:54:30 PM +03:00; published=5/1/2019 12:38:12 AM
                             +03:00; tags=MicrosoftOffice MicrosoftWord Word Office Documents Documentation PSModule;
                             releaseNotes=https://shanehoey.github.io/worddoc/history/; Authors=Shane Hoey; ItemType=Module; PackageManagementProvider=NuGet;
                             versionDownloadCount=745; updated=2020-08-02T20:54:30Z; CompanyName=Unknown; developmentDependency=False; NormalizedVersion=1.2.3;
                             PowerShellVersion=4.0; title=WordDoc; GUID=b21f8cdc-97a5-4a0a-8f66-26634396f417; isLatestVersion=True; Functions=Add-WordBreak
                             Add-WordCoverPage Add-WordTable Add-WordTemplate Add-WordText Add-WordTOC Add-WordShape Close-WordDocument Close-WordInstance
                             Get-WordDocument Get-WordInstance New-WordDocument New-WordInstance Save-WordDocument Set-WordBuiltInProperty Set-WordOrientation
                             Update-WordTOC; requireLicenseAcceptance=False; isAbsoluteLatestVersion=True; IsPrerelease=false; packageSize=18753; SourceName=PSGallery}


Name                       : GetPassword
Version                    : 1.0.0.0
Type                       : Module
Description                : Generates one or more complex passwords designed to fulfill the requirements for Active Directory.
Author                     : Simon Wåhlin
CompanyName                : PolyakovRoman
Copyright                  : (c) 2016 Simon Wahlin. All rights reserved.
PublishedDate              : 12/16/2016 10:25:56 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 :
IconUri                    :
Tags                       : {ActiveDirectory, Password, PasswordGenerator, PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               : Generates one or more complex passwords designed to fulfill the requirements for Active Directory.
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Generates one or more complex passwords designed to fulfill the requirements for Active Directory.; releaseNotes=Generates one or
                             more complex passwords designed to fulfill the requirements for Active Directory.; versionDownloadCount=11403; ItemType=Module;
                             copyright=(c) 2016 Simon Wahlin. All rights reserved.; PackageManagementProvider=NuGet; CompanyName=Unknown; SourceName=PSGallery;
                             description=Generates one or more complex passwords designed to fulfill the requirements for Active Directory.; title=GetPassword;
                             created=12/16/2016 10:25:56 PM +02:00; published=12/16/2016 10:25:56 PM +02:00; developmentDependency=False; NormalizedVersion=1.0.0;
                             downloadCount=11403; GUID=7097fab8-39e5-4d06-b0b1-3bc92d408eed; lastUpdated=8/3/2020 8:59:49 AM +03:00; Authors=Simon Wåhlin;
                             updated=2020-08-03T08:59:49Z; Functions=Get-Password; isLatestVersion=True; IsPrerelease=false; isAbsoluteLatestVersion=True;
                             packageSize=6678; tags=ActiveDirectory Password PasswordGenerator PSModule; FileList=GetPassword.nuspec|GetPassword.psd1|GetPassword.psm1;
                             requireLicenseAcceptance=False}


Name                       : PasswordState
Version                    : 1.3.0
Type                       : Module
Description                : PowerShell module for interacting with PasswordState API.
Author                     : Brandon Olin
CompanyName                : devblackops
Copyright                  : (c) 2015 Brandon Olin. All rights reserved.
PublishedDate              : 3/22/2018 4:20:03 AM
InstalledDate              :
UpdatedDate                :
LicenseUri                 : https://raw.githubusercontent.com/devblackops/PasswordState/master/LICENSE
ProjectUri                 : https://github.com/devblackops/PasswordState
IconUri                    :
Tags                       : {PasswordState, Credential, Secret, PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               : https://raw.githubusercontent.com/devblackops/PasswordState/master/CHANGELOG.md
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=PowerShell module for interacting with PasswordState API.;
                             releaseNotes=https://raw.githubusercontent.com/devblackops/PasswordState/master/CHANGELOG.md; versionDownloadCount=2334; ItemType=Module;
                             copyright=(c) 2015 Brandon Olin. All rights reserved.; PackageManagementProvider=NuGet; SourceName=PSGallery; description=PowerShell module
                             for interacting with PasswordState API.; title=PasswordState; created=3/22/2018 4:20:03 AM +02:00; published=3/22/2018 4:20:03 AM +02:00;
                             developmentDependency=False; NormalizedVersion=1.3.0; downloadCount=7052; GUID=659695ad-f4eb-4ca4-8359-ae3cf74fe875; lastUpdated=8/3/2020
                             3:54:40 AM +03:00; Authors=Brandon Olin; updated=2020-08-03T03:54:40Z; Functions=Export-PasswordStateApiKey Find-PasswordStatePassword
                             Get-PasswordStateAllLists Get-PasswordStateAllPasswords Get-PasswordStateApiKey Get-PasswordStateList Get-PasswordStateListPasswords
                             Get-PasswordStatePassword Get-PasswordStatePasswordHistory Import-PasswordStateApiKey Initialize-PasswordStateRepository
                             New-PasswordStatePassword New-PasswordStateRandomPassword Set-PasswordStatePassword Set-PasswordStateDocument; isLatestVersion=True;
                             PowerShellVersion=3.0; IsPrerelease=false; isAbsoluteLatestVersion=True; packageSize=37582; tags=PasswordState Credential Secret PSModule; F
                             ileList=PasswordState.nuspec|PasswordState.psd1|PasswordState.psm1|en-US\about_PasswordState.help.txt|en-US\PasswordState-help.xml|Private\_
                             GetDefault.ps1|Private\_SetCertPolicy.ps1|Public\Export-PasswordStateApiKey.ps1|Public\Find-PasswordStatePassword.ps1|Public\Get-PasswordSta
                             teAllLists.ps1|Public\Get-PasswordStateAllPasswords.ps1|Public\Get-PasswordStateApiKey.ps1|Public\Get-PasswordStateList.ps1|Public\Get-Passw
                             ordStateListPasswords.ps1|Public\Get-PasswordStatePassword.ps1|Public\Get-PasswordStatePasswordHistory.ps1|Public\Import-PasswordStateApiKey
                             .ps1|Public\Initialize-PasswordStateRepository.ps1|Public\New-PasswordStatePassword.ps1|Public\New-PasswordStateRandomPassword.ps1|Public\Se
                             t-PasswordStateDocument.ps1|Public\Set-PasswordStatePassword.ps1; requireLicenseAcceptance=False}


Name                       : PSWord
Version                    : 0.6
Type                       : Module
Description                : This module was created to automate the creation and manipulation of Word Documents.
Author                     : Guido Oliveira
CompanyName                : guido.oliveira
Copyright                  : (c) 2015 Guido Oliveira. All rights reserved.
PublishedDate              : 7/10/2016 8:53:27 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 : https://github.com/guidooliveira/PSWord
IconUri                    : https://raw.githubusercontent.com/guidooliveira/PSWord/master/PSWord/PSWORD.png
Tags                       : {PSWord, MSWord, Module, Word...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               : Early release
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=This module was created to automate the creation and manipulation of Word Documents.; downloadCount=4694; created=7/10/2016
                             8:53:27 PM +03:00; description=This module was created to automate the creation and manipulation of Word Documents.; copyright=(c) 2015
                             Guido Oliveira. All rights reserved.; FileList=PSWord.nuspec|DocX.dll|PSWord.dll|PSWord.psd1|en-US\PSWord.dll-Help.xml;
                             lastUpdated=8/3/2020 8:49:48 AM +03:00; published=7/10/2016 8:53:27 PM +03:00; tags=PSWord MSWord Module Word PSModule; releaseNotes=Early
                             release; Authors=Guido Oliveira; ItemType=Module; PackageManagementProvider=NuGet; versionDownloadCount=4388; updated=2020-08-03T08:49:48Z;
                             CompanyName=GuidoOliveira.com; developmentDependency=False; NormalizedVersion=0.6.0; title=PSWord;
                             GUID=ece9d2dd-76d1-43ef-b963-0d5791211c7f; isLatestVersion=True; requireLicenseAcceptance=False; isAbsoluteLatestVersion=True;
                             IsPrerelease=false; packageSize=126311; DotNetFrameworkVersion=4.5; Cmdlets=Add-WordList Add-WordPicture Add-WordTable
                             Add-WordTableofContents Add-WordText Get-WordDocument Get-WordParagraph Get-WordTable New-WordList Protect-WordDocument Set-WordListItem
                             Update-WordText; SourceName=PSGallery}


Name                       : Gainz-PasswordGenerator
Version                    : 0.1.3
Type                       : Module
Description                : Gainz - Password Generator Module

                             Deprecated: Renaming to Gz-PasswordGenerator

                             Provides a new cryptographically generated password. By default, this function
                             will return an array of characters since strings are immutable.

                             $pw = New-Password -Length 16 -AsSecureString

                             PARAMETERS

                             Chars - Optional. An string of characters to use to build the password.

                             CharSets -  Optional. An array of choices that leverages a group of characters to use to build
                             the password. The default is "LatinAlphaUpperCase", "LatinAlphaLowerCase", "Digits", "SpecialHybrid"

                             Length - Optional. The length of the password that is generated. The default is 16

                             Validate - Optional. A script block that validates the password to ensure it meets
                             standards. The default checks for one uppercase, one lowercase, one digit,
                             one special character.

                             AsSecureString - A flag that instructs the result to be returned as a SecureString.

                             AsString - A flag that instructs the result to be returned as a string.
Author                     : Nerdy Mishka Michael Herndon
CompanyName                : NerdyMishka
Copyright                  : (c) 2018-2019 Nerdy Mishka. All rights reserved.
PublishedDate              : 3/17/2019 12:32:07 AM
InstalledDate              :
UpdatedDate                :
LicenseUri                 : https://www.apache.org/licenses/LICENSE-2.0
ProjectUri                 : https://gitlab.com/nerdymishka/gainz/tree/master/powershell/Gz-PasswordGenerator
IconUri                    : https://gitlab.com/nerdymishka/NerdMishka/raw/dev/resources/images/logo.png
Tags                       : {Password, Generator, Password-Generator, DevOps...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               : 0.1.3 - Renaming to Gz-PasswordGenerator
                             0.1.0 - Early Release

                             A future release should allow entropy and generating passwords by supplying a pattern.
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Gainz - Password Generator Module

                             Deprecated: Renaming to Gz-PasswordGenerator

                             Provides a new cryptographically generated password. By default, this function
                             will return an array of characters since strings are immutable.

                             $pw = New-Password -Length 16 -AsSecureString

                             PARAMETERS

                             Chars - Optional. An string of characters to use to build the password.

                             CharSets -  Optional. An array of choices that leverages a group of characters to use to build
                             the password. The default is "LatinAlphaUpperCase", "LatinAlphaLowerCase", "Digits", "SpecialHybrid"

                             Length - Optional. The length of the password that is generated. The default is 16

                             Validate - Optional. A script block that validates the password to ensure it meets
                             standards. The default checks for one uppercase, one lowercase, one digit,
                             one special character.

                             AsSecureString - A flag that instructs the result to be returned as a SecureString.

                             AsString - A flag that instructs the result to be returned as a string.; releaseNotes=0.1.3 - Renaming to Gz-PasswordGenerator
                             0.1.0 - Early Release

                             A future release should allow entropy and generating passwords by supplying a pattern.; versionDownloadCount=1670; ItemType=Module;
                             copyright=(c) 2018-2019 Nerdy Mishka. All rights reserved.; PackageManagementProvider=NuGet; CompanyName=Nerdy Mishka;
                             SourceName=PSGallery; description=Gainz - Password Generator Module

                             Deprecated: Renaming to Gz-PasswordGenerator

                             Provides a new cryptographically generated password. By default, this function
                             will return an array of characters since strings are immutable.

                             $pw = New-Password -Length 16 -AsSecureString

                             PARAMETERS

                             Chars - Optional. An string of characters to use to build the password.

                             CharSets -  Optional. An array of choices that leverages a group of characters to use to build
                             the password. The default is "LatinAlphaUpperCase", "LatinAlphaLowerCase", "Digits", "SpecialHybrid"

                             Length - Optional. The length of the password that is generated. The default is 16

                             Validate - Optional. A script block that validates the password to ensure it meets
                             standards. The default checks for one uppercase, one lowercase, one digit,
                             one special character.

                             AsSecureString - A flag that instructs the result to be returned as a SecureString.

                             AsString - A flag that instructs the result to be returned as a string.; title=Gainz-PasswordGenerator; created=3/17/2019 12:32:07 AM
                             +02:00; published=3/17/2019 12:32:07 AM +02:00; developmentDependency=False; NormalizedVersion=0.1.3; downloadCount=1924;
                             GUID=1b4eec01-dcda-40ac-a940-b83ca4981f8c; lastUpdated=7/31/2020 11:03:21 PM +03:00; Authors=Nerdy Mishka Michael Herndon;
                             updated=2020-07-31T23:03:21Z; Functions=New-Password; isLatestVersion=True; IsPrerelease=false; isAbsoluteLatestVersion=True;
                             packageSize=9130; tags=Password Generator Password-Generator DevOps Gz Gainz NerdyMishka PSModule; FileList=Gainz-PasswordGenerator.nuspec|G
                             ainz-PasswordGenerator.psd1|Gainz-PasswordGenerator.psm1|LICENSE|README.md|public\Merge-PasswordCharsets.ps1|public\New-Password.ps1|public\
                             Test-Password.ps1; requireLicenseAcceptance=False}


Name                       : SCOrchDev-PasswordVault
Version                    : 2.1.1
Type                       : Module
Description                : Used for interacting with Password Vault
Author                     : Ryan Andorfer
CompanyName                : randorfer
Copyright                  : (c) SCOrchDev. All rights reserved.
PublishedDate              : 5/18/2016 12:55:28 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 :
IconUri                    :
Tags                       : {PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {System.Collections.Specialized.OrderedDictionary}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Used for interacting with Password Vault; versionDownloadCount=1299; ItemType=Module; copyright=(c) SCOrchDev. All rights
                             reserved.; PackageManagementProvider=NuGet; CompanyName=SCOrchDev; SourceName=PSGallery; tags=PSModule; title=SCOrchDev-PasswordVault;
                             created=5/18/2016 12:55:28 PM +03:00; description=Used for interacting with Password Vault; published=5/18/2016 12:55:28 PM +03:00;
                             developmentDependency=False; NormalizedVersion=2.1.1; downloadCount=1578; GUID=1ef339ab-57b3-4ea9-bedb-af2780f0e995; lastUpdated=7/30/2020
                             7:07:54 AM +03:00; Authors=Ryan Andorfer; updated=2020-07-30T07:07:54Z; Functions=Get-PasswordVaultCredential Set-PasswordVaultCredential
                             Remove-PasswordVaultCredential; isLatestVersion=True; PowerShellVersion=4.0; IsPrerelease=false; isAbsoluteLatestVersion=True;
                             packageSize=8737; FileList=SCOrchDev-PasswordVault.nuspec|LICENSE|README.md|SCOrchDev-PasswordVault.psd1|SCOrchDev-PasswordVault.psm1|SCOrch
                             Dev-PasswordVault.tests.ps1; requireLicenseAcceptance=False}


Name                       : AzureKeyVaultPasswordRepo
Version                    : 1.0.0
Type                       : Module
Description                : Create and use password repository hosted on Azure Key Vault
Author                     : Tao Yang
CompanyName                : tao.yang
Copyright                  : (c) 2017 TY Consulting Pty Ltd. All rights reserved.
PublishedDate              : 3/3/2017 5:44:23 AM
InstalledDate              :
UpdatedDate                :
LicenseUri                 : https://www.gnu.org/licenses/gpl-3.0.txt
ProjectUri                 :
IconUri                    : https://github.com/tyconsulting/AzureKeyVaultPasswordRepo-PSModule/raw/master/ModuleIcon.png
Tags                       : {Azure, AzureKeyVault, PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {System.Collections.Specialized.OrderedDictionary, System.Collections.Specialized.OrderedDictionary,
                             System.Collections.Specialized.OrderedDictionary}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Create and use password repository hosted on Azure Key Vault; downloadCount=1406; lastUpdated=8/1/2020 1:03:41 PM +03:00;
                             created=3/3/2017 5:44:23 AM +02:00; description=Create and use password repository hosted on Azure Key Vault; copyright=(c) 2017 TY
                             Consulting Pty Ltd. All rights reserved.; FileList=AzureKeyVaultPasswordRepo.nuspec|AzureKeyVaultPasswordRepo.psd1|AzureKeyVaultPasswordRepo
                             .psm1|en\AzureKeyVaultPasswordRepo.psm1-Help.xml; PowerShellHostVersion=3.0; published=3/3/2017 5:44:23 AM +02:00; tags=Azure AzureKeyVault
                             PSModule; Authors=Tao Yang; ItemType=Module; PackageManagementProvider=NuGet; versionDownloadCount=1406; updated=2020-08-01T13:03:41Z;
                             CompanyName=TY Consulting Pty Ltd; developmentDependency=False; NormalizedVersion=1.0.0; PowerShellVersion=3.0;
                             title=AzureKeyVaultPasswordRepo; GUID=d2fa6fd4-16a2-4206-a5bf-9eed8a494519; isLatestVersion=True;
                             Functions=Invoke-AzureKeyVaultPasswordRepository; requireLicenseAcceptance=True; isAbsoluteLatestVersion=True; IsPrerelease=false;
                             packageSize=12810; SourceName=PSGallery}


Name                       : PasswordsGenerator
Version                    : 1.0.0.0
Type                       : Module
Description                : Password Gernerator
Author                     : Michal Gajda
CompanyName                : MichalGajda
Copyright                  : (c) 2014 Michal Gajda. All rights reserved.
PublishedDate              : 9/1/2015 4:35:17 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 :
IconUri                    :
Tags                       : {PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Password Gernerator; versionDownloadCount=1392; ItemType=Module; copyright=(c) 2014 Michal Gajda. All rights reserved.;
                             PackageManagementProvider=NuGet; SourceName=PSGallery; tags=PSModule; title=PasswordsGenerator; created=9/1/2015 4:35:17 PM +03:00;
                             description=Password Gernerator; published=9/1/2015 4:35:17 PM +03:00; developmentDependency=False; NormalizedVersion=1.0.0;
                             downloadCount=1392; lastUpdated=7/30/2020 9:57:26 AM +03:00; Authors=Michal Gajda; updated=2020-07-30T09:57:26Z; Functions=New-Password;
                             isLatestVersion=True; IsPrerelease=false; isAbsoluteLatestVersion=True; packageSize=5280;
                             FileList=PasswordsGenerator.nuspec|New-Password.ps1|PasswordsGenerator.psd1|PasswordsGenerator.psm1; requireLicenseAcceptance=False}


Name                       : SharePoint.Password.Manager
Version                    : 1.2.0
Type                       : Module
Description                : Update SharePoint service account password and Workflow service account password
Author                     : Riwut Libinuko
CompanyName                : cakriwut
Copyright                  : (c) 2018 Riwut Libinuko (cakriwut@gmail.com). All rights reserved.
PublishedDate              : 3/11/2018 11:20:55 AM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 : https://github.com/cakriwut
IconUri                    : https://avatars0.githubusercontent.com/u/15277525?v=3&s=200
Tags                       : {SharePoint, Management, Tools, PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Update SharePoint service account password and Workflow service account password; versionDownloadCount=1134; ItemType=Module;
                             copyright=(c) 2018 Riwut Libinuko (cakriwut@gmail.com). All rights reserved.; PackageManagementProvider=NuGet; CompanyName=ItsZap Inc.;
                             SourceName=PSGallery; tags=SharePoint Management Tools PSModule; title=SharePoint.Password.Manager; created=3/11/2018 11:20:55 AM +02:00;
                             description=Update SharePoint service account password and Workflow service account password; published=3/11/2018 11:20:55 AM +02:00;
                             developmentDependency=False; NormalizedVersion=1.2.0; downloadCount=1143; GUID=ef1f317e-e202-437d-995a-965fca9abdac; lastUpdated=8/1/2020
                             3:18:45 PM +03:00; Authors=Riwut Libinuko; updated=2020-08-01T15:18:45Z; Functions=Change-SPServicePassword Change-SPWorkflowPassword;
                             isLatestVersion=True; PowerShellVersion=3.0; IsPrerelease=false; isAbsoluteLatestVersion=True; packageSize=8011;
                             FileList=SharePoint.Password.Manager.nuspec|ServicePassword_Sample.csv|SharePoint.Password.Manager.psd1|SharePoint.Password.Manager.psm1;
                             requireLicenseAcceptance=False}


Name                       : PSWordCloud
Version                    : 3.2.1
Type                       : Module
Description                : Turn your scripts and documents into pretty and practical word clouds!
Author                     : Joel Sallow
CompanyName                : ta11ow
Copyright                  : (c) 2019 Joel Sallow (/u/ta11ow, @vexx32). All rights reserved.
PublishedDate              : 3/23/2020 4:18:53 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 : https://github.com/vexx32/PSWordCloud/blob/master/LICENSE
ProjectUri                 : https://github.com/vexx32/PSWordCloud
IconUri                    :
Tags                       : {Graphic, Art, wordcloud, generator...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Turn your scripts and documents into pretty and practical word clouds!; versionDownloadCount=168; ItemType=Module; copyright=(c)
                             2019 Joel Sallow (/u/ta11ow, @vexx32). All rights reserved.; PackageManagementProvider=NuGet; CompanyName=None; SourceName=PSGallery;
                             tags=Graphic Art wordcloud generator image Skia SkiaSharp Windows MacOS Linux PSModule PSEdition_Desktop PSEdition_Core; title=PSWordCloud;
                             created=3/23/2020 4:18:53 PM +02:00; description=Turn your scripts and documents into pretty and practical word clouds!;
                             published=3/23/2020 4:18:53 PM +02:00; developmentDependency=False; NormalizedVersion=3.2.1; downloadCount=873;
                             GUID=c63b9cfe-cca8-40a6-9002-f19555c036b7; lastUpdated=8/2/2020 3:14:22 PM +03:00; Authors=Joel Sallow; updated=2020-08-02T15:14:22Z;
                             isLatestVersion=True; Cmdlets=New-WordCloud; PowerShellVersion=7.0; IsPrerelease=false; isAbsoluteLatestVersion=True; packageSize=12646884;
                             FileList=PSWordCloud.nuspec|SkiaSharp.dll|PSWordCloud.psd1|PSWordCloudCmdlet.dll|osx-x64\libSkiaSharp.dylib|win-x86\libSkiaSharp.dll|win-x64
                             \libSkiaSharp.dll|linux-x64\libSkiaSharp.so|en-US\PSWordCloudCmdlet.dll-Help.xml; requireLicenseAcceptance=False}


Name                       : RandomPasswordGenerator
Version                    : 1.0.1
Type                       : Module
Description                : PowerShell module to generate one or multiple random passwords.
Author                     : Andrei Lungu
CompanyName                : andreilungu
Copyright                  : (c) 2018 Andrei Lungu. All rights reserved.
PublishedDate              : 7/14/2018 1:25:04 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 :
IconUri                    :
Tags                       : {PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=PowerShell module to generate one or multiple random passwords.; versionDownloadCount=950; ItemType=Module; copyright=(c) 2018
                             Andrei Lungu. All rights reserved.; PackageManagementProvider=NuGet; SourceName=PSGallery; tags=PSModule; title=RandomPasswordGenerator;
                             created=7/14/2018 1:25:04 PM +03:00; description=PowerShell module to generate one or multiple random passwords.; published=7/14/2018
                             1:25:04 PM +03:00; developmentDependency=False; NormalizedVersion=1.0.1; downloadCount=954; GUID=5091b26b-ccf6-4abd-8762-9f81c7c8cc71;
                             lastUpdated=7/31/2020 10:13:02 AM +03:00; Authors=Andrei Lungu; updated=2020-07-31T10:13:02Z; Functions=Get-RandomPassword;
                             isLatestVersion=True; PowerShellVersion=5.1; IsPrerelease=false; isAbsoluteLatestVersion=True; packageSize=7602; FileList=RandomPasswordGene
                             rator.nuspec|RandomPasswordGenerator.psd1|RandomPasswordGenerator.psm1|en-US\about_RandomPasswordGenerator.help.txt;
                             requireLicenseAcceptance=False}


Name                       : passwordstate-management
Version                    : 4.4.24
Type                       : Module
Description                : Powershell Module for managing Password State
Author                     : Daryl Newsholme
CompanyName                : dnewsholme
Copyright                  : (c) 2020 Daryl Newsholme. All rights reserved.
PublishedDate              : 7/6/2020 2:08:19 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 : https://github.com/dnewsholme/PasswordState-Management
IconUri                    : https://github.com/dnewsholme/PasswordState-Management/blob/master/images/passwordstate.png?raw=true
Tags                       : {PasswordState, Password, Management, PSEdition_Desktop...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               : + Added functions for setting the return of plain text password preference.
Dependencies               : {System.Collections.Specialized.OrderedDictionary}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Powershell Module for managing Password State; releaseNotes=+ Added functions for setting the return of plain text password
                             preference.; versionDownloadCount=26; ItemType=Module; copyright=(c) 2020 Daryl Newsholme. All rights reserved.;
                             PackageManagementProvider=NuGet; CompanyName=Unknown; SourceName=PSGallery; description=Powershell Module for managing Password State;
                             title=passwordstate-management; created=7/6/2020 2:08:19 PM +03:00; published=7/6/2020 2:08:19 PM +03:00; developmentDependency=False;
                             NormalizedVersion=4.4.24; downloadCount=820; GUID=752125dd-c0e4-4f87-bad9-dd7dc9b45b58; lastUpdated=8/1/2020 7:23:34 AM +03:00;
                             Authors=Daryl Newsholme; updated=2020-08-01T07:23:34Z; Functions=Get-PasswordStateEnvironment Get-PasswordStateFolder Get-PasswordStateHost
                             Get-PasswordStateList Get-PasswordStatePassword Get-PasswordStatePasswordHistory Get-PasswordStatePermission Invoke-PasswordStateReport
                             New-PasswordStateADSecurityGroup New-PasswordStateDependency New-PasswordStateDocument New-PasswordStateFolder
                             New-PasswordStateFolderPermission New-PasswordStateHost New-PasswordStateList New-PasswordStateListPermission New-PasswordStatePassword
                             New-PasswordStatePasswordPermission New-PasswordStateSelfDestructMessage New-RandomPassword Remove-PasswordStateFolderPermission
                             Remove-PasswordStateHost Remove-PasswordStateListPermission Remove-PasswordStatePassword Remove-PasswordStatePasswordPermission
                             Save-PasswordStateDocument Set-PasswordStateEnvironment Set-PasswordStateFolderPermission Set-PasswordStateListPermission
                             Set-PasswordStatePassword Set-PasswordStatePasswordPermission Test-PasswordPwned; isLatestVersion=True; IsPrerelease=false;
                             isAbsoluteLatestVersion=True; packageSize=278615; tags=PasswordState Password Management PSEdition_Desktop PSEdition_Core Windows Linux
                             MacOS PSModule; FileList=passwordstate-management.nuspec|passwordstate-management.psd1|passwordstate-management.psm1|bin\readme.md|docs\Get-
                             PasswordStateEnvironment.md|docs\Get-PasswordStateFolder.md|docs\Get-PasswordStateHost.md|docs\Get-PasswordStateList.md|docs\Get-PasswordSta
                             tePassword.md|docs\Get-PasswordStatePasswordHistory.md|docs\Get-PasswordStatePermission.md|docs\Invoke-PasswordStateReport.md|docs\New-Passw
                             ordStateADSecurityGroup.md|docs\New-PasswordStateDependency.md|docs\New-PasswordStateDocument.md|docs\New-PasswordStateFolder.md|docs\New-Pa
                             sswordStateFolderPermission.md|docs\New-PasswordStateHost.md|docs\New-PasswordStateList.md|docs\New-PasswordStateListPermission.md|docs\New-
                             PasswordStatePassword.md|docs\New-PasswordStatePasswordPermission.md|docs\New-PasswordStateSelfDestructMessage.md|docs\New-RandomPassword.md
                             |docs\Remove-PasswordStateFolderPermission.md|docs\Remove-PasswordStateHost.md|docs\Remove-PasswordStateListPermission.md|docs\Remove-Passwo
                             rdStatePassword.md|docs\Remove-PasswordStatePasswordPermission.md|docs\Save-PasswordStateDocument.md|docs\Set-PasswordStateEnvironment.md|do
                             cs\Set-PasswordStateFolderPermission.md|docs\Set-PasswordStateListPermission.md|docs\Set-PasswordStatePassword.md|docs\Set-PasswordStatePass
                             wordPermission.md|docs\Test-PasswordPwned.md|docs\res\passwordstate_reports.png|en-us\about_Passwordstate_management.help.txt|en-us\about_pa
                             sswordstate_management.md|en-us\passwordstate-management-help.xml|en-us\strings.psd1|functions\Get-PasswordStateEnvironment.ps1|functions\Ge
                             t-PasswordStateFolder.ps1|functions\Get-PasswordStateHost.ps1|functions\Get-PasswordStateList.ps1|functions\Get-PasswordStatePassword.ps1|fu
                             nctions\Get-PasswordStatePasswordHistory.ps1|functions\Get-PasswordStatePermission.ps1|functions\Invoke-PasswordStateReport.ps1|functions\Ne
                             w-PasswordStateADSecurityGroup.ps1|functions\New-PasswordStateDependency.ps1|functions\New-PasswordStateDocument.ps1|functions\New-PasswordS
                             tateFolder.ps1|functions\New-PasswordStateFolderPermission.ps1|functions\New-PasswordStateHost.ps1|functions\New-PasswordStateList.ps1|funct
                             ions\New-PasswordStateListPermission.ps1|functions\New-PasswordStatePassword.ps1|functions\New-PasswordStatePasswordPermission.ps1|functions
                             \New-PasswordStateSelfDestructMessage.ps1|functions\New-RandomPassword.ps1|functions\readme.md|functions\Remove-PasswordStateFolderPermissio
                             n.ps1|functions\Remove-PasswordStateHost.ps1|functions\Remove-PasswordStateListPermission.ps1|functions\Remove-PasswordStatePassword.ps1|fun
                             ctions\Remove-PasswordStatePasswordPermission.ps1|functions\Save-PasswordStateDocument.ps1|functions\Set-PasswordStateEnvironment.ps1|functi
                             ons\Set-PasswordStateFolderPermission.ps1|functions\Set-PasswordStateListPermission.ps1|functions\Set-PasswordStatePassword.ps1|functions\Se
                             t-PasswordStatePasswordPermission.ps1|functions\Test-PasswordPwned.ps1|internal\configurations\configuration.ps1|internal\configurations\rea
                             dme.md|internal\functions\Get-NativePath.ps1|internal\functions\Get-PasswordStateResource.ps1|internal\functions\Get-PSCustomObject.ps1|inte
                             rnal\functions\Get-StringHash.ps1|internal\functions\New-PasswordStateResource.ps1|internal\functions\PasswordStateClass.ps1|internal\functi
                             ons\readme.md|internal\functions\Remove-DiacriticsFromString.ps1|internal\functions\Remove-PasswordStateResource.ps1|internal\functions\Set-
                             PasswordStateResource.ps1|internal\scriptblocks\scriptblocks.ps1|internal\scripts\license.ps1|internal\scripts\postimport.ps1|internal\scrip
                             ts\preimport.ps1|internal\scripts\strings.ps1|internal\tepp\assignment.ps1|internal\tepp\example.tepp.ps1|internal\tepp\readme.md;
                             requireLicenseAcceptance=False}


Name                       : DicewarePassword
Version                    : 1.1.0.0
Type                       : Module
Description                : This module is inspired by the 'Diceware Passphrase' principals detailed by Arnold G. Reinhold. It simulates the rolling of dice and
                             generates more secure passwords that are easier to remember. Diceware is a trademark of A G Reinhold. See http://www.diceware.com for more
                             information about Diceware.
Author                     : Kevin Kirkpatrick
CompanyName                : vScripter
Copyright                  : (c) 2017 Kevin Kirkpatrick. All rights reserved.
PublishedDate              : 5/11/2017 3:41:50 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 : https://github.com/vScripter/DicewarePassword/blob/master/LICENSE.md
ProjectUri                 : https://github.com/vScripter/DicewarePassword
IconUri                    :
Tags                       : {Diceware, Password, Passwords, passphrase...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               : v1.1.0.0 Release Notes
                             * Updated to use cryptographic RNG
                             * Diceware wordlist is now included in the module, instead of fetching via REST call
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=This module is inspired by the 'Diceware Passphrase' principals detailed by Arnold G. Reinhold. It simulates the rolling of dice
                             and generates more secure passwords that are easier to remember. Diceware is a trademark of A G Reinhold. See http://www.diceware.com for
                             more information about Diceware.; downloadCount=732; created=5/11/2017 3:41:50 PM +03:00; description=This module is inspired by the
                             'Diceware Passphrase' principals detailed by Arnold G. Reinhold. It simulates the rolling of dice and generates more secure passwords that
                             are easier to remember. Diceware is a trademark of A G Reinhold. See http://www.diceware.com for more information about Diceware.;
                             copyright=(c) 2017 Kevin Kirkpatrick. All rights reserved.;
                             FileList=DicewarePassword.nuspec|DicewarePassword.psd1|DicewarePassword.psm1|Inputs\dicewareWordList.json; lastUpdated=7/25/2020 3:24:23 AM
                             +03:00; published=5/11/2017 3:41:50 PM +03:00; tags=Diceware Password Passwords passphrase PSModule; releaseNotes=v1.1.0.0 Release Notes
                             * Updated to use cryptographic RNG
                             * Diceware wordlist is now included in the module, instead of fetching via REST call; Authors=Kevin Kirkpatrick; ItemType=Module;
                             PackageManagementProvider=NuGet; versionDownloadCount=390; updated=2020-07-25T03:24:23Z; CompanyName=https://github.com/vScripter;
                             developmentDependency=False; lastEdited=5/11/2017 3:44:17 PM +03:00; NormalizedVersion=1.1.0; PowerShellVersion=3.0;
                             title=DicewarePassword; GUID=9a7af7ca-7036-43b1-aef0-5c1833f0a1f4; isLatestVersion=True; Functions=Invoke-DiceRoll New-DicewarePassword;
                             requireLicenseAcceptance=True; isAbsoluteLatestVersion=True; IsPrerelease=false; packageSize=56736; ProcessorArchitecture=None;
                             SourceName=PSGallery}


Name                       : PSPasswordExpiryNotifications
Version                    : 1.6.4
Type                       : Module
Description                : This module allows creation of password expiry emails for users, managers and administrators according to defined template.
Author                     : Przemyslaw Klys
CompanyName                : Przemyslaw.Klys
Copyright                  : (c) 2011 - 2019 Przemyslaw Klys. All rights reserved.
PublishedDate              : 2/17/2020 7:26:20 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 : https://github.com/EvotecIT/PSPasswordExpiryNotifications
IconUri                    : https://evotec.xyz/wp-content/uploads/2018/11/PSPasswordExpiryNotifications-Alternative.png
Tags                       : {password, passwordexpiry, activedirectory, windows...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=This module allows creation of password expiry emails for users, managers and administrators according to defined template.;
                             versionDownloadCount=123; ItemType=Module; copyright=(c) 2011 - 2019 Przemyslaw Klys. All rights reserved.;
                             PackageManagementProvider=NuGet; CompanyName=Evotec; SourceName=PSGallery; tags=password passwordexpiry activedirectory windows PSModule
                             PSEdition_Desktop PSEdition_Core; title=PSPasswordExpiryNotifications; created=2/17/2020 7:26:20 PM +02:00; description=This module allows
                             creation of password expiry emails for users, managers and administrators according to defined template.; published=2/17/2020 7:26:20 PM
                             +02:00; developmentDependency=False; NormalizedVersion=1.6.4; downloadCount=684; GUID=25ad8288-996d-446c-9109-c48ceda61d9c;
                             lastUpdated=8/1/2020 10:43:56 PM +03:00; Authors=Przemyslaw Klys; updated=2020-08-01T22:43:56Z; Functions=Find-PasswordExpiryCheck
                             Start-PasswordExpiryCheck; isLatestVersion=True; PowerShellVersion=5.1; IsPrerelease=false; isAbsoluteLatestVersion=True;
                             packageSize=15493; FileList=PSPasswordExpiryNotifications.nuspec|PSPasswordExpiryNotifications.psd1|PSPasswordExpiryNotifications.psm1;
                             requireLicenseAcceptance=False}


Name                       : GeneratePassword
Version                    : 1.0.0.4
Type                       : Module
Description                : This gives you the ability to generate complex, but memorable passwords. As opposed to just random letters and numbers.
Author                     : Rhy M
CompanyName                : RhysM
Copyright                  : (C) 2018. All Rights Reserved.
PublishedDate              : 9/16/2018 10:41:49 AM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 :
IconUri                    :
Tags                       : {Password, Generate, Encrypt, Encode...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=This gives you the ability to generate complex, but memorable passwords. As opposed to just random letters and numbers.;
                             downloadCount=669; created=9/16/2018 10:41:49 AM +03:00; description=This gives you the ability to generate complex, but memorable
                             passwords. As opposed to just random letters and numbers.; copyright=(C) 2018. All Rights Reserved.;
                             FileList=GeneratePassword.nuspec|GeneratePassword.psd1|GeneratePassword.psm1; lastUpdated=7/30/2020 10:52:28 AM +03:00;
                             SourceName=PSGallery; published=9/16/2018 10:41:49 AM +03:00; tags=Password Generate Encrypt Encode String Complex Remember Random
                             PSModule; Authors=Rhy M; ItemType=Module; PackageManagementProvider=NuGet; versionDownloadCount=620; updated=2020-07-30T10:52:28Z;
                             developmentDependency=False; NormalizedVersion=1.0.0.4; PowerShellVersion=3.0; title=GeneratePassword;
                             GUID=9457e32a-8f4e-4099-9cac-34700078bd30; isLatestVersion=True; Functions=GeneratePassword; requireLicenseAcceptance=False;
                             isAbsoluteLatestVersion=True; IsPrerelease=false; packageSize=65875; CLRVersion=2.0.50727; ProcessorArchitecture=None;
                             DotNetFrameworkVersion=2.0}


Name                       : 1Poshword
Version                    : 1.0.0
Type                       : Module
Description                : PowerShell client for the 1Password password manager
Author                     : Lincoln Atkinson
CompanyName                : latkin
Copyright                  : Lincoln Atkinson, 2016
PublishedDate              : 9/13/2016 8:50:56 AM
InstalledDate              :
UpdatedDate                :
LicenseUri                 : https://raw.githubusercontent.com/latkin/1poshword/master/LICENSE
ProjectUri                 : https://github.com/latkin/1poshword
IconUri                    :
Tags                       : {1Poshword, 1Password, password, cryptography...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               : Initial release
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=PowerShell client for the 1Password password manager; releaseNotes=Initial release; versionDownloadCount=745; ItemType=Module;
                             copyright=Lincoln Atkinson, 2016; PackageManagementProvider=NuGet; SourceName=PSGallery; description=PowerShell client for the 1Password
                             password manager; title=1Poshword; created=9/13/2016 8:50:56 AM +03:00; published=9/13/2016 8:50:56 AM +03:00; developmentDependency=False;
                             NormalizedVersion=1.0.0; downloadCount=745; GUID=36a94a72-beaf-431f-aaaf-b102b1e37f8a; lastUpdated=7/25/2020 3:10:14 AM +03:00;
                             Authors=Lincoln Atkinson; updated=2020-07-25T03:10:14Z; Functions=Get-1PDefaultVaultPath Set-1PDefaultVaultPath Get-1PEntry
                             Unprotect-1PEntry; isLatestVersion=True; PowerShellVersion=4.0; IsPrerelease=false; isAbsoluteLatestVersion=True; packageSize=13542;
                             tags=1Poshword 1Password password cryptography crypto PSModule; FileList=1Poshword.nuspec|1Poshword.psd1|1Poshword.psm1|lib.ps1|pbkdf2.cs;
                             requireLicenseAcceptance=True}


Name                       : WordPressCmdlets
Version                    : 20.0.7503.0
Type                       : Module
Description                : CData Cmdlets for WordPress
Author                     : CData Software Inc.
CompanyName                : CData
Copyright                  : Copyright (c) 2020 CData Software, Inc. - All rights reserved.
PublishedDate              : 7/27/2020 4:05:06 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 : http://www.cdata.com/company/legal/terms.aspx
ProjectUri                 : http://www.cdata.com/powershell/
IconUri                    : http://www.cdata.com/powershell/img/psgallery_icon.png
Tags                       : {CData, Cmdlets, WordPress, PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=CData Cmdlets for WordPress; downloadCount=55; created=7/27/2020 4:05:06 PM +03:00; description=CData Cmdlets for WordPress;
                             copyright=Copyright (c) 2020 CData Software, Inc. - All rights reserved.; FileList=WordPressCmdlets.nuspec|20-0-7503.bld|CData.WordPressCmdl
                             ets.Commands.dll|CData.WordPressCmdlets.Commands.dll-help.xml|license.txt|setup.inf|WordPressCmdlets.psd1; lastUpdated=8/3/2020 1:54:36 AM
                             +03:00; published=7/27/2020 4:05:06 PM +03:00; tags=CData Cmdlets WordPress PSModule; Authors=CData Software Inc.; ItemType=Module;
                             PackageManagementProvider=NuGet; versionDownloadCount=3; updated=2020-08-03T01:54:36Z; CompanyName=CData Software, Inc.;
                             developmentDependency=False; NormalizedVersion=20.0.7503; PowerShellVersion=2.0; title=WordPressCmdlets;
                             GUID=1623641f-f818-4744-b800-14a244343b6c; isLatestVersion=True; requireLicenseAcceptance=False; isAbsoluteLatestVersion=True;
                             IsPrerelease=false; packageSize=2285086; CLRVersion=2.0; Cmdlets=Connect-Wordpress Disconnect-Wordpress Invoke-Wordpress Select-Wordpress
                             Add-Wordpress Update-Wordpress Remove-Wordpress Sync-Wordpress Get-License; SourceName=PSGallery}


Name                       : GoogleAdWordsCmdlets
Version                    : 18.0.6817.0
Type                       : Module
Description                : CData Cmdlets for Google AdWords
Author                     : CData Software Inc.
CompanyName                : CData
Copyright                  : Copyright (c) 2018 CData Software, Inc. - All rights reserved.
PublishedDate              : 9/7/2018 1:42:16 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 : http://www.cdata.com/company/legal/terms.aspx
ProjectUri                 : http://www.cdata.com/powershell/
IconUri                    : http://www.cdata.com/powershell/img/psgallery_icon.png
Tags                       : {CData, Cmdlets, Google, AdWords...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=CData Cmdlets for Google AdWords; downloadCount=417; created=9/7/2018 1:42:16 PM +03:00; description=CData Cmdlets for Google
                             AdWords; copyright=Copyright (c) 2018 CData Software, Inc. - All rights reserved.; FileList=GoogleAdWordsCmdlets.nuspec|18-0-6817.bld|CData.
                             GoogleAdWordsCmdlets.Commands.dll|CData.GoogleAdWordsCmdlets.Commands.dll-help.xml|GoogleAdWordsCmdlets.psd1|license.txt|setup.inf;
                             lastUpdated=7/31/2020 4:58:11 PM +03:00; published=9/7/2018 1:42:16 PM +03:00; tags=CData Cmdlets Google AdWords PSModule; Authors=CData
                             Software Inc.; ItemType=Module; PackageManagementProvider=NuGet; versionDownloadCount=72; updated=2020-07-31T16:58:11Z; CompanyName=CData
                             Software, Inc.; developmentDependency=False; NormalizedVersion=18.0.6817; PowerShellVersion=2.0; title=GoogleAdWordsCmdlets;
                             GUID=1426441f-f818-4744-b800-14a244343b6c; isLatestVersion=True; requireLicenseAcceptance=True; isAbsoluteLatestVersion=True;
                             IsPrerelease=false; packageSize=2052451; CLRVersion=2.0; Cmdlets=Connect-GAdWords Disconnect-GAdWords Invoke-GAdWords Select-GAdWords
                             Add-GAdWords Update-GAdWords Remove-GAdWords Sync-GAdWords Get-License; SourceName=PSGallery}


Name                       : PSWordModule
Version                    : 1.1.0.5
Type                       : Module
Description                : This powershell module is intended to ease the use of Microsoft Word with Powershell
Author                     : Koen Leemans
CompanyName                : KoekeBE
Copyright                  : (c) 2017 Koen Leemans. All rights reserved.
PublishedDate              : 8/8/2017 1:51:01 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 :
IconUri                    :
Tags                       : {PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=This powershell module is intended to ease the use of Microsoft Word with Powershell; versionDownloadCount=400; ItemType=Module;
                             copyright=(c) 2017 Koen Leemans. All rights reserved.; PackageManagementProvider=NuGet; CompanyName=Gamingproject Inc.;
                             SourceName=PSGallery; tags=PSModule; title=PSWordModule; created=8/8/2017 1:51:01 PM +03:00; description=This powershell module is intended
                             to ease the use of Microsoft Word with Powershell; published=8/8/2017 1:51:01 PM +03:00; developmentDependency=False;
                             NormalizedVersion=1.1.0.5; downloadCount=421; GUID=0ce83af7-8f08-4b87-9dc8-e9bc00fe83b5; lastUpdated=7/27/2020 9:45:38 AM +03:00;
                             Authors=Koen Leemans; updated=2020-07-27T09:45:38Z; Functions=New-WordInstance New-WordDocument Save-WordDocument Close-WordDocument
                             Add-WordText Add-WordBreak Set-WordBuiltInProperty Add-WordCoverPage Set-WordOrientation Add-WordTOC Update-WordTOC Add-WordTable
                             Get-WordBuiltinStyle Get-WordWdTableFormat Add-WordTemplate Add-WordPicture; isLatestVersion=True; IsPrerelease=false;
                             isAbsoluteLatestVersion=True; packageSize=9543; FileList=PSWordModule.nuspec|PSWordModule.psd1|PSWordModule.psm1;
                             requireLicenseAcceptance=False}


Name                       : NewPassword
Version                    : 2.0.0
Type                       : Module
Description                : New Password Generator. Can be used to generate passwords for automation process. Or just to generate quick passwords for any needs.
                             You can specify the password length and the number of passwords to generate or output it as secure string.
Author                     : Saggie Haim
CompanyName                : SaggieHaim
Copyright                  : (c) 2019 Saggie Haim. All rights reserved.
PublishedDate              : 9/18/2019 1:28:26 AM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 : https://github.com/Saggiehaim/Powershell/tree/master/New Password
IconUri                    :
Tags                       : {PasswordGenerator, Password, Generator, NewPassword...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               : Add the ability to define number of special characters in password
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=New Password Generator. Can be used to generate passwords for automation process. Or just to generate quick passwords for any
                             needs.
                             You can specify the password length and the number of passwords to generate or output it as secure string.; downloadCount=321;
                             created=9/18/2019 1:28:26 AM +03:00; description=New Password Generator. Can be used to generate passwords for automation process. Or just
                             to generate quick passwords for any needs.
                             You can specify the password length and the number of passwords to generate or output it as secure string.; copyright=(c) 2019 Saggie Haim.
                             All rights reserved.; FileList=NewPassword.nuspec|NewPassword.psd1|NewPassword.psm1; lastUpdated=7/25/2020 4:29:36 PM +03:00;
                             published=9/18/2019 1:28:26 AM +03:00; tags=PasswordGenerator Password Generator NewPassword automation PSModule; releaseNotes=Add the
                             ability to define number of special characters in password; Authors=Saggie Haim; ItemType=Module; PackageManagementProvider=NuGet;
                             versionDownloadCount=89; updated=2020-07-25T16:29:36Z; CompanyName=Saggiehaim.net; developmentDependency=False; NormalizedVersion=2.0.0;
                             PowerShellVersion=3.0; title=NewPassword; GUID=2ed471d9-38b2-4b93-8374-37068de4678e; isLatestVersion=True; Functions=New-Password;
                             requireLicenseAcceptance=False; isAbsoluteLatestVersion=True; IsPrerelease=false; packageSize=5470; SourceName=PSGallery}


Name                       : PasswordPolicyDSC
Version                    : 0.1.4
Type                       : Module
Description                : Composite resource to simplify managing password policies locally on a Windows Server
Author                     : Michael Greene
CompanyName                : migreene
Copyright                  : (c) Michael Greene. All rights reserved.
PublishedDate              : 9/20/2018 4:22:24 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 :
IconUri                    :
Tags                       : {PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Composite resource to simplify managing password policies locally on a Windows Server; versionDownloadCount=358; ItemType=Module;
                             copyright=(c) Michael Greene. All rights reserved.; PackageManagementProvider=NuGet; CompanyName=Unknown; SourceName=PSGallery;
                             tags=PSModule; title=PasswordPolicyDSC; created=9/20/2018 4:22:24 PM +03:00; description=Composite resource to simplify managing password
                             policies locally on a Windows Server; published=9/20/2018 4:22:24 PM +03:00; developmentDependency=False; NormalizedVersion=0.1.4;
                             downloadCount=358; GUID=7c094d7b-3170-4d6c-b4e7-f420be138195; lastUpdated=7/25/2020 3:49:35 PM +03:00; Authors=Michael Greene;
                             updated=2020-07-25T15:49:35Z; isLatestVersion=True; PowerShellVersion=5.0; IsPrerelease=false; isAbsoluteLatestVersion=True;
                             packageSize=1059341; DscResources=PasswordPolicyDsc; FileList=PasswordPolicyDSC.nuspec|appveyor.yml|LICENSE|PasswordPolicyDSC.psd1|PasswordP
                             olicyDsc_0.1.4.zip|PasswordPolicyDsc_0.1.4.zip.checksum|README.md|TestsResults.xml|.git\config|.git\description|.git\HEAD|.git\index|.git\pa
                             cked-refs|.git\hooks\applypatch-msg.sample|.git\hooks\commit-msg.sample|.git\hooks\fsmonitor-watchman.sample|.git\hooks\post-update.sample|.
                             git\hooks\pre-applypatch.sample|.git\hooks\pre-commit.sample|.git\hooks\pre-push.sample|.git\hooks\pre-rebase.sample|.git\hooks\pre-receive.
                             sample|.git\hooks\prepare-commit-msg.sample|.git\hooks\update.sample|.git\info\exclude|.git\logs\HEAD|.git\logs\refs\heads\master|.git\logs\
                             refs\remotes\origin\HEAD|.git\objects\0a\e187a40ffcd074f6938131914619636ebd2554|.git\objects\0c\f1809abe84d52e02474ba457966fa1a213691e|.git\
                             objects\12\d1ca7e11343ba2b894646893718a90dc098d68|.git\objects\1e\62c73ffef03a35c00f7e2cb20260f2ecc6600f|.git\objects\21\071075c24599ee98254
                             f702bcfc504cdc275a6|.git\objects\22\aea79e83b0cc0ad902c90a43bad6cbae903bfe|.git\objects\28\5980606a75936c4f0cba1d96242e2126d00123|.git\objec
                             ts\29\4aae8671779ef1b20c67e9dea5030bf4d12830|.git\objects\2f\dac61c4cc1647944b25ccbed913f33e30de425|.git\objects\34\4d759f4219a45109e9494107
                             ad94f671a28f7a|.git\objects\3a\45a8dbb4cfdb995fbafd07b96bc73fe2296667|.git\objects\3a\dbef248f66cb1f0f1acbdf734088b37a57048b|.git\objects\3b
                             \1ed5d6903f9d36d702abe61a3fe61fce5ab633|.git\objects\3e\759b75bf455ac809d0987d369aab89137b5689|.git\objects\3f\7b372ce2a8ea652959c9dea4e09f0
                             c5ab7c3d1|.git\objects\4f\ddc04466eeeb2064234b90420fdd35ce90847a|.git\objects\50\a7354ad8092f6bc7a2cb98ed94f2506338916f|.git\objects\66\806c
                             4f15b702f3283ebbcfec7abc82433ddeb8|.git\objects\71\58e49af18be9ec21d288ec018d0ce1f81bdc31|.git\objects\72\f1506a93b5de771514c8f36d70a9b7e4a9
                             5561|.git\objects\73\3579c478afba7c6f09ac4924a8b012a4ef9dfd|.git\objects\74\a47778a2f3acea088803b7cb253ca32531d1e7|.git\objects\81\b343eb480
                             e91acb98e2d40ae7cd159cede5b20|.git\objects\82\ce83c1c0852062674bef2bdcae3a6bc6ee9d63|.git\objects\97\a6aa3174648465643a13b2dedb45e6ed5fd464|
                             .git\objects\9d\50b54d6a603a50e14edc520bf34f1c8eea3f9a|.git\objects\a2\e780df1f7b49a47e6e8703b9ed8d8ad38ac94d|.git\objects\c0\19119a7096909c
                             d41c91bf4e18bc8867121228|.git\objects\c3\8d1d2b648c42c181c7f34c03f402b546ec1d32|.git\objects\c3\b72283b7fdeaf81bcef906b72880d207774f83|.git\
                             objects\cf\91c4918d28021336491e0a4b290b372d0e8f6d|.git\objects\e9\89389a71ba7c96625c58e8bb6b4d3f5a8005e6|.git\objects\ea\0ae151b3ee3e804c121
                             e3c4633e39660407415|.git\refs\heads\master|.git\refs\remotes\origin\HEAD|DscResource.Tests\.codecov.yml|DscResource.Tests\.gitattributes|Dsc
                             Resource.Tests\.markdownlint.json|DscResource.Tests\.MetaTestOptIn.json|DscResource.Tests\AppVeyor.psm1|DscResource.Tests\appveyor.yml|DscRe
                             source.Tests\CHANGELOG.md|DscResource.Tests\DscResource.Tests.psd1|DscResource.Tests\gulpfile.js|DscResource.Tests\LICENSE|DscResource.Tests
                             \Meta.Tests.ps1|DscResource.Tests\MetaFixers.psm1|DscResource.Tests\Microsoft.DscResourceKit.cs|DscResource.Tests\package-lock.json|DscResou
                             rce.Tests\README.md|DscResource.Tests\TestHelper.psm1|DscResource.Tests\TestRunner.psm1|DscResource.Tests\.git\config|DscResource.Tests\.git
                             \description|DscResource.Tests\.git\HEAD|DscResource.Tests\.git\index|DscResource.Tests\.git\packed-refs|DscResource.Tests\.git\hooks\applyp
                             atch-msg.sample|DscResource.Tests\.git\hooks\commit-msg.sample|DscResource.Tests\.git\hooks\fsmonitor-watchman.sample|DscResource.Tests\.git
                             \hooks\post-update.sample|DscResource.Tests\.git\hooks\pre-applypatch.sample|DscResource.Tests\.git\hooks\pre-commit.sample|DscResource.Test
                             s\.git\hooks\pre-push.sample|DscResource.Tests\.git\hooks\pre-rebase.sample|DscResource.Tests\.git\hooks\pre-receive.sample|DscResource.Test
                             s\.git\hooks\prepare-commit-msg.sample|DscResource.Tests\.git\hooks\update.sample|DscResource.Tests\.git\info\exclude|DscResource.Tests\.git
                             \logs\HEAD|DscResource.Tests\.git\logs\refs\heads\dev|DscResource.Tests\.git\logs\refs\remotes\origin\HEAD|DscResource.Tests\.git\objects\pa
                             ck\pack-79d93b61184d54b43adaefb4571d0edfd4ec0028.idx|DscResource.Tests\.git\objects\pack\pack-79d93b61184d54b43adaefb4571d0edfd4ec0028.pack|
                             DscResource.Tests\.git\refs\heads\dev|DscResource.Tests\.git\refs\remotes\origin\HEAD|DscResource.Tests\.github\PULL_REQUEST_TEMPLATE.md|Dsc
                             Resource.Tests\.github\review-me.yml|DscResource.Tests\.github\stale.yml|DscResource.Tests\.vscode\cSpell.json|DscResource.Tests\DscResource
                             .AnalyzerRules\DscResource.AnalyzerRules.Helper.psm1|DscResource.Tests\DscResource.AnalyzerRules\DscResource.AnalyzerRules.psd1|DscResource.
                             Tests\DscResource.AnalyzerRules\DscResource.AnalyzerRules.psm1|DscResource.Tests\DscResource.AnalyzerRules\en-US\DscResource.AnalyzerRules.p
                             sd1|DscResource.Tests\DscResource.CodeCoverage\CodeCovIo.psm1|DscResource.Tests\DscResource.CodeCoverage\DscResource.CodeCoverage.psd1|DscRe
                             source.Tests\DscResource.Container\DscResource.Container.psd1|DscResource.Tests\DscResource.Container\DscResource.Container.psm1|DscResource
                             .Tests\DscResource.Container\en-US\DscResource.Container.strings.psd1|DscResource.Tests\DscResource.DocumentationHelper\DscResource.Document
                             ationHelper.psd1|DscResource.Tests\DscResource.DocumentationHelper\MofHelper.psm1|DscResource.Tests\DscResource.DocumentationHelper\PowerShe
                             llHelp.psm1|DscResource.Tests\DscResource.DocumentationHelper\WikiPages.psm1|DscResource.Tests\DscResource.GalleryDeploy\DscResource.Gallery
                             Deploy.psd1|DscResource.Tests\DscResource.GalleryDeploy\DscResource.GalleryDeploy.psm1|DscResource.Tests\DscResource.GalleryDeploy\en-US\Dsc
                             Resource.GalleryDeploy.strings.psd1|DscResource.Tests\Tests\TestHelpers\CommonTestHelper.psm1|DscResource.Tests\Tests\Unit\AppVeyor.Tests.ps
                             1|DscResource.Tests\Tests\Unit\DscResource.AnalyzerRules.Helper.Tests.ps1|DscResource.Tests\Tests\Unit\DscResource.AnalyzerRules.Tests.ps1|D
                             scResource.Tests\Tests\Unit\DscResource.Container.Tests.ps1|DscResource.Tests\Tests\Unit\DscResource.DocumentationHelper.Tests.ps1|DscResour
                             ce.Tests\Tests\Unit\DscResource.GalleryDeploy.Tests.ps1|DscResource.Tests\Tests\Unit\TestHelper.Tests.ps1|DscResource.Tests\Tests\Unit\TestR
                             unner.Tests.ps1|DSCResources\PasswordPolicyDsc\PasswordPolicyDsc.psd1|DSCResources\PasswordPolicyDsc\PasswordPolicyDsc.schema.psm1|Script\Pa
                             sswordPolicyDsc.ps1|Tests\TestPasswordPolicyDsc.config.ps1; requireLicenseAcceptance=False}


Name                       : ps.testPassword
Version                    : 0.0.7
Type                       : Module
Description                : Test a password strength, query HIBP (https://haveibeenpwned.com/Passwords) and display the hashcat cracking benchmarks. Hardware:
                             8xGTX8x1080Ti Sagitta Brutalis
Author                     : yubu
CompanyName                : yubu
Copyright                  : (c) 2018 yubu. All rights reserved.
PublishedDate              : 9/23/2019 5:33:27 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 : https://github.com/yubu/ps.testPassword
IconUri                    :
Tags                       : {Passwords, HIBP, HaveIBeenPwned, hashcat...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               : Initial release
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Test a password strength, query HIBP (https://haveibeenpwned.com/Passwords) and display the hashcat cracking benchmarks.
                             Hardware: 8xGTX8x1080Ti Sagitta Brutalis; downloadCount=224; created=9/23/2019 5:33:27 PM +03:00; description=Test a password strength,
                             query HIBP (https://haveibeenpwned.com/Passwords) and display the hashcat cracking benchmarks. Hardware: 8xGTX8x1080Ti Sagitta Brutalis;
                             copyright=(c) 2018 yubu. All rights reserved.; FileList=ps.testPassword.nuspec|ps.testPassword.psd1|ps.testPassword.psm1|readme.md;
                             lastUpdated=7/26/2020 12:49:49 AM +03:00; published=9/23/2019 5:33:27 PM +03:00; tags=Passwords HIBP HaveIBeenPwned hashcat GTX1080Ti
                             PSModule; releaseNotes=Initial release; Authors=yubu; ItemType=Module; PackageManagementProvider=NuGet; versionDownloadCount=78;
                             updated=2020-07-26T00:49:49Z; CompanyName=Unknown; developmentDependency=False; NormalizedVersion=0.0.7; PowerShellVersion=5.1;
                             title=ps.testPassword; GUID=e5fba3be-d829-4be9-9c26-29d88e5df393; isLatestVersion=True; Functions=Get-hashcatBench Test-Password Out-Hash;
                             requireLicenseAcceptance=False; isAbsoluteLatestVersion=True; IsPrerelease=false; packageSize=11047; SourceName=PSGallery}


Name                       : Gz-PasswordGenerator
Version                    : 0.1.0
Type                       : Module
Description                : # Gz-PasswordGenerator Module

                             Provides a new cryptographically generated password. By default, this function
                             will return an array of characters since strings are immutable and stick
                             around in memory.

                             ```powershell
                             $pw = New-GzPassword -Length 16 -AsSecureString
                             ```

                             ## Parameters

                             - Chars -- Optional. An string of characters to use to build the password.
                             - CharSets --  Optional. An array of choices that leverages a group of
                                characters to use to build the password. The default is "LatinAlphaUpperCase",
                                "LatinAlphaLowerCase", "Digits", "SpecialHybrid".
                             - Length -- Optional. The length of the password that is generated. The default is 16
                             - Validate -- Optional. A script block that validates the password to ensure it meets
                                 standards. The default checks for one uppercase, one lowercase, one digit,
                                 one special character.
                             - AsSecureString -- A flag that instructs the result to be returned as a SecureString.
                             - AsString -- A flag that instructs the result to be returned as a string.
Author                     : Nerdy Mishka Michael Herndon
CompanyName                : NerdyMishka
Copyright                  : (c) 2018-2019 Nerdy Mishka. All rights reserved.
PublishedDate              : 3/17/2019 3:51:57 AM
InstalledDate              :
UpdatedDate                :
LicenseUri                 : https://www.apache.org/licenses/LICENSE-2.0
ProjectUri                 : https://gitlab.com/nerdymishka/gainz/tree/master/powershell/Gz-PasswordGenerator
IconUri                    : https://gitlab.com/nerdymishka/NerdMishka/raw/dev/resources/images/logo.png
Tags                       : {Password, Generator, Password-Generator, DevOps...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               : - 0.1.0 -- Early Release to gather feedback.
                             - 0.0.1 -- Testing Markdown in PowerShell Gallery -
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=# Gz-PasswordGenerator Module

                             Provides a new cryptographically generated password. By default, this function
                             will return an array of characters since strings are immutable and stick
                             around in memory.

                             ```powershell
                             $pw = New-GzPassword -Length 16 -AsSecureString
                             ```

                             ## Parameters

                             - Chars -- Optional. An string of characters to use to build the password.
                             - CharSets --  Optional. An array of choices that leverages a group of
                                characters to use to build the password. The default is "LatinAlphaUpperCase",
                                "LatinAlphaLowerCase", "Digits", "SpecialHybrid".
                             - Length -- Optional. The length of the password that is generated. The default is 16
                             - Validate -- Optional. A script block that validates the password to ensure it meets
                                 standards. The default checks for one uppercase, one lowercase, one digit,
                                 one special character.
                             - AsSecureString -- A flag that instructs the result to be returned as a SecureString.
                             - AsString -- A flag that instructs the result to be returned as a string.; downloadCount=219; created=3/17/2019 3:51:57 AM +02:00;
                             description=# Gz-PasswordGenerator Module

                             Provides a new cryptographically generated password. By default, this function
                             will return an array of characters since strings are immutable and stick
                             around in memory.

                             ```powershell
                             $pw = New-GzPassword -Length 16 -AsSecureString
                             ```

                             ## Parameters

                             - Chars -- Optional. An string of characters to use to build the password.
                             - CharSets --  Optional. An array of choices that leverages a group of
                                characters to use to build the password. The default is "LatinAlphaUpperCase",
                                "LatinAlphaLowerCase", "Digits", "SpecialHybrid".
                             - Length -- Optional. The length of the password that is generated. The default is 16
                             - Validate -- Optional. A script block that validates the password to ensure it meets
                                 standards. The default checks for one uppercase, one lowercase, one digit,
                                 one special character.
                             - AsSecureString -- A flag that instructs the result to be returned as a SecureString.
                             - AsString -- A flag that instructs the result to be returned as a string.; copyright=(c) 2018-2019 Nerdy Mishka. All rights reserved.; File
                             List=Gz-PasswordGenerator.nuspec|Gz-PasswordGenerator.psd1|Gz-PasswordGenerator.psm1|LICENSE|README.md|public\Add-GzPasswordGeneratorAlias.p
                             s1|public\Merge-GzPasswordCharsets.ps1|public\New-GzPassword.ps1|public\Test-GzPassword.ps1; lastUpdated=7/26/2020 1:24:49 AM +03:00;
                             published=3/17/2019 3:51:57 AM +02:00; tags=Password Generator Password-Generator DevOps Gz Gainz NerdyMishka PSModule PSEdition_Desktop
                             PSEdition_Core; releaseNotes=- 0.1.0 -- Early Release to gather feedback.
                             - 0.0.1 -- Testing Markdown in PowerShell Gallery -; Authors=Nerdy Mishka Michael Herndon; ItemType=Module;
                             PackageManagementProvider=NuGet; versionDownloadCount=211; updated=2020-07-26T01:24:49Z; CompanyName=Nerdy Mishka;
                             developmentDependency=False; NormalizedVersion=0.1.0; PowerShellVersion=5.1; title=Gz-PasswordGenerator;
                             GUID=275e562a-a4f0-4d2b-8e7f-74cbf97a7c57; isLatestVersion=True; Functions=New-GzPassword Add-GzPasswordGeneratorAlias
                             Remove-GzPasswordGeneratorAlias; requireLicenseAcceptance=False; isAbsoluteLatestVersion=True; IsPrerelease=false; packageSize=9880;
                             SourceName=PSGallery}


Name                       : Get-WifiPassword
Version                    : 1.0
Type                       : Module
Description                : Returns list of known wifi networks with their passwords. The module uses netsh utility.
Author                     : Sergei Pavliukovich
CompanyName                : sergepav
Copyright                  : (c) 2019 Sergei Pavliukovich. All rights reserved.
PublishedDate              : 1/7/2019 11:38:52 AM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 :
IconUri                    :
Tags                       : {PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Returns list of known wifi networks with their passwords. The module uses netsh utility.; versionDownloadCount=252;
                             ItemType=Module; copyright=(c) 2019 Sergei Pavliukovich. All rights reserved.; PackageManagementProvider=NuGet; CompanyName=Unknown;
                             SourceName=PSGallery; tags=PSModule; title=Get-WifiPassword; created=1/7/2019 11:38:52 AM +02:00; description=Returns list of known wifi
                             networks with their passwords. The module uses netsh utility.; published=1/7/2019 11:38:52 AM +02:00; developmentDependency=False;
                             NormalizedVersion=1.0.0; downloadCount=252; GUID=256f1834-0e8c-4523-af8e-bb4e18187310; lastUpdated=7/28/2020 10:16:15 AM +03:00;
                             Authors=Sergei Pavliukovich; updated=2020-07-28T10:16:15Z; Functions=Get-WifiPassword; isLatestVersion=True; PowerShellVersion=3.0.0;
                             IsPrerelease=false; isAbsoluteLatestVersion=True; packageSize=4528;
                             FileList=Get-WifiPassword.nuspec|Get-WifiPassword.psd1|Get-WifiPassword.psm1; requireLicenseAcceptance=False}


Name                       : PSMyPassword
Version                    : 0.0.3
Type                       : Module
Description                : Module helping out with some password security
Author                     : Przemyslaw Klys
CompanyName                : Przemyslaw.Klys
Copyright                  : (c) 2011 - 2019 Przemyslaw Klys. All rights reserved.
PublishedDate              : 1/20/2019 12:02:28 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 : https://github.com/EvotecIT/PSMyPassword
IconUri                    : https://evotec.xyz/wp-content/uploads/2019/01/PSMyPassword.png
Tags                       : {Password, Secret, PSModule, PSEdition_Desktop...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {System.Collections.Specialized.OrderedDictionary}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Module helping out with some password security; versionDownloadCount=183; ItemType=Module; copyright=(c) 2011 - 2019 Przemyslaw
                             Klys. All rights reserved.; PackageManagementProvider=NuGet; CompanyName=Evotec; SourceName=PSGallery; tags=Password Secret PSModule
                             PSEdition_Desktop PSEdition_Core; title=PSMyPassword; created=1/20/2019 12:02:28 PM +02:00; description=Module helping out with some
                             password security; published=1/20/2019 12:02:28 PM +02:00; developmentDependency=False; NormalizedVersion=0.0.3; downloadCount=213;
                             GUID=dd774c97-163b-4a23-b712-3b0cd0063bbc; lastUpdated=8/2/2020 11:14:34 PM +03:00; Authors=Przemyslaw Klys; updated=2020-08-02T23:14:34Z;
                             Functions=Protect-MyPassword; isLatestVersion=True; PowerShellVersion=5.1; IsPrerelease=false; isAbsoluteLatestVersion=True;
                             packageSize=4314; FileList=PSMyPassword.nuspec|PSMyPassword.psd1|PSMyPassword.psm1; requireLicenseAcceptance=False}


Name                       : NewRandomPassword
Version                    : 1.2.0
Type                       : Module
Description                : Creates 1 or more randomly-generated strings of either static or variable length.
Author                     : Mike Garvey
CompanyName                : Yevrag35
Copyright                  : (c) 2019 Yevrag35, LLC.  All rights reserved.
PublishedDate              : 8/25/2019 6:50:46 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 : https://raw.githubusercontent.com/Yevrag35/NewRandomPassword-Core/master/LICENSE
ProjectUri                 : https://github.com/Yevrag35/NewRandomPassword-Core
IconUri                    :
Tags                       : {new, random, password, generate...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               : Fixed security flaw
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Creates 1 or more randomly-generated strings of either static or variable length.; downloadCount=236; created=8/25/2019 6:50:46
                             PM +03:00; description=Creates 1 or more randomly-generated strings of either static or variable length.; copyright=(c) 2019 Yevrag35, LLC.
                              All rights reserved.; FileList=NewRandomPassword.nuspec|NewRandomPassword.psd1|Core\NewRandomPassword-Core.deps.json|Core\NewRandomPassword
                             -Core.dll|DotNet\NewRandomPassword.dll; lastUpdated=7/25/2020 10:10:40 PM +03:00; published=8/25/2019 6:50:46 PM +03:00; tags=new random
                             password generate generator multiple static variable dynamic first character iteration string output host passwords option specify min
                             minimum max maximum count length PSModule PSEdition_Core PSEdition_Desktop; releaseNotes=Fixed security flaw; Authors=Mike Garvey;
                             ItemType=Module; PackageManagementProvider=NuGet; versionDownloadCount=89; updated=2020-07-25T22:10:40Z; CompanyName=Yevrag35, LLC.;
                             developmentDependency=False; NormalizedVersion=1.2.0; PowerShellVersion=5.1; title=NewRandomPassword;
                             GUID=b312ad21-5c60-48c1-84db-a91d73a69939; isLatestVersion=True; requireLicenseAcceptance=False; isAbsoluteLatestVersion=True;
                             IsPrerelease=false; packageSize=36177; DotNetFrameworkVersion=4.5.2; Cmdlets=New-RandomPassword; SourceName=PSGallery}


Name                       : PSWordXml
Version                    : 1.0.5
Type                       : Module
Description                : Module for creating word documents purely in Xml.
Author                     : brian.addicks@lockstepgroup.com
CompanyName                : brianaddicks
Copyright                  : (c) Lockstep Technology Group. All rights reserved.
PublishedDate              : 12/10/2019 10:25:06 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 : https://raw.githubusercontent.com/LockstepGroup/PSWordXml/master/LICENSE
ProjectUri                 : https://github.com/LockstepGroup/PSWordXml
IconUri                    :
Tags                       : {xml, msword, word, office...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               : Fixed an issue with New-WordTable.
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Module for creating word documents purely in Xml.; releaseNotes=Fixed an issue with New-WordTable.; versionDownloadCount=49;
                             ItemType=Module; copyright=(c) Lockstep Technology Group. All rights reserved.; PackageManagementProvider=NuGet; CompanyName=Lockstep
                             Technology Group; SourceName=PSGallery; description=Module for creating word documents purely in Xml.; title=PSWordXml; created=12/10/2019
                             10:25:06 PM +02:00; published=12/10/2019 10:25:06 PM +02:00; developmentDependency=False; NormalizedVersion=1.0.5; downloadCount=139;
                             GUID=6a3f0db4-d062-4d48-a977-1f11c3b6a96c; lastUpdated=7/26/2020 10:15:03 AM +03:00; Authors=brian.addicks@lockstepgroup.com;
                             updated=2020-07-26T10:15:03Z; Functions=Add-WordContent Close-WordDocument New-WordDocFromTemplate New-WordParagraph New-WordRun
                             New-WordTable New-WordTableCell New-WordTableOfContents New-WordTableRow Open-WordDocument Resolve-WordText; isLatestVersion=True;
                             IsPrerelease=false; isAbsoluteLatestVersion=True; packageSize=17228; tags=xml msword word office PSModule; FileList=PSWordXml.nuspec|PSWordX
                             ml.psd1|PSWordXml.psm1|en-US\PSWordXml-help.xml|Public\Add-WordContent.ps1|Public\Close-WordDocument.ps1|Public\New-WordDocFromTemplate.ps1|
                             Public\New-WordParagraph.ps1|Public\New-WordRun.ps1|Public\New-WordTable.ps1|Public\New-WordTableCell.ps1|Public\New-WordTableOfContents.ps1
                             |Public\New-WordTableRow.ps1|Public\Open-WordDocument.ps1|Public\Resolve-WordText.ps1; requireLicenseAcceptance=False}


Name                       : LUM.PasswordTool
Version                    : 1.0.0.2
Type                       : Module
Description                : Password Tool
Author                     : lum
CompanyName                : LUM
Copyright                  : (c) 2019 lum. All rights reserved.
PublishedDate              : 2/5/2019 9:23:32 AM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 :
IconUri                    :
Tags                       : {PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Password Tool; versionDownloadCount=100; ItemType=Module; copyright=(c) 2019 lum. All rights reserved.;
                             PackageManagementProvider=NuGet; CompanyName=Unknown; SourceName=PSGallery; tags=PSModule; title=LUM.PasswordTool; created=2/5/2019 9:23:32
                             AM +02:00; description=Password Tool; published=2/5/2019 9:23:32 AM +02:00; developmentDependency=False; NormalizedVersion=1.0.0.2;
                             downloadCount=136; GUID=edb4de70-912a-47a4-b1a1-f282624e0ba0; lastUpdated=7/26/2020 11:50:05 AM +03:00; Authors=lum;
                             updated=2020-07-26T11:50:05Z; Functions=Get-Password Configure-Passwords; isLatestVersion=True; IsPrerelease=false;
                             isAbsoluteLatestVersion=True; packageSize=5862; FileList=LUM.PasswordTool.nuspec|LUM.PasswordTool.psd1|LUM.PasswordTool.psm1;
                             requireLicenseAcceptance=False}


Name                       : UniversalDashboard.UDWordTree
Version                    : 1.0.0
Type                       : Module
Description                : Google WordTree Chart
Author                     : psdevuk Augustin Ziegler
CompanyName                : psdevuk
Copyright                  : 2019 Ironman Software, LLC
PublishedDate              : 2/4/2020 7:26:35 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 : https://github.com/psDevUK/UDWordTree
IconUri                    : https://raw.githubusercontent.com/psDevUK/UDWordTree/master/wordtreeDemo.gif
Tags                       : {universaldashboard, ud-dashboard, ud-component, ud-wordtree...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               : Google WordTree Chart
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Google WordTree Chart; releaseNotes=Google WordTree Chart; versionDownloadCount=44; ItemType=Module; copyright=2019 Ironman
                             Software, LLC; PackageManagementProvider=NuGet; CompanyName=Ironman Software, LLC; SourceName=PSGallery; description=Google WordTree Chart;
                             title=UniversalDashboard.UDWordTree; created=2/4/2020 7:26:35 PM +02:00; published=2/4/2020 7:26:35 PM +02:00; developmentDependency=False;
                             NormalizedVersion=1.0.0; downloadCount=44; GUID=add9d4be-fe64-4ef2-a90e-7034d84550ac; lastUpdated=7/23/2020 1:48:49 PM +03:00;
                             Authors=psdevuk Augustin Ziegler; updated=2020-07-23T13:48:49Z; Functions=New-UDWordTree; isLatestVersion=True; IsPrerelease=false;
                             isAbsoluteLatestVersion=True; packageSize=160667; tags=universaldashboard ud-dashboard ud-component ud-wordtree PSModule; FileList=Universal
                             Dashboard.UDWordTree.nuspec|index.0822148faf3557f16681.bundle.js|index.0822148faf3557f16681.bundle.map|UniversalDashboard.UDWordTree.psd1|Un
                             iversalDashboard.UDWordTree.psm1|Scripts\New-UDWordTree.ps1; requireLicenseAcceptance=False}


Name                       : SimplePasswordGenerator
Version                    : 1.0.0.0
Type                       : Module
Description                : This is a simple password generator tool which comes with a handy PowerShell cmdlet Get-Password.
Author                     : Harish Karthic
CompanyName                : hkarthik7
Copyright                  : (c) 2019 Harish Karthic. All rights reserved.
PublishedDate              : 12/23/2019 10:55:13 AM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 :
IconUri                    :
Tags                       : {Password, PasswordTool, RandomPassword, SimplePasswordGenerator...}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               : A simple password generator tool.
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=This is a simple password generator tool which comes with a handy PowerShell cmdlet Get-Password.; releaseNotes=A simple password
                             generator tool.; versionDownloadCount=35; ItemType=Module; copyright=(c) 2019 Harish Karthic. All rights reserved.;
                             PackageManagementProvider=NuGet; CompanyName=Individual; SourceName=PSGallery; description=This is a simple password generator tool which
                             comes with a handy PowerShell cmdlet Get-Password.; title=SimplePasswordGenerator; created=12/23/2019 10:55:13 AM +02:00;
                             published=12/23/2019 10:55:13 AM +02:00; developmentDependency=False; NormalizedVersion=1.0.0; downloadCount=35;
                             GUID=3526ff6f-8ca5-4529-a2c7-67b627a81836; lastUpdated=7/23/2020 6:48:56 PM +03:00; Authors=Harish Karthic; updated=2020-07-23T18:48:56Z;
                             isLatestVersion=True; PowerShellVersion=5.0; IsPrerelease=false; isAbsoluteLatestVersion=True; packageSize=5530; tags=Password PasswordTool
                             RandomPassword SimplePasswordGenerator SimplePassword PasswordGenerator PSModule;
                             FileList=SimplePasswordGenerator.nuspec|Get-Password.ps1|SimplePasswordGenerator.psd1|SimplePasswordGenerator.psm1;
                             requireLicenseAcceptance=False}


Name                       : BWRandomPassword
Version                    : 20.1.23.1405
Type                       : Module
Description                : Generates one or more complex passwords designed to fulfill the requirements for Active Directory.
Author                     : Shannon Graybrook
CompanyName                : realslacker
Copyright                  : 2020 (c) Shannon Graybrook
PublishedDate              : 1/23/2020 8:05:50 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 : https://raw.githubusercontent.com/realslacker/BWRandomPassword/master/LICENSE.TXT
ProjectUri                 : https://github.com/realslacker/BWRandomPassword
IconUri                    :
Tags                       : {PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Generates one or more complex passwords designed to fulfill the requirements for Active Directory.; versionDownloadCount=32;
                             ItemType=Module; copyright=2020 (c) Shannon Graybrook; PackageManagementProvider=NuGet; CompanyName=brooksworks.com; SourceName=PSGallery;
                             tags=PSModule; title=BWRandomPassword; created=1/23/2020 8:05:50 PM +02:00; description=Generates one or more complex passwords designed to
                             fulfill the requirements for Active Directory.; published=1/23/2020 8:05:50 PM +02:00; developmentDependency=False;
                             NormalizedVersion=20.1.23.1405; downloadCount=32; GUID=ed0cb037-df69-418f-b62e-efad6cc5da73; lastUpdated=7/23/2020 7:53:57 PM +03:00;
                             Authors=Shannon Graybrook; updated=2020-07-23T19:53:57Z; Functions=Get-RandomPassword; isLatestVersion=True; IsPrerelease=false;
                             isAbsoluteLatestVersion=True; packageSize=13536;
                             FileList=BWRandomPassword.nuspec|BWRandomPassword.psd1|BWRandomPassword.psm1|LICENSE.TXT|README.md; requireLicenseAcceptance=False}


Name                       : QuickPasswordGenerator
Version                    : 1.0.2
Type                       : Module
Description                : Generate random fixed length passwords
Author                     : Ivan Iraola
CompanyName                : NJ_Dude
Copyright                  : (c) 2019 Ivan Iraola. All rights reserved.
PublishedDate              : 3/26/2020 1:55:40 AM
InstalledDate              :
UpdatedDate                :
LicenseUri                 : http://www.uncledroid.com/PowerShell/MITLicense.php
ProjectUri                 :
IconUri                    :
Tags                       : {Password, Utilities, Tools, PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Generate random fixed length passwords; versionDownloadCount=25; ItemType=Module; copyright=(c) 2019 Ivan Iraola. All rights
                             reserved.; PackageManagementProvider=NuGet; SourceName=PSGallery; tags=Password Utilities Tools PSModule; title=QuickPasswordGenerator;
                             created=3/26/2020 1:55:40 AM +02:00; description=Generate random fixed length passwords; published=3/26/2020 1:55:40 AM +02:00;
                             developmentDependency=False; NormalizedVersion=1.0.2; downloadCount=74; GUID=92594608-c5ed-4e78-9eb5-c192b9d4e5db; lastUpdated=7/27/2020
                             6:45:33 AM +03:00; Authors=Ivan Iraola; updated=2020-07-27T06:45:33Z; Functions=Invoke-QuickPasswordGenerator; isLatestVersion=True;
                             IsPrerelease=false; isAbsoluteLatestVersion=True; packageSize=4492;
                             FileList=QuickPasswordGenerator.nuspec|QuickPasswordGenerator.psd1|QuickPasswordGenerator.psm1; requireLicenseAcceptance=False}


Name                       : Get-RandomPassword
Version                    : 1.1.1
Type                       : Module
Description                : This cmdlet generates a series of random words which are easy to remember and have fairly high entropy. Based on the xkcd comic
                             (https://xkcd.com/936/)
                             Short words: 1 to 4 characters long
                             Medium words: 5-8 characters long (default)
                             Long words: 9+ characters long
Author                     : mmcmd
CompanyName                : mmcmd
Copyright                  : (c) 2019 mmcmd. All rights reserved.
PublishedDate              : 12/17/2019 5:02:17 AM
InstalledDate              :
UpdatedDate                :
LicenseUri                 : https://opensource.org/licenses/MIT
ProjectUri                 : https://github.com/mmcmd/Get-RandomPassword
IconUri                    : https://avatars1.githubusercontent.com/u/36875145?s=460&v=4
Tags                       : {Password_generation, Get_Random_Password, Random, PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=This cmdlet generates a series of random words which are easy to remember and have fairly high entropy. Based on the xkcd comic
                             (https://xkcd.com/936/)
                             Short words: 1 to 4 characters long
                             Medium words: 5-8 characters long (default)
                             Long words: 9+ characters long; versionDownloadCount=60; ItemType=Module; copyright=(c) 2019 mmcmd. All rights reserved.;
                             PackageManagementProvider=NuGet; CompanyName=N/A; SourceName=PSGallery; tags=Password_generation Get_Random_Password Random PSModule;
                             title=Get-RandomPassword; created=12/17/2019 5:02:17 AM +02:00; description=This cmdlet generates a series of random words which are easy
                             to remember and have fairly high entropy. Based on the xkcd comic (https://xkcd.com/936/)
                             Short words: 1 to 4 characters long
                             Medium words: 5-8 characters long (default)
                             Long words: 9+ characters long; published=12/17/2019 5:02:17 AM +02:00; developmentDependency=False; NormalizedVersion=1.1.1;
                             downloadCount=64; GUID=203eaa01-9ad0-4b29-ad91-eea8f27bc013; lastUpdated=7/28/2020 7:16:28 PM +03:00; Authors=mmcmd;
                             updated=2020-07-28T19:16:28Z; Functions=Get-RandomPassword; isLatestVersion=True; PowerShellVersion=5.1; IsPrerelease=false;
                             isAbsoluteLatestVersion=True; packageSize=1521497; FileList=Get-RandomPassword.nuspec|Get-RandomPassword.code-workspace|Get-RandomPassword.p
                             s1|Get-RandomPassword.psd1|Get-RandomPassword.psm1|README.md|.vscode\launch.json|functions\Add-Delimiter.ps1|functions\Write-ErrorMessage.ps
                             1|functions\Write-RedText.ps1|functions\Write-YellowText.ps1|ressources\afrikaans\afrikaans-long-words.txt|ressources\afrikaans\afrikaans-me
                             dium-words.txt|ressources\afrikaans\afrikaans-short-words.txt|ressources\albanian\albanian-long-words.txt|ressources\albanian\albanian-mediu
                             m-words.txt|ressources\albanian\albanian-short-words.txt|ressources\arabic\arabic-long-words.txt|ressources\arabic\arabic-medium-words.txt|r
                             essources\arabic\arabic-short-words.txt|ressources\bengali\bengali-long-words.txt|ressources\bengali\bengali-medium-words.txt|ressources\ben
                             gali\bengali-short-words.txt|ressources\bulgarian\bulgarian-long-words.txt|ressources\bulgarian\bulgarian-medium-words.txt|ressources\bulgar
                             ian\bulgarian-short-words.txt|ressources\catalan\catalan-long-words.txt|ressources\catalan\catalan-medium-words.txt|ressources\catalan\catal
                             an-short-words.txt|ressources\czech\czech-long-words.txt|ressources\czech\czech-medium-words.txt|ressources\czech\czech-short-words.txt|ress
                             ources\danish\danish-long-words.txt|ressources\danish\danish-medium-words.txt|ressources\danish\danish-short-words.txt|ressources\dutch\dutc
                             h-long-words.txt|ressources\dutch\dutch-medium-words.txt|ressources\dutch\dutch-short-words.txt|ressources\english\english-long-words.txt|re
                             ssources\english\english-medium-words.txt|ressources\english\english-short-words.txt|ressources\esperanto\esperanto-long-words.txt|ressource
                             s\esperanto\esperanto-medium-words.txt|ressources\esperanto\esperanto-short-words.txt|ressources\estonian\estonian-long-words.txt|ressources
                             \estonian\estonian-medium-words.txt|ressources\estonian\estonian-short-words.txt|ressources\farsi\farsi-long-words.txt|ressources\farsi\fars
                             i-medium-words.txt|ressources\farsi\farsi-short-words.txt|ressources\finnish\finnish-long-words.txt|ressources\finnish\finnish-medium-words.
                             txt|ressources\finnish\finnish-short-words.txt|ressources\french\french-long-words.txt|ressources\french\french-medium-words.txt|ressources\
                             french\french-short-words.txt|ressources\german\german-long-words.txt|ressources\german\german-medium-words.txt|ressources\german\german-sho
                             rt-words.txt|ressources\greek\greek-long-words.txt|ressources\greek\greek-medium-words.txt|ressources\greek\greek-short-words.txt|ressources
                             \hebrew\hebrew-long-words.txt|ressources\hebrew\hebrew-medium-words.txt|ressources\hebrew\hebrew-short-words.txt|ressources\hindi\hindi-long
                             -words.txt|ressources\hindi\hindi-medium-words.txt|ressources\hindi\hindi-short-words.txt|ressources\hungarian\hungarian-long-words.txt|ress
                             ources\hungarian\hungarian-medium-words.txt|ressources\hungarian\hungarian-short-words.txt|ressources\indonesian\indonesian-long-words.txt|r
                             essources\indonesian\indonesian-medium-words.txt|ressources\indonesian\indonesian-short-words.txt|ressources\italian\italian-long-words.txt|
                             ressources\italian\italian-medium-words.txt|ressources\italian\italian-short-words.txt|ressources\japanese\japanese-long-words.txt|ressource
                             s\japanese\japanese-medium-words.txt|ressources\japanese\japanese-short-words.txt|ressources\kazakh\kazakh-long-words.txt|ressources\kazakh\
                             kazakh-medium-words.txt|ressources\kazakh\kazakh-short-words.txt|ressources\korean\korean-long-words.txt|ressources\korean\korean-medium-wor
                             ds.txt|ressources\korean\korean-short-words.txt|ressources\latvian\latvian-long-words.txt|ressources\latvian\latvian-medium-words.txt|ressou
                             rces\latvian\latvian-short-words.txt|ressources\lithuanian\lithuanian-long-words.txt|ressources\lithuanian\lithuanian-medium-words.txt|resso
                             urces\lithuanian\lithuanian-short-words.txt|ressources\macedonian\macedonian-long-words.txt|ressources\macedonian\macedonian-medium-words.tx
                             t|ressources\macedonian\macedonian-short-words.txt|ressources\norwegian\norwegian-long-words.txt|ressources\norwegian\norwegian-medium-words
                             .txt|ressources\norwegian\norwegian-short-words.txt|ressources\polish\polish-long-words.txt|ressources\polish\polish-medium-words.txt|ressou
                             rces\polish\polish-short-words.txt|ressources\portuguese\portuguese-long-words.txt|ressources\portuguese\portuguese-medium-words.txt|ressour
                             ces\portuguese\portuguese-short-words.txt|ressources\romanian\romanian-long-words.txt|ressources\romanian\romanian-medium-words.txt|ressourc
                             es\romanian\romanian-short-words.txt|ressources\russian\russian-long-words.txt|ressources\russian\russian-medium-words.txt|ressources\russia
                             n\russian-short-words.txt|ressources\serbian\serbian-long-words.txt|ressources\serbian\serbian-medium-words.txt|ressources\serbian\serbian-s
                             hort-words.txt|ressources\slovak\slovak-long-words.txt|ressources\slovak\slovak-medium-words.txt|ressources\slovak\slovak-short-words.txt|re
                             ssources\slovenian\slovenian-long-words.txt|ressources\slovenian\slovenian-medium-words.txt|ressources\slovenian\slovenian-short-words.txt|r
                             essources\spanish\spanish-long-words.txt|ressources\spanish\spanish-medium-words.txt|ressources\spanish\spanish-short-words.txt|ressources\s
                             wedish\swedish-long-words.txt|ressources\swedish\swedish-medium-words.txt|ressources\swedish\swedish-short-words.txt|ressources\thai\thai-lo
                             ng-words.txt|ressources\thai\thai-medium-words.txt|ressources\thai\thai-short-words.txt|ressources\turkish\turkish-long-words.txt|ressources
                             \turkish\turkish-medium-words.txt|ressources\turkish\turkish-short-words.txt|ressources\ukrainian\ukrainian-long-words.txt|ressources\ukrain
                             ian\ukrainian-medium-words.txt|ressources\ukrainian\ukrainian-short-words.txt|ressources\vietnamese\vietnamese-long-words.txt|ressources\vie
                             tnamese\vietnamese-medium-words.txt|ressources\vietnamese\vietnamese-short-words.txt; requireLicenseAcceptance=False}


Name                       : ProductivityTools.PSGetCurrentWifiPassword
Version                    : 0.0.2
Type                       : Module
Description                : It returns current wifi password
Author                     : Pawel Wujczyk
CompanyName                : pwujczyk
Copyright                  :
PublishedDate              : 7/21/2020 2:50:17 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 : http://productivitytools.tech/get-current-wi-fi-password/
IconUri                    : http://cdn.productivitytools.tech/images/PT/ProductivityTools_blue_85px_3.png
Tags                       : {Wifi, Password, PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {System.Collections.Specialized.OrderedDictionary}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=It returns current wifi password; versionDownloadCount=7; ItemType=Module; Authors=Pawel Wujczyk;
                             PackageManagementProvider=NuGet; SourceName=PSGallery; tags=Wifi Password PSModule; title=ProductivityTools.PSGetCurrentWifiPassword;
                             created=7/21/2020 2:50:17 PM +03:00; description=It returns current wifi password; published=7/21/2020 2:50:17 PM +03:00;
                             developmentDependency=False; NormalizedVersion=0.0.2; downloadCount=10; GUID=ad0a03e5-320c-4dfc-b978-218182cf7dcd; lastUpdated=7/28/2020
                             10:16:15 AM +03:00; updated=2020-07-28T10:16:15Z; Functions=Get-CurrentWifiPassword; isLatestVersion=True; IsPrerelease=false;
                             isAbsoluteLatestVersion=True; packageSize=6155; FileList=ProductivityTools.PSGetCurrentWifiPassword.nuspec|ProductivityTools.PSGetCurrentWif
                             iPassword.psd1|ProductivityTools.PSGetCurrentWifiPassword.psm1|ProductivityTools.PSGetCurrentWifiPassword.pssproj|Runner.ps1|obj\Debug\Produ
                             ctivityTools.PSGetCurrentWifiPassword.pssproj.FileListAbsolute.txt|obj\Debug\ProductivityTools.PSGetCurrentWifiPassword.pssprojAssemblyRefer
                             ence.cache; requireLicenseAcceptance=False}


Name                       : ProductivityTools.PSSaveLoginAndPasswordForFortiClient
Version                    : 0.0.2
Type                       : Module
Description                : Changes the registry to allow user to save password to all FortiClient connections.
Author                     : Pawel Wujczyk
CompanyName                : pwujczyk
Copyright                  :
PublishedDate              : 7/4/2020 8:47:58 PM
InstalledDate              :
UpdatedDate                :
LicenseUri                 :
ProjectUri                 : https://github.com/pwujczyk/ProductivityTools.PSSaveLoginAndPasswordForFortiClient
IconUri                    : http://cdn.productivitytools.tech/images/PT/ProductivityTools_blue_85px_3.png
Tags                       : {FortiClient, PSModule}
Includes                   : {Function, RoleCapability, Command, DscResource...}
PowerShellGetFormatVersion :
ReleaseNotes               :
Dependencies               : {}
RepositorySourceLocation   : https://www.powershellgallery.com/api/v2
Repository                 : PSGallery
PackageManagementProvider  : NuGet
AdditionalMetadata         : @{summary=Changes the registry to allow user to save password to all FortiClient connections.; versionDownloadCount=6; ItemType=Module;
                             Authors=Pawel Wujczyk; PackageManagementProvider=NuGet; SourceName=PSGallery; tags=FortiClient PSModule;
                             title=ProductivityTools.PSSaveLoginAndPasswordForFortiClient; created=7/4/2020 8:47:58 PM +03:00; description=Changes the registry to allow
                             user to save password to all FortiClient connections.; published=7/4/2020 8:47:58 PM +03:00; developmentDependency=False;
                             NormalizedVersion=0.0.2; downloadCount=8; GUID=cd4116ae-6e66-4b9f-b6e9-c6fc94faf31f; lastUpdated=7/24/2020 2:34:08 AM +03:00;
                             updated=2020-07-24T02:34:08Z; Functions=Save-LoginAndPasswordForFortiClient; isLatestVersion=True; IsPrerelease=false;
                             isAbsoluteLatestVersion=True; packageSize=7454; FileList=ProductivityTools.PSSaveLoginAndPasswordForFortiClient.nuspec|ProductivityTools.PSS
                             aveLoginAndPasswordForFortiClient.psd1|ProductivityTools.PSSaveLoginAndPasswordForFortiClient.psm1|ProductivityTools.PSSaveLoginAndPasswordF
                             orFortiClient.pssproj|Runner.ps1|obj\Debug\ProductivityTools.PSSaveLoginAndPasswordForFortiClient.pssprojAssemblyReference.cache|obj\Debug\P
                             roductivityTools.SaveLoginAndPasswordForFortiClient.pssprojAssemblyReference.cache; requireLicenseAcceptance=False}


ScriptBlock         :

                        [CmdletBinding()]
                        param (
                          [Parameter(Position = 0, Mandatory = $false)]
                          [Parameter(ParameterSetName = 'GridTable')]
                          [ValidateSet('NewPage', 'Section','Paragraph')]
                          [string]$breaktype,

                          #Todo cast type instead ie [Microsoft.Office.Interop.Word.Application]$WordInstance but does not work
                          [Parameter(Mandatory = $false,Position = 1)]
                          [alias("Word")]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Application]) { $True } else { throw "WordInstance was not of type
                      [Microsoft.Office.Interop.Word.Application]" } })]
                          $WordInstance = $Global:WordInstance,

                          [Parameter(Mandatory = $false, Position = 2)]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc = $Global:WordDoc
                        )

                        Begin
                        {
                          Add-Type -AssemblyName Microsoft.Office.Interop.Word
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            switch ($breaktype)
                            {
                              'NewPage'
                              {
                                $WordInstance.Selection.InsertNewPage()
                              }
                              'Section'
                              {
                                $WordInstance.Selection.Sections.Add()
                              }
                              'Paragraph'
                              {
                                $WordInstance.Selection.InsertParagraph()
                              }
                            }
                            [Void]$WordDoc.application.selection.goto([Microsoft.Office.Interop.Word.WdGoToItem]::wdGoToBookmark,$null,$null,'\EndOfDoc')
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

CmdletBinding       : True
DefaultParameterSet :
Definition          :

                        [CmdletBinding()]
                        param (
                          [Parameter(Position = 0, Mandatory = $false)]
                          [Parameter(ParameterSetName = 'GridTable')]
                          [ValidateSet('NewPage', 'Section','Paragraph')]
                          [string]$breaktype,

                          #Todo cast type instead ie [Microsoft.Office.Interop.Word.Application]$WordInstance but does not work
                          [Parameter(Mandatory = $false,Position = 1)]
                          [alias("Word")]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Application]) { $True } else { throw "WordInstance was not of type
                      [Microsoft.Office.Interop.Word.Application]" } })]
                          $WordInstance = $Global:WordInstance,

                          [Parameter(Mandatory = $false, Position = 2)]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc = $Global:WordDoc
                        )

                        Begin
                        {
                          Add-Type -AssemblyName Microsoft.Office.Interop.Word
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            switch ($breaktype)
                            {
                              'NewPage'
                              {
                                $WordInstance.Selection.InsertNewPage()
                              }
                              'Section'
                              {
                                $WordInstance.Selection.Sections.Add()
                              }
                              'Paragraph'
                              {
                                $WordInstance.Selection.InsertParagraph()
                              }
                            }
                            [Void]$WordDoc.application.selection.goto([Microsoft.Office.Interop.Word.WdGoToItem]::wdGoToBookmark,$null,$null,'\EndOfDoc')
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

Options             : None
Description         :
Verb                : Add
Noun                : WordBreak
HelpFile            :
OutputType          : {}
Name                : Add-WordBreak
CommandType         : Function
Source              : PSWordModule
Version             : 1.1.0.5
Visibility          : Public
ModuleName          : PSWordModule
Module              : PSWordModule
RemotingCapability  : PowerShell
Parameters          : {[breaktype, System.Management.Automation.ParameterMetadata], [WordInstance, System.Management.Automation.ParameterMetadata], [WordDoc,
                      System.Management.Automation.ParameterMetadata], [Verbose, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[[-WordInstance] <Object>] [[-WordDoc] <Object>] [-breaktype <string>] [<CommonParameters>]}
HelpUri             :


ScriptBlock         :

                        [CmdletBinding()]
                        param(
                          [Parameter(Position = 0)]
                          [ValidateSet('Austin', 'Banded','Facet','Filigree','Grid','Integral','Ion (Dark)','Ion
                      (Light)','Motion','Retrospect','Semaphore','Sideline','Slice (Dark)','Slice (Light)','Viewmaster','Whisp')]
                          [string]$CoverPage,

                          #Todo cast type instead ie [Microsoft.Office.Interop.Word.Application]$WordInstance but does not work
                          [Parameter(Mandatory = $false)]
                          [alias("Word")]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Application]) { $True } else { throw "WordInstance was not of type
                      [Microsoft.Office.Interop.Word.Application]" } })]
                          $WordInstance = $Global:WordInstance,

                          [Parameter(Mandatory = $false)]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc =$Global:WordDoc
                        )
                        Begin
                        {
                          Add-Type -AssemblyName Microsoft.Office.Interop.Word
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            $Selection = $WordDoc.application.selectio
                            $WordInstance.Templates.LoadBuildingBlocks()
                            $bb = $WordInstance.templates | Where-Object -Property name -EQ -Value 'Built-In Building Blocks.dotx'
                            $part = $bb.BuildingBlockEntries.item($CoverPage)
                            $null = $part.Insert($WordInstance.Selection.range,$true)
                            [Void]$Selection.goto([Microsoft.Office.Interop.Word.WdGoToItem]::wdGoToBookmark,$null,$null,'\EndOfDoc')
                          }
                          catch
                          {
                            #Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

CmdletBinding       : True
DefaultParameterSet :
Definition          :

                        [CmdletBinding()]
                        param(
                          [Parameter(Position = 0)]
                          [ValidateSet('Austin', 'Banded','Facet','Filigree','Grid','Integral','Ion (Dark)','Ion
                      (Light)','Motion','Retrospect','Semaphore','Sideline','Slice (Dark)','Slice (Light)','Viewmaster','Whisp')]
                          [string]$CoverPage,

                          #Todo cast type instead ie [Microsoft.Office.Interop.Word.Application]$WordInstance but does not work
                          [Parameter(Mandatory = $false)]
                          [alias("Word")]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Application]) { $True } else { throw "WordInstance was not of type
                      [Microsoft.Office.Interop.Word.Application]" } })]
                          $WordInstance = $Global:WordInstance,

                          [Parameter(Mandatory = $false)]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc =$Global:WordDoc
                        )
                        Begin
                        {
                          Add-Type -AssemblyName Microsoft.Office.Interop.Word
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            $Selection = $WordDoc.application.selectio
                            $WordInstance.Templates.LoadBuildingBlocks()
                            $bb = $WordInstance.templates | Where-Object -Property name -EQ -Value 'Built-In Building Blocks.dotx'
                            $part = $bb.BuildingBlockEntries.item($CoverPage)
                            $null = $part.Insert($WordInstance.Selection.range,$true)
                            [Void]$Selection.goto([Microsoft.Office.Interop.Word.WdGoToItem]::wdGoToBookmark,$null,$null,'\EndOfDoc')
                          }
                          catch
                          {
                            #Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

Options             : None
Description         :
Verb                : Add
Noun                : WordCoverPage
HelpFile            :
OutputType          : {}
Name                : Add-WordCoverPage
CommandType         : Function
Source              : PSWordModule
Version             : 1.1.0.5
Visibility          : Public
ModuleName          : PSWordModule
Module              : PSWordModule
RemotingCapability  : PowerShell
Parameters          : {[CoverPage, System.Management.Automation.ParameterMetadata], [WordInstance, System.Management.Automation.ParameterMetadata], [WordDoc,
                      System.Management.Automation.ParameterMetadata], [Verbose, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[[-CoverPage] <string>] [-WordInstance <Object>] [-WordDoc <Object>] [<CommonParameters>]}
HelpUri             :


ScriptBlock         :

                        [CmdletBinding( SupportsShouldProcess = $false)]
                        param(
                          [Parameter(Position = 0,HelpMessage = 'Add help message for user',
                          Mandatory = $true)]
                          [String]$picture,
                          $WordDoc
                        )
                        Begin
                        {
                            # do something
                        }
                        Process {

                          try
                          {


                            $image = $WordDoc.InlineShapes
                            $image.AddPicture($picture)

                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End { Write-Verbose -Message "End    : $($Myinvocation.InvocationName)" }

CmdletBinding       : True
DefaultParameterSet :
Definition          :

                        [CmdletBinding( SupportsShouldProcess = $false)]
                        param(
                          [Parameter(Position = 0,HelpMessage = 'Add help message for user',
                          Mandatory = $true)]
                          [String]$picture,
                          $WordDoc
                        )
                        Begin
                        {
                            # do something
                        }
                        Process {

                          try
                          {


                            $image = $WordDoc.InlineShapes
                            $image.AddPicture($picture)

                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End { Write-Verbose -Message "End    : $($Myinvocation.InvocationName)" }

Options             : None
Description         :
Verb                : Add
Noun                : WordPicture
HelpFile            :
OutputType          : {}
Name                : Add-WordPicture
CommandType         : Function
Source              : PSWordModule
Version             : 1.1.0.5
Visibility          : Public
ModuleName          : PSWordModule
Module              : PSWordModule
RemotingCapability  : PowerShell
Parameters          : {[picture, System.Management.Automation.ParameterMetadata], [WordDoc, System.Management.Automation.ParameterMetadata], [Verbose,
                      System.Management.Automation.ParameterMetadata], [Debug, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[-picture] <string> [-WordDoc <Object>] [<CommonParameters>]}
HelpUri             :


ScriptBlock         :

                        [CmdletBinding()]
                        param(
                          [Parameter(Position = 0,HelpMessage = 'psobject to send to word', Mandatory = $true, ValuefromPipeline = $true)]
                          [psobject]$Object,

                          [Parameter(HelpMessage = 'Add help message for user')]
                          [Microsoft.Office.Interop.Word.WdAutoFitBehavior]$WdAutoFitBehavior = 'wdAutoFitContent',

                          [Parameter(HelpMessage = 'Add help message for user')]
                          [Microsoft.Office.Interop.Word.WdDefaultTableBehavior]$WdDefaultTableBehavior = 'wdWord9TableBehavior',

                          [Parameter(HelpMessage = 'Add help message for user')]
                          [bool]$HeaderRow = $true,

                          [Parameter(HelpMessage = 'Add help message for user')]
                          [bool]$TotalRow = $false,

                          [Parameter(HelpMessage = 'Add help message for user')]
                          [bool]$BandedRow = $true,

                          [Parameter(HelpMessage = 'Add help message for user')]
                          [bool]$FirstColumn = $false,

                          [Parameter(HelpMessage = 'Add help message for user')]
                          [bool]$LastColumn = $false,

                          [Parameter(HelpMessage = 'Add help message for user')]
                          [bool]$BandedColumn = $false,

                          [Parameter(Mandatory = $false,ParameterSetName = 'WDTableFormat',HelpMessage = 'Add help message for user')]
                          [Microsoft.Office.Interop.Word.WdTableFormat]$WDTableFormat,

                          #Todo:  Investigate how to do better thru [Microsoft.Office.Interop.Word.??????]
                          [Parameter(Mandatory = $false,ParameterSetName = 'PlainTable',HelpMessage = 'Add help message for user')]
                          [validateSet('Table Grid', 'Table Grid Light','Plain Table 1','Plain Table 2','Plain Table 3','Plain Table 4','Plain Table 5')]
                          [String]$PlainTable,

                          #Todo:  Investigate how to do better thru [Microsoft.Office.Interop.Word.??????]
                          [Parameter( Mandatory = $false,ParameterSetName = 'GridTable')]
                          [ValidateSet('Grid Table 1 Light', 'Grid Table 2','Grid Table 3','Grid Table 4','Grid Table 5 Dark','Grid Table 6 Colorful','Grid Table 7
                      Colorful')]
                          [String]$GridTable,

                          #Todo:  Investigate how to do better thru [Microsoft.Office.Interop.Word.??????]
                          [Parameter( Mandatory = $false,ParameterSetName = 'ListTable')]
                          [ValidateSet('List Table 1 Light', 'List Table 2','List Table 3','List Table 4','List Table 5 Dark','List Table 6 Colorful','List Table 7
                      Colorful')]
                          [String]$ListTable,

                          #Todo:  Investigate how to do better thru [Microsoft.Office.Interop.Word.??????]
                          [Parameter( Mandatory = $false,ParameterSetName = 'ListTable')]
                          [ValidateSet('Accent 1', 'Accent 2','Accent 3','Accent 4','Accent 5','Accent 6')]
                          [String]$ListAccent,

                          #Todo:  Investigate how to do better thru [Microsoft.Office.Interop.Word.??????]
                          [Parameter( Mandatory = $false,ParameterSetName = 'GridTable')]
                          [ValidateSet('Accent 1', 'Accent 2','Accent 3','Accent 4','Accent 5','Accent 6')]
                          [string]$GridAccent,

                          [Parameter( Mandatory = $false)]
                          [switch]$RemoveProperties,

                          [Parameter( Mandatory = $false,HelpMessage = 'Add help message for user')]
                          [switch]$VerticleTable,

                          [Parameter( Mandatory = $false,HelpMessage = 'Add help message for user')]
                          [switch]$NoParagraph,

                          [Parameter(Mandatory = $false,HelpMessage = 'Add help message for user')]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc = $Global:WordDoc
                        )

                        Begin { Add-Type -AssemblyName Microsoft.Office.Interop.Word
                        Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)" }
                        Process {
                          try
                          {
                            $TableRange = $WordDoc.application.selection.range

                            if (!($VerticleTable)) {
                              $Columns = @($Object | Get-Member -MemberType Property, NoteProperty).count
                              if($RemoveProperties) { $Rows = @($Object).count }
                              else {$Rows = @($Object).count +1 }
                            }
                            if ($VerticleTable) {
                              if($RemoveProperties) { $Columns = @($Object).count }
                              else {$Columns = @($Object).count +1 }
                              $Rows = @($Object | Get-Member -MemberType Property, NoteProperty).count
                            }

                            $Table = $WordDoc.Tables.Add($TableRange, $Rows, $Columns,$WdDefaultTableBehavior,$WdAutoFitBehavior)
                            if ($PSBoundParameters.ContainsKey('WDTableFormat')){ $Table.autoformat([Microsoft.Office.Interop.Word.WdTableFormat]::$WDTableFormat) }
                            if ($PSBoundParameters.ContainsKey('PlainTable')){ $Table.style = $PlainTable }
                            if ($PSBoundParameters.ContainsKey('GridTable')) {
                              if($PSBoundParameters.ContainsKey('GridAccent'))
                              {
                                $Table.style = ($GridTable + ' - ' + $GridAccent)
                              }
                              else
                              {
                                $Table.style = $GridTable
                              }
                            }
                            if ($PSBoundParameters.ContainsKey('ListTable')) {
                              if($PSBoundParameters.ContainsKey('ListAccent'))
                              {$Table.style = ($ListTable + ' - ' + $ListAccent)}
                              else
                              {$Table.style = $ListTable }
                            }
                            if ($PSBoundParameters.ContainsKey('HeaderRow'))
                            {
                              if ($HeaderRow)
                              { $Table.ApplyStyleHeadingRows = $true }
                              else
                              {$Table.ApplyStyleHeadingRows = $false }
                            }
                            if ($PSBoundParameters.ContainsKey('TotalRow'))
                            {
                              if ($TotalRow)
                              {
                                $Table.ApplyStyleLastRow = $true
                              }
                              else
                              {
                                $Table.ApplyStyleLastRow = $false
                              }
                            }
                            if ($PSBoundParameters.ContainsKey('BandedRow'))
                            {
                              if ($BandedRow)
                              {
                                $Table.ApplyStyleRowBands = $true
                              }
                              else
                              {
                                $Table.ApplyStyleRowBands = $false
                              }
                            }
                            if ($PSBoundParameters.ContainsKey('FirstColumn'))
                            {
                              if ($FirstColumn)
                              {
                                $Table.ApplyStyleFirstColumn = $true
                              }
                              else
                              {
                                $Table.ApplyStyleFirstColumn = $false
                              }
                            }
                            if ($PSBoundParameters.ContainsKey('LastColumn'))
                            {
                              if ($LastColumn)
                              {
                                $Table.ApplyStyleLastColumn = $true
                              }
                              else
                              {
                                $Table.ApplyStyleLastColumn = $false
                              }
                            }
                            if ($PSBoundParameters.ContainsKey('BandedColumn'))
                            {
                              if($BandedColumn)
                              {
                                $Table.ApplyStyleColumnBands = $true
                              }
                              else
                              {
                                $Table.ApplyStyleColumnBands = $false
                              }
                            }
                            [int]$Row = 1
                            [int]$Col = 1
                            $PropertyNames = @()
                            if ($Object -is [Array]){[ARRAY]$HeaderNames = $Object[0].psobject.properties | ForEach-Object -Process { $_.Name }}
                            else { [ARRAY]$HeaderNames = $Object.psobject.properties | ForEach-Object -Process { $_.Name } }

                            if($RemoveProperties) { $Table.ApplyStyleHeadingRows = $false }

                            if (!($VerticleTable)) {
                              for ($i = 0; $i -le $Columns -1; $i++)
                              {
                                $PropertyNames += $HeaderNames[$i]
                                if(!$RemoveProperties)
                                {
                                  $Table.Cell($Row,$Col).Range.Text = $HeaderNames[$i]
                                }
                                $Col++
                              }
                              if(!$RemoveProperties)
                              { $Row = 2 }

                              $Object |
                              ForEach-Object -Process {
                                $Col = 1
                                for ($i = 0; $i -le $Columns -1; $i++)
                                {
                                  $Table.Cell($Row,$Col).Range.Text = (($_."$($PropertyNames[$i])") -as [System.string])
                                  $Col++
                                }
                                $Row++
                              }
                            }
                            if ($VerticleTable) {
                              for ($i = 0; $i -le $Rows -1; $i++)
                              {
                                $PropertyNames += $HeaderNames[$i]
                                if(!$RemoveProperties)
                                {
                                  $Table.Cell($Row,$Col).Range.Text = $HeaderNames[$i]
                                }
                                $Row++
                              }
                              if(!$RemoveProperties)
                              {
                                $Col = 2
                              }
                              $Object |
                              ForEach-Object -Process {
                                $Row = 1
                                for ($i = 0; $i -le $Rows -1; $i++)
                                {
                                  $Table.Cell($Row,$Col).Range.Text = (($_."$($PropertyNames[$i])") -as [System.string])
                                  $Row++
                                }
                                $Col++
                              }
                            }
                            $Selection = $WordDoc.application.selection
                            [Void]$Selection.goto([Microsoft.Office.Interop.Word.WdGoToItem]::wdGoToBookmark,$null,$null,'\EndOfDoc')
                            if(!($NoParagraph))
                            {
                              $WordDoc.Application.Selection.TypeParagraph()
                            }
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

CmdletBinding       : True
DefaultParameterSet :
Definition          :

                        [CmdletBinding()]
                        param(
                          [Parameter(Position = 0,HelpMessage = 'psobject to send to word', Mandatory = $true, ValuefromPipeline = $true)]
                          [psobject]$Object,

                          [Parameter(HelpMessage = 'Add help message for user')]
                          [Microsoft.Office.Interop.Word.WdAutoFitBehavior]$WdAutoFitBehavior = 'wdAutoFitContent',

                          [Parameter(HelpMessage = 'Add help message for user')]
                          [Microsoft.Office.Interop.Word.WdDefaultTableBehavior]$WdDefaultTableBehavior = 'wdWord9TableBehavior',

                          [Parameter(HelpMessage = 'Add help message for user')]
                          [bool]$HeaderRow = $true,

                          [Parameter(HelpMessage = 'Add help message for user')]
                          [bool]$TotalRow = $false,

                          [Parameter(HelpMessage = 'Add help message for user')]
                          [bool]$BandedRow = $true,

                          [Parameter(HelpMessage = 'Add help message for user')]
                          [bool]$FirstColumn = $false,

                          [Parameter(HelpMessage = 'Add help message for user')]
                          [bool]$LastColumn = $false,

                          [Parameter(HelpMessage = 'Add help message for user')]
                          [bool]$BandedColumn = $false,

                          [Parameter(Mandatory = $false,ParameterSetName = 'WDTableFormat',HelpMessage = 'Add help message for user')]
                          [Microsoft.Office.Interop.Word.WdTableFormat]$WDTableFormat,

                          #Todo:  Investigate how to do better thru [Microsoft.Office.Interop.Word.??????]
                          [Parameter(Mandatory = $false,ParameterSetName = 'PlainTable',HelpMessage = 'Add help message for user')]
                          [validateSet('Table Grid', 'Table Grid Light','Plain Table 1','Plain Table 2','Plain Table 3','Plain Table 4','Plain Table 5')]
                          [String]$PlainTable,

                          #Todo:  Investigate how to do better thru [Microsoft.Office.Interop.Word.??????]
                          [Parameter( Mandatory = $false,ParameterSetName = 'GridTable')]
                          [ValidateSet('Grid Table 1 Light', 'Grid Table 2','Grid Table 3','Grid Table 4','Grid Table 5 Dark','Grid Table 6 Colorful','Grid Table 7
                      Colorful')]
                          [String]$GridTable,

                          #Todo:  Investigate how to do better thru [Microsoft.Office.Interop.Word.??????]
                          [Parameter( Mandatory = $false,ParameterSetName = 'ListTable')]
                          [ValidateSet('List Table 1 Light', 'List Table 2','List Table 3','List Table 4','List Table 5 Dark','List Table 6 Colorful','List Table 7
                      Colorful')]
                          [String]$ListTable,

                          #Todo:  Investigate how to do better thru [Microsoft.Office.Interop.Word.??????]
                          [Parameter( Mandatory = $false,ParameterSetName = 'ListTable')]
                          [ValidateSet('Accent 1', 'Accent 2','Accent 3','Accent 4','Accent 5','Accent 6')]
                          [String]$ListAccent,

                          #Todo:  Investigate how to do better thru [Microsoft.Office.Interop.Word.??????]
                          [Parameter( Mandatory = $false,ParameterSetName = 'GridTable')]
                          [ValidateSet('Accent 1', 'Accent 2','Accent 3','Accent 4','Accent 5','Accent 6')]
                          [string]$GridAccent,

                          [Parameter( Mandatory = $false)]
                          [switch]$RemoveProperties,

                          [Parameter( Mandatory = $false,HelpMessage = 'Add help message for user')]
                          [switch]$VerticleTable,

                          [Parameter( Mandatory = $false,HelpMessage = 'Add help message for user')]
                          [switch]$NoParagraph,

                          [Parameter(Mandatory = $false,HelpMessage = 'Add help message for user')]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc = $Global:WordDoc
                        )

                        Begin { Add-Type -AssemblyName Microsoft.Office.Interop.Word
                        Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)" }
                        Process {
                          try
                          {
                            $TableRange = $WordDoc.application.selection.range

                            if (!($VerticleTable)) {
                              $Columns = @($Object | Get-Member -MemberType Property, NoteProperty).count
                              if($RemoveProperties) { $Rows = @($Object).count }
                              else {$Rows = @($Object).count +1 }
                            }
                            if ($VerticleTable) {
                              if($RemoveProperties) { $Columns = @($Object).count }
                              else {$Columns = @($Object).count +1 }
                              $Rows = @($Object | Get-Member -MemberType Property, NoteProperty).count
                            }

                            $Table = $WordDoc.Tables.Add($TableRange, $Rows, $Columns,$WdDefaultTableBehavior,$WdAutoFitBehavior)
                            if ($PSBoundParameters.ContainsKey('WDTableFormat')){ $Table.autoformat([Microsoft.Office.Interop.Word.WdTableFormat]::$WDTableFormat) }
                            if ($PSBoundParameters.ContainsKey('PlainTable')){ $Table.style = $PlainTable }
                            if ($PSBoundParameters.ContainsKey('GridTable')) {
                              if($PSBoundParameters.ContainsKey('GridAccent'))
                              {
                                $Table.style = ($GridTable + ' - ' + $GridAccent)
                              }
                              else
                              {
                                $Table.style = $GridTable
                              }
                            }
                            if ($PSBoundParameters.ContainsKey('ListTable')) {
                              if($PSBoundParameters.ContainsKey('ListAccent'))
                              {$Table.style = ($ListTable + ' - ' + $ListAccent)}
                              else
                              {$Table.style = $ListTable }
                            }
                            if ($PSBoundParameters.ContainsKey('HeaderRow'))
                            {
                              if ($HeaderRow)
                              { $Table.ApplyStyleHeadingRows = $true }
                              else
                              {$Table.ApplyStyleHeadingRows = $false }
                            }
                            if ($PSBoundParameters.ContainsKey('TotalRow'))
                            {
                              if ($TotalRow)
                              {
                                $Table.ApplyStyleLastRow = $true
                              }
                              else
                              {
                                $Table.ApplyStyleLastRow = $false
                              }
                            }
                            if ($PSBoundParameters.ContainsKey('BandedRow'))
                            {
                              if ($BandedRow)
                              {
                                $Table.ApplyStyleRowBands = $true
                              }
                              else
                              {
                                $Table.ApplyStyleRowBands = $false
                              }
                            }
                            if ($PSBoundParameters.ContainsKey('FirstColumn'))
                            {
                              if ($FirstColumn)
                              {
                                $Table.ApplyStyleFirstColumn = $true
                              }
                              else
                              {
                                $Table.ApplyStyleFirstColumn = $false
                              }
                            }
                            if ($PSBoundParameters.ContainsKey('LastColumn'))
                            {
                              if ($LastColumn)
                              {
                                $Table.ApplyStyleLastColumn = $true
                              }
                              else
                              {
                                $Table.ApplyStyleLastColumn = $false
                              }
                            }
                            if ($PSBoundParameters.ContainsKey('BandedColumn'))
                            {
                              if($BandedColumn)
                              {
                                $Table.ApplyStyleColumnBands = $true
                              }
                              else
                              {
                                $Table.ApplyStyleColumnBands = $false
                              }
                            }
                            [int]$Row = 1
                            [int]$Col = 1
                            $PropertyNames = @()
                            if ($Object -is [Array]){[ARRAY]$HeaderNames = $Object[0].psobject.properties | ForEach-Object -Process { $_.Name }}
                            else { [ARRAY]$HeaderNames = $Object.psobject.properties | ForEach-Object -Process { $_.Name } }

                            if($RemoveProperties) { $Table.ApplyStyleHeadingRows = $false }

                            if (!($VerticleTable)) {
                              for ($i = 0; $i -le $Columns -1; $i++)
                              {
                                $PropertyNames += $HeaderNames[$i]
                                if(!$RemoveProperties)
                                {
                                  $Table.Cell($Row,$Col).Range.Text = $HeaderNames[$i]
                                }
                                $Col++
                              }
                              if(!$RemoveProperties)
                              { $Row = 2 }

                              $Object |
                              ForEach-Object -Process {
                                $Col = 1
                                for ($i = 0; $i -le $Columns -1; $i++)
                                {
                                  $Table.Cell($Row,$Col).Range.Text = (($_."$($PropertyNames[$i])") -as [System.string])
                                  $Col++
                                }
                                $Row++
                              }
                            }
                            if ($VerticleTable) {
                              for ($i = 0; $i -le $Rows -1; $i++)
                              {
                                $PropertyNames += $HeaderNames[$i]
                                if(!$RemoveProperties)
                                {
                                  $Table.Cell($Row,$Col).Range.Text = $HeaderNames[$i]
                                }
                                $Row++
                              }
                              if(!$RemoveProperties)
                              {
                                $Col = 2
                              }
                              $Object |
                              ForEach-Object -Process {
                                $Row = 1
                                for ($i = 0; $i -le $Rows -1; $i++)
                                {
                                  $Table.Cell($Row,$Col).Range.Text = (($_."$($PropertyNames[$i])") -as [System.string])
                                  $Row++
                                }
                                $Col++
                              }
                            }
                            $Selection = $WordDoc.application.selection
                            [Void]$Selection.goto([Microsoft.Office.Interop.Word.WdGoToItem]::wdGoToBookmark,$null,$null,'\EndOfDoc')
                            if(!($NoParagraph))
                            {
                              $WordDoc.Application.Selection.TypeParagraph()
                            }
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

Options             : None
Description         :
Verb                : Add
Noun                : WordTable
HelpFile            :
OutputType          :
Name                : Add-WordTable
CommandType         : Function
Source              : PSWordModule
Version             : 1.1.0.5
Visibility          : Public
ModuleName          : PSWordModule
Module              : PSWordModule
RemotingCapability  :
Parameters          :
ParameterSets       :
HelpUri             :


ScriptBlock         :
                        [CmdletBinding()]
                        param(
                          [Parameter(Mandatory = $true,HelpMessage = 'Add word document or template to import',Position = 0)]
                          [ValidateScript({ Test-Path -Path $_ })]
                          [string]$filename,
                          [Parameter(Mandatory = $false)]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc =$Global:WordDoc
                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            $WordDoc.Application.Selection.InsertFile([ref]($filename))
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

CmdletBinding       : True
DefaultParameterSet :
Definition          :
                        [CmdletBinding()]
                        param(
                          [Parameter(Mandatory = $true,HelpMessage = 'Add word document or template to import',Position = 0)]
                          [ValidateScript({ Test-Path -Path $_ })]
                          [string]$filename,
                          [Parameter(Mandatory = $false)]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc =$Global:WordDoc
                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            $WordDoc.Application.Selection.InsertFile([ref]($filename))
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

Options             : None
Description         :
Verb                : Add
Noun                : WordTemplate
HelpFile            :
OutputType          : {}
Name                : Add-WordTemplate
CommandType         : Function
Source              : PSWordModule
Version             : 1.1.0.5
Visibility          : Public
ModuleName          : PSWordModule
Module              : PSWordModule
RemotingCapability  : PowerShell
Parameters          : {[filename, System.Management.Automation.ParameterMetadata], [WordDoc, System.Management.Automation.ParameterMetadata], [Verbose,
                      System.Management.Automation.ParameterMetadata], [Debug, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[-filename] <string> [-WordDoc <Object>] [<CommonParameters>]}
HelpUri             :


ScriptBlock         :

                        [CmdletBinding()]
                        param(
                          [Parameter(Position = 0,HelpMessage = 'Add help message for user',
                          Mandatory = $true)]
                          [String]$text,

                          [Parameter(Position = 1,
                          Mandatory = $false)]
                          [Microsoft.Office.Interop.Word.WdColor]$WdColor,

                          [Parameter(Position = 2)]
                          [Microsoft.Office.Interop.Word.WdBuiltinStyle]$WDBuiltinStyle,

                          [Parameter(Mandatory = $false)]
                          [alias('word')]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc = $Global:WordDoc
                        )
                        Begin
                        {
                          Add-Type -AssemblyName Microsoft.Office.Interop.Word
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            if ($PSBoundParameters.ContainsKey('Color'))
                            {
                              $WordDoc.Application.Selection.font.Color = $WdColor
                            }
                            if ($PSBoundParameters.ContainsKey('WDBuiltinStyle'))
                            {
                              $WordDoc.application.selection.Style = $WDBuiltinStyle
                            }

                            $WordDoc.Application.Selection.TypeText("$($text)")
                            $WordDoc.Application.Selection.TypeParagraph()
                            $WordDoc.application.selection.Style = [Microsoft.Office.Interop.Word.WdBuiltinStyle]'wdStyleNormal'
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

CmdletBinding       : True
DefaultParameterSet :
Definition          :

                        [CmdletBinding()]
                        param(
                          [Parameter(Position = 0,HelpMessage = 'Add help message for user',
                          Mandatory = $true)]
                          [String]$text,

                          [Parameter(Position = 1,
                          Mandatory = $false)]
                          [Microsoft.Office.Interop.Word.WdColor]$WdColor,

                          [Parameter(Position = 2)]
                          [Microsoft.Office.Interop.Word.WdBuiltinStyle]$WDBuiltinStyle,

                          [Parameter(Mandatory = $false)]
                          [alias('word')]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc = $Global:WordDoc
                        )
                        Begin
                        {
                          Add-Type -AssemblyName Microsoft.Office.Interop.Word
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            if ($PSBoundParameters.ContainsKey('Color'))
                            {
                              $WordDoc.Application.Selection.font.Color = $WdColor
                            }
                            if ($PSBoundParameters.ContainsKey('WDBuiltinStyle'))
                            {
                              $WordDoc.application.selection.Style = $WDBuiltinStyle
                            }

                            $WordDoc.Application.Selection.TypeText("$($text)")
                            $WordDoc.Application.Selection.TypeParagraph()
                            $WordDoc.application.selection.Style = [Microsoft.Office.Interop.Word.WdBuiltinStyle]'wdStyleNormal'
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

Options             : None
Description         :
Verb                : Add
Noun                : WordText
HelpFile            :
OutputType          :
Name                : Add-WordText
CommandType         : Function
Source              : PSWordModule
Version             : 1.1.0.5
Visibility          : Public
ModuleName          : PSWordModule
Module              : PSWordModule
RemotingCapability  :
Parameters          :
ParameterSets       :
HelpUri             :


ScriptBlock         :
                        [CmdletBinding()]
                        param (
                          #Todo cast type instead ie [Microsoft.Office.Interop.Word.Application]$WordInstance but does not work
                          [Parameter(Mandatory = $false)]
                          [alias("Word")]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Application]) { $True } else { throw "WordInstance was not of type
                      [Microsoft.Office.Interop.Word.Application]" } })]
                          $WordInstance = $Global:WordInstance,

                          [Parameter(Mandatory = $false)]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc =$Global:WordDoc
                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            $toc = $WordDoc.TablesOfContents.Add($WordInstance.selection.Range)
                            $toc.TabLeader = 0
                            $toc.HeadingStyles
                            $WordDoc.Application.Selection.TypeParagraph()
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

CmdletBinding       : True
DefaultParameterSet :
Definition          :
                        [CmdletBinding()]
                        param (
                          #Todo cast type instead ie [Microsoft.Office.Interop.Word.Application]$WordInstance but does not work
                          [Parameter(Mandatory = $false)]
                          [alias("Word")]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Application]) { $True } else { throw "WordInstance was not of type
                      [Microsoft.Office.Interop.Word.Application]" } })]
                          $WordInstance = $Global:WordInstance,

                          [Parameter(Mandatory = $false)]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc =$Global:WordDoc
                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            $toc = $WordDoc.TablesOfContents.Add($WordInstance.selection.Range)
                            $toc.TabLeader = 0
                            $toc.HeadingStyles
                            $WordDoc.Application.Selection.TypeParagraph()
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

Options             : None
Description         :
Verb                : Add
Noun                : WordTOC
HelpFile            :
OutputType          : {}
Name                : Add-WordTOC
CommandType         : Function
Source              : PSWordModule
Version             : 1.1.0.5
Visibility          : Public
ModuleName          : PSWordModule
Module              : PSWordModule
RemotingCapability  : PowerShell
Parameters          : {[WordInstance, System.Management.Automation.ParameterMetadata], [WordDoc, System.Management.Automation.ParameterMetadata], [Verbose,
                      System.Management.Automation.ParameterMetadata], [Debug, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[[-WordInstance] <Object>] [[-WordDoc] <Object>] [<CommonParameters>]}
HelpUri             :


ScriptBlock         :

                        [CmdletBinding()]
                        param(
                          [Parameter(Mandatory = $true)]
                          [alias("Word")]
                          #Todo cast type instead ie [Microsoft.Office.Interop.Word.Application]$WordInstance but does not work
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Application]) { $True } else { throw "WordInstance was not of type
                      [Microsoft.Office.Interop.Word.Application]" } })]
                          $WordInstance,

                          [Parameter(Mandatory = $true)]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc
                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            $WordDoc.Close()
                            $WordInstance.Quit()
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End { Write-Verbose -Message "End    : $($Myinvocation.InvocationName)" }

CmdletBinding       : True
DefaultParameterSet :
Definition          :

                        [CmdletBinding()]
                        param(
                          [Parameter(Mandatory = $true)]
                          [alias("Word")]
                          #Todo cast type instead ie [Microsoft.Office.Interop.Word.Application]$WordInstance but does not work
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Application]) { $True } else { throw "WordInstance was not of type
                      [Microsoft.Office.Interop.Word.Application]" } })]
                          $WordInstance,

                          [Parameter(Mandatory = $true)]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc
                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            $WordDoc.Close()
                            $WordInstance.Quit()
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End { Write-Verbose -Message "End    : $($Myinvocation.InvocationName)" }

Options             : None
Description         :
Verb                : Close
Noun                : WordDocument
HelpFile            :
OutputType          : {}
Name                : Close-WordDocument
CommandType         : Function
Source              : PSWordModule
Version             : 1.1.0.5
Visibility          : Public
ModuleName          : PSWordModule
Module              : PSWordModule
RemotingCapability  : PowerShell
Parameters          : {[WordInstance, System.Management.Automation.ParameterMetadata], [WordDoc, System.Management.Automation.ParameterMetadata], [Verbose,
                      System.Management.Automation.ParameterMetadata], [Debug, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[-WordInstance] <Object> [-WordDoc] <Object> [<CommonParameters>]}
HelpUri             :


ScriptBlock         :
                        [CmdletBinding()]
                        param()
                        Begin { Add-Type -AssemblyName Microsoft.Office.Interop.Word
                        Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)" }
                        Process {

                          try
                          {
                            [Enum]::GetNames([Microsoft.Office.Interop.Word.WdBuiltinStyle]) |
                            ForEach-Object -Process {[pscustomobject]@{
                                Style = $_
                              }
                            }
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

CmdletBinding       : True
DefaultParameterSet :
Definition          :
                        [CmdletBinding()]
                        param()
                        Begin { Add-Type -AssemblyName Microsoft.Office.Interop.Word
                        Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)" }
                        Process {

                          try
                          {
                            [Enum]::GetNames([Microsoft.Office.Interop.Word.WdBuiltinStyle]) |
                            ForEach-Object -Process {[pscustomobject]@{
                                Style = $_
                              }
                            }
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

Options             : None
Description         :
Verb                : Get
Noun                : WordBuiltinStyle
HelpFile            :
OutputType          : {}
Name                : Get-WordBuiltinStyle
CommandType         : Function
Source              : PSWordModule
Version             : 1.1.0.5
Visibility          : Public
ModuleName          : PSWordModule
Module              : PSWordModule
RemotingCapability  : PowerShell
Parameters          : {[Verbose, System.Management.Automation.ParameterMetadata], [Debug, System.Management.Automation.ParameterMetadata], [ErrorAction,
                      System.Management.Automation.ParameterMetadata], [WarningAction, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[<CommonParameters>]}
HelpUri             :


ScriptBlock         :
                        [CmdletBinding()]
                        param()

                        Begin { Add-Type -AssemblyName Microsoft.Office.Interop.Word
                        Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)" }
                        Process
                        {
                          try
                          {
                            [Enum]::GetNames([Microsoft.Office.Interop.Word.WdTableFormat]) |
                            ForEach-Object -Process {[pscustomobject]@{
                                Style = $_
                              }
                            }
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

CmdletBinding       : True
DefaultParameterSet :
Definition          :
                        [CmdletBinding()]
                        param()

                        Begin { Add-Type -AssemblyName Microsoft.Office.Interop.Word
                        Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)" }
                        Process
                        {
                          try
                          {
                            [Enum]::GetNames([Microsoft.Office.Interop.Word.WdTableFormat]) |
                            ForEach-Object -Process {[pscustomobject]@{
                                Style = $_
                              }
                            }
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

Options             : None
Description         :
Verb                : Get
Noun                : WordWdTableFormat
HelpFile            :
OutputType          : {}
Name                : Get-WordWdTableFormat
CommandType         : Function
Source              : PSWordModule
Version             : 1.1.0.5
Visibility          : Public
ModuleName          : PSWordModule
Module              : PSWordModule
RemotingCapability  : PowerShell
Parameters          : {[Verbose, System.Management.Automation.ParameterMetadata], [Debug, System.Management.Automation.ParameterMetadata], [ErrorAction,
                      System.Management.Automation.ParameterMetadata], [WarningAction, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[<CommonParameters>]}
HelpUri             :


ScriptBlock         :
                        [CmdletBinding()]
                        Param(

                          #Todo cast type instead ie [Microsoft.Office.Interop.Word.Application]$WordInstance but does not work
                          [Parameter(Mandatory=$false,Position = 0,HelpMessage = 'Add help message for user')]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Application]) { $True } else { throw "WordInstance was not of type
                      [Microsoft.Office.Interop.Word.Application]" } })]
                          $WordInstance = $GLOBAL:WordInstance,

                          #Todo fix up the check if the variable already exists
                          [Parameter(Mandatory=$false,Position = 1,HelpMessage = 'Add help message for user')]
                          [ValidateScript({ if([boolean]!(get-variable $_ -ErrorAction SilentlyContinue)){ $true } else {throw "Variable $($_) already exists" } })]
                          [String]$WordDocName = "WordDoc"

                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            $WordDoc = $WordInstance.Documents.Add()
                            $WordDoc.Activate()
                            New-Variable -Name $WordDocName -Value $WordDoc -Scope Global -ErrorAction SilentlyContinue
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

CmdletBinding       : True
DefaultParameterSet :
Definition          :
                        [CmdletBinding()]
                        Param(

                          #Todo cast type instead ie [Microsoft.Office.Interop.Word.Application]$WordInstance but does not work
                          [Parameter(Mandatory=$false,Position = 0,HelpMessage = 'Add help message for user')]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Application]) { $True } else { throw "WordInstance was not of type
                      [Microsoft.Office.Interop.Word.Application]" } })]
                          $WordInstance = $GLOBAL:WordInstance,

                          #Todo fix up the check if the variable already exists
                          [Parameter(Mandatory=$false,Position = 1,HelpMessage = 'Add help message for user')]
                          [ValidateScript({ if([boolean]!(get-variable $_ -ErrorAction SilentlyContinue)){ $true } else {throw "Variable $($_) already exists" } })]
                          [String]$WordDocName = "WordDoc"

                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            $WordDoc = $WordInstance.Documents.Add()
                            $WordDoc.Activate()
                            New-Variable -Name $WordDocName -Value $WordDoc -Scope Global -ErrorAction SilentlyContinue
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

Options             : None
Description         :
Verb                : New
Noun                : WordDocument
HelpFile            :
OutputType          : {}
Name                : New-WordDocument
CommandType         : Function
Source              : PSWordModule
Version             : 1.1.0.5
Visibility          : Public
ModuleName          : PSWordModule
Module              : PSWordModule
RemotingCapability  : PowerShell
Parameters          : {[WordInstance, System.Management.Automation.ParameterMetadata], [WordDocName, System.Management.Automation.ParameterMetadata], [Verbose,
                      System.Management.Automation.ParameterMetadata], [Debug, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[[-WordInstance] <Object>] [[-WordDocName] <string>] [<CommonParameters>]}
HelpUri             :


ScriptBlock         :
                        [CmdletBinding()]
                        [alias("Invoke-Word")]  ##Legacy only - Please dont use in scripts as this will be removed soon
                        Param(

                          #Todo: Investigate if there is a better way than ValidateScript
                          [Parameter(Mandatory=$false,Position = 0,HelpMessage = 'Add help message for user')]
                          [ValidateScript({ if([boolean]!(get-variable $_ -ErrorAction SilentlyContinue)){ $true } else {throw "Variable $($_) already exists" } })]
                          [string]$WordInstanceName = "WordInstance",

                          [Parameter(Mandatory=$false,Position = 1,HelpMessage = 'Display word or keep it hidden')]
                          [bool]$Visable = $true
                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          #Todo: Investigate a better way to catch these errors
                          try
                          {
                            #Load required for Word assembly
                            Add-Type -AssemblyName Microsoft.Office.Interop.Word -ErrorAction SilentlyContinue
                          }
                          catch
                          {
                            Write-Warning  -Message "$($MyInvocation.InvocationName) - Unable to add Word Assembly, Word must be installed for this module... exiting"
                            break
                          }
                          try
                          {
                            #Create New Word Application
                            $Word = New-Object -ComObject Word.Application -Property @{Visible=$Visable}
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - Unable to Invoke Word... exiting"
                            break
                          }
                          try
                          {
                            #Create word Variable
                            #Todo: Investigate a better way if any ?
                            New-Variable -Name $WordInstanceName -Value $Word -Scope Global  -ErrorAction SilentlyContinue
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - Unable to create variable... exiting"
                            break
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

CmdletBinding       : True
DefaultParameterSet :
Definition          :
                        [CmdletBinding()]
                        [alias("Invoke-Word")]  ##Legacy only - Please dont use in scripts as this will be removed soon
                        Param(

                          #Todo: Investigate if there is a better way than ValidateScript
                          [Parameter(Mandatory=$false,Position = 0,HelpMessage = 'Add help message for user')]
                          [ValidateScript({ if([boolean]!(get-variable $_ -ErrorAction SilentlyContinue)){ $true } else {throw "Variable $($_) already exists" } })]
                          [string]$WordInstanceName = "WordInstance",

                          [Parameter(Mandatory=$false,Position = 1,HelpMessage = 'Display word or keep it hidden')]
                          [bool]$Visable = $true
                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          #Todo: Investigate a better way to catch these errors
                          try
                          {
                            #Load required for Word assembly
                            Add-Type -AssemblyName Microsoft.Office.Interop.Word -ErrorAction SilentlyContinue
                          }
                          catch
                          {
                            Write-Warning  -Message "$($MyInvocation.InvocationName) - Unable to add Word Assembly, Word must be installed for this module... exiting"
                            break
                          }
                          try
                          {
                            #Create New Word Application
                            $Word = New-Object -ComObject Word.Application -Property @{Visible=$Visable}
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - Unable to Invoke Word... exiting"
                            break
                          }
                          try
                          {
                            #Create word Variable
                            #Todo: Investigate a better way if any ?
                            New-Variable -Name $WordInstanceName -Value $Word -Scope Global  -ErrorAction SilentlyContinue
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - Unable to create variable... exiting"
                            break
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

Options             : None
Description         :
Verb                : New
Noun                : WordInstance
HelpFile            :
OutputType          : {}
Name                : New-WordInstance
CommandType         : Function
Source              : PSWordModule
Version             : 1.1.0.5
Visibility          : Public
ModuleName          : PSWordModule
Module              : PSWordModule
RemotingCapability  : PowerShell
Parameters          : {[WordInstanceName, System.Management.Automation.ParameterMetadata], [Visable, System.Management.Automation.ParameterMetadata], [Verbose,
                      System.Management.Automation.ParameterMetadata], [Debug, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[[-WordInstanceName] <string>] [[-Visable] <bool>] [<CommonParameters>]}
HelpUri             :


ScriptBlock         :
                        [CmdletBinding()]
                        Param(
                          [Parameter(Mandatory = $true,HelpMessage = 'Add help message for user',Position = 0)]
                          [Microsoft.Office.Interop.Word.WdSaveFormat]$WordSaveFormat,

                          [Parameter(Mandatory = $true,HelpMessage = 'Add help message for user',Position = 1)]
                          [string]$filename,

                          [Parameter(Mandatory = $true,HelpMessage = 'Add help message for user')]
                          [String]$folder,

                          [Parameter(Mandatory = $true,HelpMessage = 'Add help message for user')]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc
                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            if ($PSBoundParameters.ContainsKey('folder'))
                            {
                              $filename = Join-Path -Path $folder -ChildPath $filename
                            }
                            $WordDoc.SaveAs([ref]($filename) ,$WordSaveFormat)
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

CmdletBinding       : True
DefaultParameterSet :
Definition          :
                        [CmdletBinding()]
                        Param(
                          [Parameter(Mandatory = $true,HelpMessage = 'Add help message for user',Position = 0)]
                          [Microsoft.Office.Interop.Word.WdSaveFormat]$WordSaveFormat,

                          [Parameter(Mandatory = $true,HelpMessage = 'Add help message for user',Position = 1)]
                          [string]$filename,

                          [Parameter(Mandatory = $true,HelpMessage = 'Add help message for user')]
                          [String]$folder,

                          [Parameter(Mandatory = $true,HelpMessage = 'Add help message for user')]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc
                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            if ($PSBoundParameters.ContainsKey('folder'))
                            {
                              $filename = Join-Path -Path $folder -ChildPath $filename
                            }
                            $WordDoc.SaveAs([ref]($filename) ,$WordSaveFormat)
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

Options             : None
Description         :
Verb                : Save
Noun                : WordDocument
HelpFile            :
OutputType          :
Name                : Save-WordDocument
CommandType         : Function
Source              : PSWordModule
Version             : 1.1.0.5
Visibility          : Public
ModuleName          : PSWordModule
Module              : PSWordModule
RemotingCapability  :
Parameters          :
ParameterSets       :
HelpUri             :


ScriptBlock         :

                        [CmdletBinding()]
                        param(

                          [Parameter(Position = 0,HelpMessage = 'Add help message for user',Mandatory = $true)]
                          [Microsoft.Office.Interop.Word.WdBuiltInProperty]$WdBuiltInProperty,

                          [Parameter(Position = 1,HelpMessage = 'Add help message for user',mandatory = $true)]
                          [String]$text,

                          [Parameter(Mandatory = $false)]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc =$Global:WordDoc
                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            Write-Verbose -Message $WdBuiltInProperty
                            $WordDoc.BuiltInDocumentProperties.item($WdBuiltInProperty).value = $text
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

CmdletBinding       : True
DefaultParameterSet :
Definition          :

                        [CmdletBinding()]
                        param(

                          [Parameter(Position = 0,HelpMessage = 'Add help message for user',Mandatory = $true)]
                          [Microsoft.Office.Interop.Word.WdBuiltInProperty]$WdBuiltInProperty,

                          [Parameter(Position = 1,HelpMessage = 'Add help message for user',mandatory = $true)]
                          [String]$text,

                          [Parameter(Mandatory = $false)]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc =$Global:WordDoc
                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            Write-Verbose -Message $WdBuiltInProperty
                            $WordDoc.BuiltInDocumentProperties.item($WdBuiltInProperty).value = $text
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

Options             : None
Description         :
Verb                : Set
Noun                : WordBuiltInProperty
HelpFile            :
OutputType          :
Name                : Set-WordBuiltInProperty
CommandType         : Function
Source              : PSWordModule
Version             : 1.1.0.5
Visibility          : Public
ModuleName          : PSWordModule
Module              : PSWordModule
RemotingCapability  :
Parameters          :
ParameterSets       :
HelpUri             :


ScriptBlock         :

                        [CmdletBinding()]
                        param(
                          [Parameter(Position = 0,HelpMessage = 'Add help message for user',Mandatory = $true)]
                          [ValidateSet('Portrait', 'Landscape')]
                          [string]$Orientation,

                          [Parameter(Mandatory = $false)]
                          [alias("Word")]
                          $WordInstance = $Global:WordInstance

                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            switch ($Orientation)
                            {
                              'Portrait'
                              {
                                $WordInstance.Selection.PageSetup.Orientation = 0
                              }
                              'Landscape'
                              {
                                $WordInstance.Selection.PageSetup.Orientation = 1
                              }
                            }
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

CmdletBinding       : True
DefaultParameterSet :
Definition          :

                        [CmdletBinding()]
                        param(
                          [Parameter(Position = 0,HelpMessage = 'Add help message for user',Mandatory = $true)]
                          [ValidateSet('Portrait', 'Landscape')]
                          [string]$Orientation,

                          [Parameter(Mandatory = $false)]
                          [alias("Word")]
                          $WordInstance = $Global:WordInstance

                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            switch ($Orientation)
                            {
                              'Portrait'
                              {
                                $WordInstance.Selection.PageSetup.Orientation = 0
                              }
                              'Landscape'
                              {
                                $WordInstance.Selection.PageSetup.Orientation = 1
                              }
                            }
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

Options             : None
Description         :
Verb                : Set
Noun                : WordOrientation
HelpFile            :
OutputType          : {}
Name                : Set-WordOrientation
CommandType         : Function
Source              : PSWordModule
Version             : 1.1.0.5
Visibility          : Public
ModuleName          : PSWordModule
Module              : PSWordModule
RemotingCapability  : PowerShell
Parameters          : {[Orientation, System.Management.Automation.ParameterMetadata], [WordInstance, System.Management.Automation.ParameterMetadata], [Verbose,
                      System.Management.Automation.ParameterMetadata], [Debug, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[-Orientation] <string> [-WordInstance <Object>] [<CommonParameters>]}
HelpUri             :


ScriptBlock         :

                        [CmdletBinding()]
                        param (
                          [Parameter(Mandatory = $false)]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc =$Global:WordDoc
                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            $WordDoc.Fields |
                            ForEach-Object -Process {
                              $_.Update()
                            }
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

CmdletBinding       : True
DefaultParameterSet :
Definition          :

                        [CmdletBinding()]
                        param (
                          [Parameter(Mandatory = $false)]
                          [ValidateScript( { if($_ -is [Microsoft.Office.Interop.Word.Document]) { $True } else { throw "WordDoc was not of type
                      [Microsoft.Office.Interop.Word.Document]" } })]
                          $WordDoc =$Global:WordDoc
                        )
                        Begin
                        {
                          Write-Verbose -Message "Start  : $($Myinvocation.InvocationName)"
                        }
                        Process
                        {
                          try
                          {
                            $WordDoc.Fields |
                            ForEach-Object -Process {
                              $_.Update()
                            }
                          }
                          catch
                          {
                            Write-Warning -Message "$($MyInvocation.InvocationName) - $($_.exception.message)"
                          }
                        }
                        End
                        {
                          Write-Verbose -Message "End    : $($Myinvocation.InvocationName)"
                        }

Options             : None
Description         :
Verb                : Update
Noun                : WordTOC
HelpFile            :
OutputType          : {}
Name                : Update-WordTOC
CommandType         : Function
Source              : PSWordModule
Version             : 1.1.0.5
Visibility          : Public
ModuleName          : PSWordModule
Module              : PSWordModule
RemotingCapability  : PowerShell
Parameters          : {[WordDoc, System.Management.Automation.ParameterMetadata], [Verbose, System.Management.Automation.ParameterMetadata], [Debug,
                      System.Management.Automation.ParameterMetadata], [ErrorAction, System.Management.Automation.ParameterMetadata]...}
ParameterSets       : {[[-WordDoc] <Object>] [<CommonParameters>]}
HelpUri             :

WARNING: New-WordDocument - You cannot call a method on a null-valued expression.
**********************
Windows PowerShell transcript end
End time: 20200804104427
**********************
